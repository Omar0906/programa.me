// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/aux_tools/lexico/lexer.flex

package aux_tools.lexico;
import static aux_tools.lexico.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\2\7\2\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\1\1\15\1\16\1\17\12\20\3\7\1\21\1\7"+
    "\2\0\32\22\1\23\1\24\1\23\1\0\1\25\1\0"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\22\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\22\1\52\1\53"+
    "\1\54\1\0\1\54\7\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\20\16\1\20\1\1\1\0\1\1\1\21"+
    "\2\22\1\23\1\0\1\24\5\0\1\3\2\0\1\25"+
    "\1\14\3\0\14\16\1\26\12\16\1\26\2\16\1\0"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\6\0\2\3\1\0\4\24\1\41\1\25"+
    "\3\24\1\42\2\24\20\16\1\26\13\16\5\0\1\3"+
    "\1\25\1\24\1\43\2\24\1\41\27\16\3\0\14\16"+
    "\1\26\2\16\1\0\1\44\1\0\55\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\207\0\207\0\207"+
    "\0\207\0\207\0\207\0\207\0\341\0\u010e\0\u013b\0\207"+
    "\0\u0168\0\207\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\u0438\0\207\0\u0465\0\u0492\0\u04bf\0\u04ec\0\207"+
    "\0\u0519\0\207\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627"+
    "\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0168\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\207\0\u0c4e\0\207\0\207"+
    "\0\207\0\207\0\207\0\207\0\207\0\207\0\u0c7b\0\u0ca8"+
    "\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\207\0\u0d89\0\u0db6\0\u06ae"+
    "\0\u0de3\0\u0e10\0\u0e3d\0\u0708\0\u0e6a\0\u0762\0\u078f\0\u07bc"+
    "\0\u06ae\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275"+
    "\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd"+
    "\0\u140a\0\u1437\0\u1464\0\u1491\0\u0d2f\0\u0db6\0\u0db6\0\u06ae"+
    "\0\u14be\0\u14eb\0\u0e6a\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734"+
    "\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c"+
    "\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04"+
    "\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c"+
    "\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\207\0\u1c7a\0\u1ca7"+
    "\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f"+
    "\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77"+
    "\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df"+
    "\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a\0\u2247"+
    "\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382\0\u23af"+
    "\0\u23dc\0\u2409\0\u2436\0\u2463";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\0\2\5\1\6\1\7\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\4\1\21\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\2\21"+
    "\1\36\1\21\1\37\1\40\1\41\1\21\1\42\2\21"+
    "\1\43\13\44\1\45\3\44\1\46\35\44\2\47\1\50"+
    "\1\47\1\51\1\47\1\52\15\47\1\53\30\47\56\0"+
    "\2\5\1\0\2\5\67\0\1\54\5\0\1\55\3\0"+
    "\1\56\1\0\1\57\6\0\1\60\24\0\1\61\3\0"+
    "\1\62\35\0\2\63\3\0\1\64\10\63\1\65\1\63"+
    "\1\66\14\63\1\67\2\63\1\70\5\63\1\71\6\63"+
    "\20\0\1\21\1\0\1\21\2\0\27\21\21\0\1\21"+
    "\1\0\1\21\2\0\16\21\1\72\10\21\21\0\1\21"+
    "\1\0\1\21\2\0\12\21\1\73\14\21\21\0\1\21"+
    "\1\0\1\21\2\0\1\21\1\74\13\21\1\75\11\21"+
    "\21\0\1\21\1\0\1\21\2\0\5\21\1\76\3\21"+
    "\1\77\15\21\21\0\1\21\1\0\1\21\2\0\21\21"+
    "\1\100\5\21\21\0\1\21\1\0\1\21\2\0\1\21"+
    "\1\101\7\21\1\102\15\21\21\0\1\21\1\0\1\21"+
    "\2\0\11\21\1\103\6\21\1\104\6\21\21\0\1\21"+
    "\1\0\1\21\2\0\1\21\1\105\16\21\1\106\6\21"+
    "\21\0\1\21\1\0\1\21\2\0\14\21\1\107\11\21"+
    "\1\110\21\0\1\21\1\0\1\21\2\0\5\21\1\111"+
    "\7\21\1\112\11\21\21\0\1\21\1\0\1\21\2\0"+
    "\11\21\1\113\3\21\1\114\11\21\21\0\1\21\1\0"+
    "\1\21\2\0\20\21\1\115\6\21\21\0\1\21\1\0"+
    "\1\21\2\0\5\21\1\116\21\21\21\0\1\21\1\0"+
    "\1\21\2\0\1\21\1\117\3\21\1\120\3\21\1\121"+
    "\15\21\21\0\1\21\1\0\1\21\2\0\11\21\1\122"+
    "\15\21\21\0\1\21\1\0\1\21\2\0\5\21\1\123"+
    "\21\21\1\0\13\44\1\124\54\44\1\124\3\44\1\125"+
    "\50\44\1\126\41\44\2\47\1\0\1\47\1\0\1\47"+
    "\1\0\15\47\1\0\30\47\2\0\1\50\52\0\2\50"+
    "\3\0\1\50\1\127\1\50\1\130\13\50\1\131\2\50"+
    "\1\132\3\50\1\133\5\50\1\134\3\50\1\135\1\50"+
    "\1\136\5\50\20\0\1\54\77\0\1\137\57\0\1\140"+
    "\44\0\1\141\63\0\1\142\7\0\13\143\1\144\41\143"+
    "\2\62\1\145\1\62\1\146\50\62\2\63\3\0\11\63"+
    "\1\147\1\63\1\150\1\63\1\150\2\63\27\150\3\63"+
    "\3\0\11\63\1\147\1\63\1\150\1\63\1\150\2\63"+
    "\10\150\1\151\2\150\1\152\5\150\1\153\5\150\3\63"+
    "\3\0\11\63\1\147\1\63\1\154\1\63\1\150\2\63"+
    "\27\150\3\63\3\0\1\64\10\63\1\155\1\63\1\66"+
    "\1\63\1\150\2\63\10\150\1\156\2\150\1\157\5\150"+
    "\1\160\5\150\3\63\3\0\11\63\1\147\1\63\1\150"+
    "\1\63\1\150\2\63\20\150\1\161\6\150\3\63\3\0"+
    "\11\63\1\147\1\63\1\150\1\63\1\150\2\63\11\150"+
    "\1\162\15\150\3\63\3\0\11\63\1\147\1\63\1\150"+
    "\1\63\1\150\2\63\5\150\1\163\21\150\1\63\20\0"+
    "\1\21\1\0\1\21\2\0\1\21\1\164\25\21\21\0"+
    "\1\21\1\0\1\21\2\0\15\21\1\165\11\21\21\0"+
    "\1\21\1\0\1\21\2\0\21\21\1\166\5\21\21\0"+
    "\1\21\1\0\1\21\2\0\13\21\1\166\13\21\21\0"+
    "\1\21\1\0\1\21\2\0\6\21\1\167\11\21\1\170"+
    "\6\21\21\0\1\21\1\0\1\21\2\0\21\21\1\171"+
    "\5\21\21\0\1\21\1\0\1\21\2\0\22\21\1\172"+
    "\4\21\21\0\1\21\1\0\1\21\2\0\3\21\1\173"+
    "\6\21\1\74\14\21\21\0\1\21\1\0\1\21\2\0"+
    "\14\21\1\174\12\21\21\0\1\21\1\0\1\21\2\0"+
    "\20\21\1\175\6\21\21\0\1\21\1\0\1\21\2\0"+
    "\1\21\1\176\25\21\21\0\1\21\1\0\1\21\2\0"+
    "\3\21\1\177\23\21\21\0\1\21\1\0\1\21\2\0"+
    "\3\21\1\200\5\21\1\201\10\21\1\202\4\21\21\0"+
    "\1\21\1\0\1\21\2\0\17\21\1\203\7\21\21\0"+
    "\1\21\1\0\1\21\2\0\4\21\1\204\22\21\21\0"+
    "\1\21\1\0\1\21\2\0\7\21\1\205\17\21\21\0"+
    "\1\21\1\0\1\21\2\0\5\21\1\206\6\21\1\106"+
    "\12\21\21\0\1\21\1\0\1\21\2\0\21\21\1\207"+
    "\1\210\4\21\21\0\1\21\1\0\1\21\2\0\5\21"+
    "\1\211\21\21\21\0\1\21\1\0\1\21\2\0\16\21"+
    "\1\212\10\21\21\0\1\21\1\0\1\21\2\0\12\21"+
    "\1\213\14\21\21\0\1\21\1\0\1\21\2\0\7\21"+
    "\1\106\2\21\1\214\14\21\21\0\1\21\1\0\1\21"+
    "\2\0\14\21\1\166\12\21\21\0\1\21\1\0\1\21"+
    "\2\0\5\21\1\215\21\21\21\0\1\21\1\0\1\21"+
    "\2\0\3\21\1\216\14\21\1\217\6\21\1\0\13\44"+
    "\1\124\3\44\1\0\35\44\26\0\1\220\75\0\1\221"+
    "\52\0\1\222\41\0\1\223\22\0\13\143\1\224\54\143"+
    "\1\224\3\143\1\225\35\143\2\0\1\145\52\0\2\63"+
    "\3\0\11\63\1\226\1\63\1\227\1\63\1\227\2\63"+
    "\27\227\3\63\3\0\11\63\1\147\1\63\1\150\1\63"+
    "\1\150\2\63\20\150\1\230\6\150\3\63\3\0\11\63"+
    "\1\147\1\63\1\150\1\63\1\150\2\63\11\150\1\231"+
    "\15\150\3\63\3\0\11\63\1\147\1\63\1\150\1\63"+
    "\1\150\2\63\5\150\1\232\21\150\3\63\3\0\11\63"+
    "\1\226\1\63\1\233\1\63\1\227\2\63\27\227\3\63"+
    "\3\0\11\63\1\147\1\63\1\150\1\63\1\150\2\63"+
    "\14\150\1\161\12\150\3\63\3\0\11\63\1\147\1\63"+
    "\1\150\1\63\1\150\2\63\7\150\1\161\17\150\1\63"+
    "\20\0\1\21\1\0\1\21\2\0\7\21\1\175\17\21"+
    "\21\0\1\21\1\0\1\21\2\0\17\21\1\234\7\21"+
    "\21\0\1\21\1\0\1\21\2\0\15\21\1\106\11\21"+
    "\21\0\1\21\1\0\1\21\2\0\11\21\1\235\15\21"+
    "\21\0\1\21\1\0\1\21\2\0\5\21\1\236\21\21"+
    "\21\0\1\21\1\0\1\21\2\0\16\21\1\237\10\21"+
    "\21\0\1\21\1\0\1\21\2\0\1\21\1\240\25\21"+
    "\21\0\1\21\1\0\1\21\2\0\11\21\1\241\15\21"+
    "\21\0\1\21\1\0\1\21\2\0\1\242\26\21\21\0"+
    "\1\21\1\0\1\21\2\0\1\21\1\243\25\21\21\0"+
    "\1\21\1\0\1\21\2\0\4\21\1\244\22\21\21\0"+
    "\1\21\1\0\1\21\2\0\5\21\1\243\21\21\21\0"+
    "\1\21\1\0\1\21\2\0\12\21\1\245\14\21\21\0"+
    "\1\21\1\0\1\21\2\0\3\21\1\246\23\21\21\0"+
    "\1\21\1\0\1\21\2\0\5\21\1\247\21\21\21\0"+
    "\1\21\1\0\1\21\2\0\23\21\1\250\3\21\21\0"+
    "\1\21\1\0\1\21\2\0\1\251\26\21\21\0\1\21"+
    "\1\0\1\21\2\0\11\21\1\252\15\21\21\0\1\21"+
    "\1\0\1\21\2\0\14\21\1\253\12\21\21\0\1\21"+
    "\1\0\1\21\2\0\22\21\1\103\4\21\21\0\1\21"+
    "\1\0\1\21\2\0\15\21\1\254\11\21\21\0\1\21"+
    "\1\0\1\21\2\0\14\21\1\255\12\21\21\0\1\21"+
    "\1\0\1\21\2\0\5\21\1\256\21\21\21\0\1\21"+
    "\1\0\1\21\2\0\11\21\1\243\15\21\21\0\1\21"+
    "\1\0\1\21\2\0\5\21\1\257\21\21\21\0\1\21"+
    "\1\0\1\21\2\0\13\21\1\260\13\21\21\0\1\21"+
    "\1\0\1\21\2\0\5\21\1\261\21\21\21\0\1\21"+
    "\1\0\1\21\2\0\4\21\1\262\22\21\35\0\1\222"+
    "\46\0\1\263\54\0\1\264\67\0\1\265\13\0\13\143"+
    "\1\224\3\143\1\145\35\143\2\63\3\0\11\63\1\147"+
    "\1\63\1\150\1\63\1\150\2\63\14\150\1\230\12\150"+
    "\3\63\3\0\11\63\1\147\1\63\1\150\1\63\1\150"+
    "\2\63\7\150\1\230\17\150\1\63\20\0\1\21\1\0"+
    "\1\21\2\0\23\21\1\266\3\21\21\0\1\21\1\0"+
    "\1\21\2\0\14\21\1\213\12\21\21\0\1\21\1\0"+
    "\1\21\2\0\3\21\1\267\23\21\21\0\1\21\1\0"+
    "\1\21\2\0\12\21\1\270\14\21\21\0\1\21\1\0"+
    "\1\21\2\0\4\21\1\166\22\21\21\0\1\21\1\0"+
    "\1\21\2\0\12\21\1\271\14\21\21\0\1\21\1\0"+
    "\1\21\2\0\2\21\1\24\13\21\1\272\5\21\1\175"+
    "\2\21\21\0\1\21\1\0\1\21\2\0\20\21\1\106"+
    "\6\21\21\0\1\21\1\0\1\21\2\0\15\21\1\261"+
    "\11\21\21\0\1\21\1\0\1\21\2\0\23\21\1\213"+
    "\3\21\21\0\1\21\1\0\1\21\2\0\11\21\1\273"+
    "\15\21\21\0\1\21\1\0\1\21\2\0\14\21\1\274"+
    "\12\21\21\0\1\21\1\0\1\21\2\0\11\21\1\275"+
    "\15\21\21\0\1\21\1\0\1\21\2\0\16\21\1\276"+
    "\1\21\1\277\1\300\5\21\21\0\1\21\1\0\1\21"+
    "\2\0\3\21\1\166\23\21\21\0\1\21\1\0\1\21"+
    "\2\0\22\21\1\301\4\21\21\0\1\21\1\0\1\21"+
    "\2\0\20\21\1\302\6\21\21\0\1\21\1\0\1\21"+
    "\2\0\4\21\1\177\22\21\21\0\1\21\1\0\1\21"+
    "\2\0\22\21\1\213\4\21\21\0\1\21\1\0\1\21"+
    "\2\0\3\21\1\303\23\21\21\0\1\21\1\0\1\21"+
    "\2\0\16\21\1\166\10\21\21\0\1\21\1\0\1\21"+
    "\2\0\21\21\1\106\5\21\21\0\1\21\1\0\1\21"+
    "\2\0\1\21\1\304\25\21\32\0\1\305\70\0\1\306"+
    "\40\0\1\307\43\0\1\21\1\0\1\21\2\0\5\21"+
    "\1\106\21\21\21\0\1\21\1\0\1\21\2\0\10\21"+
    "\1\310\16\21\21\0\1\21\1\0\1\21\2\0\1\21"+
    "\1\311\25\21\21\0\1\21\1\0\1\21\2\0\1\312"+
    "\26\21\21\0\1\21\1\0\1\21\2\0\20\21\1\313"+
    "\6\21\21\0\1\21\1\0\1\21\2\0\15\21\1\314"+
    "\11\21\21\0\1\21\1\0\1\21\2\0\21\21\1\315"+
    "\5\21\21\0\1\21\1\0\1\21\2\0\5\21\1\316"+
    "\21\21\21\0\1\21\1\0\1\21\2\0\1\21\1\317"+
    "\25\21\21\0\1\21\1\0\1\21\2\0\7\21\1\320"+
    "\17\21\21\0\1\21\1\0\1\21\2\0\5\21\1\321"+
    "\21\21\21\0\1\21\1\0\1\21\2\0\20\21\1\322"+
    "\6\21\21\0\1\21\1\0\1\21\2\0\1\323\26\21"+
    "\21\0\1\21\1\0\1\21\2\0\22\21\1\324\4\21"+
    "\21\0\1\21\1\0\1\21\2\0\4\21\1\325\22\21"+
    "\43\0\1\306\44\0\1\264\42\0\1\21\1\0\1\21"+
    "\2\0\1\21\1\106\25\21\21\0\1\21\1\0\1\21"+
    "\2\0\25\21\1\106\1\21\21\0\1\21\1\0\1\21"+
    "\2\0\2\21\1\24\5\21\1\326\2\21\1\327\4\21"+
    "\1\37\1\330\5\21\21\0\1\21\1\0\1\21\2\0"+
    "\15\21\1\331\11\21\21\0\1\21\1\0\1\21\2\0"+
    "\1\332\26\21\21\0\1\21\1\0\1\21\2\0\11\21"+
    "\1\333\15\21\21\0\1\21\1\0\1\21\2\0\20\21"+
    "\1\334\6\21\21\0\1\21\1\0\1\21\2\0\14\21"+
    "\1\335\12\21\21\0\1\21\1\0\1\21\2\0\2\21"+
    "\1\106\24\21\21\0\1\21\1\0\1\21\2\0\13\21"+
    "\1\336\13\21\21\0\1\21\1\0\1\21\2\0\1\21"+
    "\1\261\25\21\21\0\1\21\1\0\1\21\2\0\5\21"+
    "\1\337\10\21\1\340\10\21\21\0\1\21\1\0\1\21"+
    "\2\0\15\21\1\243\11\21\21\0\1\21\1\0\1\21"+
    "\2\0\5\21\1\341\21\21\21\0\1\21\1\0\1\21"+
    "\2\0\1\21\1\342\25\21\21\0\1\21\1\0\1\21"+
    "\2\0\11\21\1\343\15\21\21\0\1\21\1\0\1\21"+
    "\2\0\5\21\1\344\3\21\1\121\15\21\21\0\1\21"+
    "\1\0\1\21\2\0\7\21\1\345\17\21\21\0\1\21"+
    "\1\0\1\21\2\0\16\21\1\272\5\21\1\175\2\21"+
    "\21\0\1\21\1\0\1\21\2\0\4\21\1\346\22\21"+
    "\21\0\1\21\1\0\1\21\2\0\4\21\1\310\22\21"+
    "\21\0\1\21\1\0\1\21\2\0\5\21\1\347\21\21"+
    "\21\0\1\21\1\0\1\21\2\0\1\21\1\350\25\21"+
    "\21\0\1\21\1\0\1\21\2\0\12\21\1\351\14\21"+
    "\21\0\1\21\1\0\1\21\2\0\1\21\1\74\25\21"+
    "\21\0\1\21\1\0\1\21\2\0\20\21\1\166\6\21"+
    "\21\0\1\21\1\0\1\21\2\0\3\21\1\352\23\21"+
    "\21\0\1\21\1\0\1\21\2\0\5\21\1\206\21\21"+
    "\21\0\1\21\1\0\1\21\2\0\12\21\1\214\14\21"+
    "\21\0\1\21\1\0\1\21\2\0\20\21\1\353\6\21"+
    "\21\0\1\21\1\0\1\21\2\0\1\21\1\354\25\21"+
    "\21\0\1\21\1\0\1\21\2\0\12\21\1\106\14\21"+
    "\21\0\1\21\1\0\1\21\2\0\6\21\1\355\20\21"+
    "\21\0\1\21\1\0\1\21\2\0\5\21\1\356\21\21"+
    "\21\0\1\21\1\0\1\21\2\0\5\21\1\357\21\21"+
    "\21\0\1\21\1\0\1\21\2\0\1\21\1\360\25\21"+
    "\21\0\1\21\1\0\1\21\2\0\4\21\1\106\22\21"+
    "\21\0\1\21\1\0\1\21\2\0\15\21\1\341\11\21"+
    "\21\0\1\21\1\0\1\21\2\0\3\21\1\361\23\21"+
    "\21\0\1\21\1\0\1\21\2\0\20\21\1\362\6\21"+
    "\21\0\1\21\1\0\1\21\2\0\13\21\1\310\13\21"+
    "\21\0\1\21\1\0\1\21\2\0\22\21\1\363\4\21"+
    "\21\0\1\21\1\0\1\21\2\0\1\364\26\21\21\0"+
    "\1\21\1\0\1\21\2\0\20\21\1\205\6\21\21\0"+
    "\1\21\1\0\1\21\2\0\13\21\1\327\13\21\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\1\1\7\11\3\1\1\11"+
    "\1\1\1\11\20\1\1\11\1\1\1\0\2\1\1\11"+
    "\1\1\1\11\1\0\1\1\5\0\1\1\2\0\2\1"+
    "\3\0\32\1\1\0\1\11\1\1\10\11\6\0\1\11"+
    "\1\1\1\0\50\1\5\0\36\1\3\0\17\1\1\0"+
    "\1\11\1\0\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();
    public String lexeme;
    public int linea;
    public int columna = this.yycolumn;
    private int comment_count = 0;
    public String msg = "";
    private int par_apcount = 0;
    public boolean parentesisIguales(){return par_apcount==0;}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 37: break;
          case 2:
            { this.msg = "Código de error 1: Símbolo no reconocido ";lexeme=yytext();linea=this.yyline+1;return ERROR;
            }
            // fall through
          case 38: break;
          case 3:
            { /*Ignore*/
            }
            // fall through
          case 39: break;
          case 4:
            { yybegin(STRING); string.setLength(0); string.append("\"");
            }
            // fall through
          case 40: break;
          case 5:
            { lexeme=yytext();linea = this.yyline+1; return Simbolo_Especial;
            }
            // fall through
          case 41: break;
          case 6:
            { par_apcount++;
        lexeme=yytext();linea = this.yyline+1; return SA_Parentesis;
            }
            // fall through
          case 42: break;
          case 7:
            { par_apcount--;
        lexeme=yytext();linea = this.yyline+1; return SA_Parentesis;
            }
            // fall through
          case 43: break;
          case 8:
            { lexeme=yytext();linea = this.yyline+1; return Multiplicacion;
            }
            // fall through
          case 44: break;
          case 9:
            { lexeme=yytext();linea = this.yyline+1; return Suma;
            }
            // fall through
          case 45: break;
          case 10:
            { lexeme=yytext();linea = this.yyline+1; return Resta;
            }
            // fall through
          case 46: break;
          case 11:
            { lexeme=yytext();linea = this.yyline+1; return Division;
            }
            // fall through
          case 47: break;
          case 12:
            { lexeme=yytext(); linea = this.yyline+1; return Numero;
            }
            // fall through
          case 48: break;
          case 13:
            { lexeme=yytext();linea = this.yyline+1; return Asignacion;
            }
            // fall through
          case 49: break;
          case 14:
            { lexeme=yytext(); linea = this.yyline+1; return Identificador;
            }
            // fall through
          case 50: break;
          case 15:
            { lexeme=yytext();linea = this.yyline+1; return SA_Corchetes;
            }
            // fall through
          case 51: break;
          case 16:
            { lexeme=yytext();linea = this.yyline+1; return SA_Llaves;
            }
            // fall through
          case 52: break;
          case 17:
            { string.append( yytext() );
            }
            // fall through
          case 53: break;
          case 18:
            { this.msg = "Código de error 4: La cadena no esta cerrada "; lexeme=string.toString(); linea = this.yyline+1; yybegin(YYINITIAL); return ERROR;
            }
            // fall through
          case 54: break;
          case 19:
            { yybegin(YYINITIAL);string.append("\"");lexeme=string.toString();linea=this.yyline+1;return Texto;
            }
            // fall through
          case 55: break;
          case 20:
            { this.msg = "Código de error 3: Formato de número incorrecto "; lexeme=yytext(); linea = this.yyline+1; return ERROR;
            }
            // fall through
          case 56: break;
          case 21:
            { this.msg = "Código de error 2: Formato de número decimal incorrecto "; lexeme=yytext(); linea = this.yyline+1; return ERROR;
            }
            // fall through
          case 57: break;
          case 22:
            { lexeme=yytext();linea = this.yyline+1; return P_Reservada;
            }
            // fall through
          case 58: break;
          case 23:
            { if (--comment_count == 0) yybegin(YYINITIAL);
            }
            // fall through
          case 59: break;
          case 24:
            { comment_count++;
            }
            // fall through
          case 60: break;
          case 25:
            { string.append( '\"' );
            }
            // fall through
          case 61: break;
          case 26:
            { string.append( '\'' );
            }
            // fall through
          case 62: break;
          case 27:
            { string.append( '\\' );
            }
            // fall through
          case 63: break;
          case 28:
            { string.append( '\b' );
            }
            // fall through
          case 64: break;
          case 29:
            { string.append( '\f' );
            }
            // fall through
          case 65: break;
          case 30:
            { string.append( '\n' );
            }
            // fall through
          case 66: break;
          case 31:
            { string.append( '\r' );
            }
            // fall through
          case 67: break;
          case 32:
            { string.append( '\t' );
            }
            // fall through
          case 68: break;
          case 33:
            { lexeme=yytext();linea = this.yyline+1; return Decimal;
            }
            // fall through
          case 69: break;
          case 34:
            { this.msg = "Código de error 5: Formato de tiempo incorrecto, debe estar separado por un espacio "; lexeme=yytext(); linea = this.yyline+1; return ERROR;
            }
            // fall through
          case 70: break;
          case 35:
            { lexeme=yytext();linea = this.yyline+1; return Tiempo;
            }
            // fall through
          case 71: break;
          case 36:
            { lexeme=yytext();linea = this.yyline+1; return Propiedad;
            }
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
