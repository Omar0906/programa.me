// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/aux_tools/sintactico/Lexer_S.flex

package aux_tools.sintactico;
import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer_S implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  3,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  6,  7,  0,  0,  0,  0,  8,  9, 10, 11, 12, 13, 14, 15, 16, 
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22,  0, 
     0, 23, 24, 23, 23, 23, 23, 25, 23, 23, 23, 23, 23, 23, 23, 23, 
    23, 23, 26, 23, 23, 23, 23, 23, 23, 23, 23, 27, 28, 29,  0, 30, 
     0, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 23, 41, 42, 43, 44, 
    45, 46, 47, 48, 49, 50, 51, 23, 52, 53, 54, 55,  0, 56,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\13\23\1\26\6\23\1\27\1\30\1\31\1\1\1\0"+
    "\1\1\1\32\2\33\1\34\1\35\1\0\1\36\4\37"+
    "\1\3\1\0\1\40\3\0\1\41\1\42\1\43\17\23"+
    "\1\44\6\23\1\45\6\23\1\46\5\23\1\0\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\4\37\2\3\3\0\1\40\1\61\1\62\2\0"+
    "\27\23\1\63\2\23\1\64\7\23\1\65\10\23\1\37"+
    "\2\0\1\3\1\66\2\0\3\23\1\67\1\70\1\71"+
    "\30\23\1\72\2\23\1\73\2\23\1\74\2\23\1\75"+
    "\3\23\1\3\14\23\1\76\3\23\1\77\1\23\1\100"+
    "\11\23\1\101\2\23\1\102\1\23\1\103\1\23\1\104"+
    "\1\23\1\105\1\23\1\106\10\23\1\107\1\110\4\23"+
    "\1\111\5\23\1\112\1\113\5\23\1\114\2\23\1\115"+
    "\1\116\1\117\1\23\1\120\1\121\1\122\1\123\4\23"+
    "\1\124\1\125\5\23\1\126\1\127\1\130\6\23\1\131"+
    "\10\23\1\132\1\133\2\23\1\134\12\23\1\135\1\136"+
    "\3\23\1\137\1\140\4\23\1\141\1\142\1\143\1\144"+
    "\2\23\1\145\3\23\1\146\2\23\1\147\1\150\2\23"+
    "\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\253\0\253"+
    "\0\253\0\253\0\253\0\344\0\253\0\253\0\u0156\0\u018f"+
    "\0\253\0\253\0\u01c8\0\u0201\0\u023a\0\u0273\0\253\0\253"+
    "\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\u04e6\0\u0273\0\u051f\0\u0558\0\u0591\0\u05ca"+
    "\0\u0603\0\u063c\0\u0273\0\253\0\253\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\253\0\u0759\0\253\0\u0720\0\u0792\0\253\0\u07cb"+
    "\0\253\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\253\0\253\0\253\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0273\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0273\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\253\0\u1125\0\253\0\253\0\253\0\253\0\253\0\253"+
    "\0\253\0\253\0\u115e\0\u1197\0\u11d0\0\u1209\0\253\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u08e8\0\253\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u0273\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u0273\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1197\0\u1d2b\0\u115e\0\253"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u0273\0\u0273\0\u0273"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0"+
    "\0\u0273\0\u23d9\0\u2412\0\u0273\0\u244b\0\u2484\0\u0273\0\u24bd"+
    "\0\u24f6\0\u0273\0\u252f\0\u2568\0\u25a1\0\u07cb\0\u25da\0\u2613"+
    "\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db"+
    "\0\u2814\0\u284d\0\u0273\0\u2886\0\u28bf\0\u28f8\0\u0273\0\u2931"+
    "\0\u0273\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u0273\0\u2b6b\0\u2ba4\0\u0273\0\u2bdd\0\u0273"+
    "\0\u2c16\0\u0273\0\u2c4f\0\u0273\0\u2c88\0\u0273\0\u2cc1\0\u2cfa"+
    "\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u0273\0\u0273"+
    "\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u0273\0\u2f6d\0\u2fa6\0\u2fdf"+
    "\0\u3018\0\u3051\0\u0273\0\u0273\0\u308a\0\u30c3\0\u30fc\0\u3135"+
    "\0\u316e\0\u0273\0\u31a7\0\u31e0\0\u3219\0\u0273\0\u0273\0\u3252"+
    "\0\u0273\0\u0273\0\u0273\0\u0273\0\u328b\0\u32c4\0\u32fd\0\u3336"+
    "\0\u0273\0\u0273\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u0273"+
    "\0\u0273\0\u0273\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9"+
    "\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771"+
    "\0\u37aa\0\u0273\0\u0273\0\u37e3\0\u381c\0\u0273\0\u3855\0\u388e"+
    "\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56"+
    "\0\u0273\0\u0273\0\u3a8f\0\u3ac8\0\u3b01\0\u0273\0\u0273\0\u3b3a"+
    "\0\u3b73\0\u3bac\0\u3be5\0\u0273\0\u0273\0\u0273\0\u0273\0\u3c1e"+
    "\0\u3c57\0\u0273\0\u3c90\0\u3cc9\0\u3d02\0\u0273\0\u3d3b\0\u3d74"+
    "\0\u0273\0\u0273\0\u3dad\0\u3de6\0\u0273";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\0\2\5\1\6\1\7\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\4\26\1\27\1\4"+
    "\1\30\1\26\1\31\1\26\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\26\1\41\1\42\1\43\1\44"+
    "\1\45\1\26\1\46\1\47\1\50\1\51\1\52\1\26"+
    "\1\53\1\26\1\54\1\55\13\56\1\57\4\56\1\60"+
    "\50\56\2\61\1\62\1\61\1\63\2\61\1\64\13\61"+
    "\1\65\10\61\1\66\34\61\72\0\2\5\1\0\2\5"+
    "\7\0\1\5\100\0\1\67\43\0\2\70\1\71\1\70"+
    "\1\72\6\70\1\73\4\70\1\74\50\70\5\0\1\75"+
    "\11\0\1\76\1\0\1\20\24\0\1\77\3\0\1\100"+
    "\5\0\1\101\35\0\1\102\70\0\1\103\70\0\1\104"+
    "\64\0\1\26\5\0\4\26\3\0\31\26\23\0\1\26"+
    "\5\0\4\26\3\0\17\26\1\105\1\26\1\106\1\107"+
    "\5\26\1\110\23\0\1\26\5\0\4\26\3\0\1\26"+
    "\1\111\14\26\1\112\12\26\23\0\1\26\5\0\4\26"+
    "\3\0\5\26\1\113\3\26\1\114\17\26\23\0\1\26"+
    "\5\0\4\26\3\0\15\26\1\115\4\26\1\116\6\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\117\7\26"+
    "\1\120\17\26\23\0\1\26\5\0\4\26\3\0\11\26"+
    "\1\121\7\26\1\122\7\26\23\0\1\26\5\0\4\26"+
    "\3\0\1\26\1\123\17\26\1\124\7\26\23\0\1\26"+
    "\5\0\4\26\3\0\15\26\1\125\12\26\1\126\23\0"+
    "\1\26\5\0\4\26\3\0\5\26\1\127\10\26\1\130"+
    "\12\26\23\0\1\26\5\0\4\26\3\0\11\26\1\131"+
    "\4\26\1\132\12\26\23\0\1\26\5\0\4\26\3\0"+
    "\16\26\1\133\12\26\23\0\1\26\5\0\4\26\3\0"+
    "\1\26\1\134\17\26\1\135\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\136\10\26\1\137\12\26\23\0"+
    "\1\26\5\0\4\26\3\0\1\26\1\140\3\26\1\141"+
    "\3\26\1\142\17\26\23\0\1\26\5\0\4\26\3\0"+
    "\5\26\1\143\3\26\1\144\17\26\23\0\1\26\5\0"+
    "\4\26\3\0\22\26\1\145\6\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\146\3\26\1\147\17\26\2\0"+
    "\13\56\1\150\70\56\1\150\4\56\1\151\63\56\1\152"+
    "\55\56\2\61\1\0\1\61\1\0\2\61\1\0\24\61"+
    "\1\0\34\61\2\0\1\62\66\0\2\62\3\0\2\62"+
    "\1\153\1\154\23\62\1\155\3\62\1\156\3\62\1\157"+
    "\6\62\1\160\3\62\1\161\1\62\1\162\7\62\2\70"+
    "\1\71\1\70\1\72\64\70\2\0\1\71\66\0\2\163"+
    "\1\164\1\163\1\165\6\163\1\166\55\163\2\74\1\167"+
    "\1\74\1\170\64\74\46\0\1\171\3\0\1\172\5\0"+
    "\1\173\27\0\1\174\1\0\1\175\126\0\1\176\60\0"+
    "\1\177\64\0\1\200\46\0\1\26\5\0\4\26\3\0"+
    "\1\26\1\201\27\26\23\0\1\26\5\0\4\26\3\0"+
    "\21\26\1\202\7\26\23\0\1\26\5\0\4\26\3\0"+
    "\11\26\1\203\17\26\23\0\1\26\5\0\4\26\3\0"+
    "\24\26\1\204\4\26\23\0\1\26\5\0\4\26\3\0"+
    "\22\26\1\205\6\26\23\0\1\26\5\0\4\26\3\0"+
    "\14\26\1\206\14\26\23\0\1\26\5\0\4\26\3\0"+
    "\3\26\1\207\2\26\1\210\12\26\1\211\1\26\1\212"+
    "\5\26\23\0\1\26\5\0\4\26\3\0\22\26\1\213"+
    "\6\26\23\0\1\26\5\0\4\26\3\0\23\26\1\214"+
    "\5\26\23\0\1\26\5\0\4\26\3\0\23\26\1\215"+
    "\5\26\23\0\1\26\5\0\4\26\3\0\3\26\1\216"+
    "\7\26\1\217\15\26\23\0\1\26\5\0\4\26\3\0"+
    "\15\26\1\220\13\26\23\0\1\26\5\0\4\26\3\0"+
    "\21\26\1\221\7\26\23\0\1\26\5\0\4\26\3\0"+
    "\1\26\1\222\27\26\23\0\1\26\5\0\4\26\3\0"+
    "\3\26\1\223\25\26\23\0\1\26\5\0\4\26\3\0"+
    "\3\26\1\224\5\26\1\225\11\26\1\226\5\26\23\0"+
    "\1\26\5\0\4\26\3\0\20\26\1\227\10\26\23\0"+
    "\1\26\5\0\4\26\3\0\4\26\1\230\24\26\23\0"+
    "\1\26\5\0\4\26\3\0\7\26\1\231\21\26\23\0"+
    "\1\26\5\0\4\26\3\0\5\26\1\232\7\26\1\233"+
    "\13\26\23\0\1\26\5\0\4\26\3\0\22\26\1\234"+
    "\1\235\5\26\23\0\1\26\5\0\4\26\3\0\21\26"+
    "\1\236\7\26\23\0\1\26\5\0\4\26\3\0\5\26"+
    "\1\237\23\26\23\0\1\26\5\0\4\26\3\0\17\26"+
    "\1\240\11\26\23\0\1\26\5\0\4\26\3\0\12\26"+
    "\1\241\16\26\23\0\1\26\5\0\4\26\3\0\13\26"+
    "\1\242\15\26\23\0\1\26\5\0\4\26\3\0\7\26"+
    "\1\243\3\26\1\244\15\26\23\0\1\26\5\0\4\26"+
    "\3\0\15\26\1\245\13\26\23\0\1\26\5\0\4\26"+
    "\3\0\26\26\1\246\2\26\23\0\1\26\5\0\4\26"+
    "\3\0\5\26\1\247\23\26\23\0\1\26\5\0\4\26"+
    "\3\0\1\26\1\250\27\26\23\0\1\26\5\0\4\26"+
    "\3\0\3\26\1\251\15\26\1\252\7\26\23\0\1\26"+
    "\5\0\4\26\3\0\22\26\1\253\6\26\2\0\13\56"+
    "\1\150\4\56\1\0\50\56\2\163\1\164\1\163\1\165"+
    "\6\163\1\254\55\163\13\255\1\256\57\255\1\164\10\255"+
    "\1\256\55\255\2\163\1\164\1\163\1\165\6\163\1\254"+
    "\4\163\1\257\50\163\2\0\1\167\145\0\1\260\60\0"+
    "\1\261\64\0\1\262\44\0\1\174\1\0\1\174\122\0"+
    "\1\176\62\0\1\176\44\0\1\26\5\0\4\26\3\0"+
    "\7\26\1\263\21\26\23\0\1\26\5\0\4\26\3\0"+
    "\5\26\1\264\23\26\23\0\1\26\5\0\4\26\3\0"+
    "\7\26\1\265\21\26\23\0\1\26\5\0\4\26\3\0"+
    "\13\26\1\266\15\26\23\0\1\26\5\0\4\26\3\0"+
    "\16\26\1\267\12\26\23\0\1\26\5\0\4\26\3\0"+
    "\16\26\1\270\12\26\23\0\1\26\5\0\4\26\3\0"+
    "\11\26\1\271\7\26\1\272\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\11\26\1\273\17\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\274\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\275\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\17\26\1\276\11\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\277\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\1\26\1\300\27\26\23\0\1\26\5\0"+
    "\4\26\3\0\11\26\1\301\17\26\23\0\1\26\5\0"+
    "\4\26\3\0\22\26\1\302\6\26\23\0\1\26\5\0"+
    "\4\26\3\0\1\303\30\26\23\0\1\26\5\0\4\26"+
    "\3\0\1\26\1\304\27\26\23\0\1\26\5\0\4\26"+
    "\3\0\4\26\1\305\24\26\23\0\1\26\5\0\4\26"+
    "\3\0\5\26\1\306\23\26\23\0\1\26\5\0\4\26"+
    "\3\0\13\26\1\307\5\26\1\310\7\26\23\0\1\26"+
    "\5\0\4\26\3\0\3\26\1\311\25\26\23\0\1\26"+
    "\5\0\4\26\3\0\5\26\1\312\23\26\23\0\1\26"+
    "\5\0\4\26\3\0\24\26\1\313\4\26\23\0\1\26"+
    "\5\0\3\26\1\314\3\0\31\26\23\0\1\26\5\0"+
    "\4\26\3\0\11\26\1\315\17\26\23\0\1\26\5\0"+
    "\4\26\3\0\15\26\1\316\13\26\23\0\1\26\5\0"+
    "\4\26\3\0\23\26\1\317\5\26\23\0\1\26\5\0"+
    "\4\26\3\0\16\26\1\320\12\26\23\0\1\26\5\0"+
    "\4\26\3\0\1\26\1\321\27\26\23\0\1\26\5\0"+
    "\4\26\3\0\15\26\1\322\13\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\323\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\16\26\1\324\12\26\23\0\1\26\5\0"+
    "\4\26\3\0\11\26\1\325\17\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\326\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\16\26\1\327\12\26\23\0\1\26\5\0"+
    "\4\26\3\0\23\26\1\330\5\26\23\0\1\26\5\0"+
    "\4\26\3\0\14\26\1\331\14\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\332\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\333\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\4\26\1\334\24\26\23\0\1\26\5\0"+
    "\4\26\3\0\24\26\1\335\4\26\2\0\2\163\1\164"+
    "\1\163\1\165\6\163\1\254\4\163\1\336\50\163\13\255"+
    "\1\256\4\255\1\167\50\255\53\0\1\260\62\0\1\260"+
    "\44\0\1\26\5\0\4\26\3\0\1\26\1\337\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\7\26\1\340\21\26"+
    "\23\0\1\26\5\0\4\26\3\0\15\26\1\341\13\26"+
    "\23\0\1\26\5\0\4\26\3\0\14\26\1\342\14\26"+
    "\23\0\1\26\5\0\4\26\3\0\5\26\1\343\23\26"+
    "\23\0\1\26\5\0\4\26\3\0\15\26\1\344\13\26"+
    "\23\0\1\26\5\0\4\26\3\0\3\26\1\345\25\26"+
    "\23\0\1\26\5\0\4\26\3\0\15\26\1\346\13\26"+
    "\23\0\1\26\5\0\4\26\3\0\13\26\1\347\15\26"+
    "\23\0\1\26\5\0\4\26\3\0\21\26\1\350\7\26"+
    "\23\0\1\26\5\0\4\26\3\0\4\26\1\351\24\26"+
    "\23\0\1\26\5\0\4\26\3\0\13\26\1\352\15\26"+
    "\23\0\1\26\5\0\4\26\3\0\16\26\1\353\12\26"+
    "\23\0\1\26\5\0\4\26\3\0\2\26\1\354\14\26"+
    "\1\355\5\26\1\356\3\26\23\0\1\26\5\0\4\26"+
    "\3\0\21\26\1\357\7\26\23\0\1\26\5\0\4\26"+
    "\3\0\16\26\1\360\12\26\23\0\1\26\5\0\4\26"+
    "\3\0\21\26\1\361\7\26\23\0\1\26\5\0\4\26"+
    "\3\0\24\26\1\362\4\26\23\0\1\26\5\0\4\26"+
    "\3\0\5\26\1\363\23\26\23\0\1\26\5\0\4\26"+
    "\3\0\11\26\1\364\17\26\23\0\1\26\5\0\4\26"+
    "\3\0\15\26\1\365\13\26\23\0\1\26\5\0\4\26"+
    "\3\0\11\26\1\366\17\26\23\0\1\26\5\0\2\26"+
    "\1\367\1\26\3\0\31\26\23\0\1\26\5\0\4\26"+
    "\3\0\3\26\1\370\25\26\23\0\1\26\5\0\4\26"+
    "\3\0\23\26\1\371\5\26\23\0\1\26\5\0\4\26"+
    "\3\0\21\26\1\372\7\26\23\0\1\26\5\0\4\26"+
    "\3\0\21\26\1\373\7\26\23\0\1\26\5\0\4\26"+
    "\3\0\4\26\1\374\24\26\23\0\1\26\5\0\4\26"+
    "\3\0\23\26\1\375\5\26\23\0\1\26\5\0\4\26"+
    "\3\0\21\26\1\376\7\26\23\0\1\26\5\0\4\26"+
    "\3\0\3\26\1\377\25\26\23\0\1\26\5\0\4\26"+
    "\3\0\16\26\1\u0100\12\26\23\0\1\26\5\0\4\26"+
    "\3\0\17\26\1\u0101\11\26\23\0\1\26\5\0\4\26"+
    "\3\0\22\26\1\u0102\6\26\23\0\1\26\5\0\4\26"+
    "\3\0\1\26\1\u0103\3\26\1\u0104\23\26\23\0\1\26"+
    "\5\0\4\26\3\0\1\26\1\u0105\27\26\23\0\1\26"+
    "\5\0\4\26\3\0\21\26\1\u0106\7\26\23\0\1\26"+
    "\5\0\4\26\3\0\13\26\1\u0107\15\26\23\0\1\26"+
    "\5\0\4\26\3\0\1\26\1\u0108\27\26\23\0\1\26"+
    "\5\0\4\26\3\0\1\26\1\u0109\27\26\23\0\1\26"+
    "\5\0\4\26\3\0\14\26\1\u010a\14\26\23\0\1\26"+
    "\5\0\4\26\3\0\11\26\1\u010b\17\26\23\0\1\26"+
    "\5\0\4\26\3\0\10\26\1\u010c\20\26\23\0\1\26"+
    "\5\0\4\26\3\0\5\26\1\u010d\23\26\23\0\1\26"+
    "\5\0\4\26\3\0\1\26\1\u010e\27\26\23\0\1\26"+
    "\5\0\4\26\3\0\16\26\1\u010f\12\26\23\0\1\26"+
    "\5\0\4\26\3\0\16\26\1\u0110\12\26\23\0\1\26"+
    "\5\0\4\26\3\0\1\u0111\30\26\23\0\1\26\5\0"+
    "\4\26\3\0\13\26\1\u0112\15\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u0113\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\1\26\1\u0114\27\26\23\0\1\26\5\0"+
    "\4\26\3\0\22\26\1\u0115\6\26\23\0\1\26\5\0"+
    "\4\26\3\0\11\26\1\u0116\17\26\23\0\1\26\5\0"+
    "\4\26\3\0\14\26\1\u0117\14\26\23\0\1\26\5\0"+
    "\4\26\3\0\16\26\1\u0118\12\26\23\0\1\26\5\0"+
    "\4\26\3\0\22\26\1\u0119\6\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\u011a\23\26\23\0\1\26\5\0"+
    "\1\26\1\u011b\2\26\3\0\31\26\23\0\1\26\5\0"+
    "\4\26\3\0\16\26\1\u011c\12\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u011d\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\1\26\1\u011e\27\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\u011f\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\11\26\1\u0120\17\26\23\0\1\26\5\0"+
    "\4\26\3\0\23\26\1\u0121\5\26\23\0\1\26\5\0"+
    "\4\26\3\0\16\26\1\u0122\12\26\23\0\1\26\5\0"+
    "\4\26\3\0\4\26\1\u0123\24\26\23\0\1\26\5\0"+
    "\4\26\3\0\13\26\1\u0124\15\26\23\0\1\26\5\0"+
    "\4\26\3\0\16\26\1\u0125\12\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u0126\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\13\26\1\u0127\15\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\u0128\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u0129\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\1\26\1\u012a\27\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u012b\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\27\26\1\u012c\1\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u012d\1\u012e\6\26\23\0\1\26"+
    "\5\0\4\26\3\0\16\26\1\u012f\12\26\23\0\1\26"+
    "\5\0\4\26\3\0\16\26\1\u0130\12\26\23\0\1\26"+
    "\5\0\4\26\3\0\21\26\1\u0131\7\26\23\0\1\26"+
    "\5\0\4\26\3\0\21\26\1\u0132\7\26\23\0\1\26"+
    "\5\0\4\26\3\0\5\26\1\u0133\23\26\23\0\1\26"+
    "\5\0\4\26\3\0\1\u0134\30\26\23\0\1\26\5\0"+
    "\4\26\3\0\11\26\1\u0135\17\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u0136\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\1\26\1\u0137\27\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u0138\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u0139\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\21\26\1\u013a\7\26\23\0\1\26\5\0"+
    "\4\26\3\0\16\26\1\u013b\12\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\u013c\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\11\26\1\u013d\17\26\23\0\1\26\5\0"+
    "\1\26\1\u013e\2\26\3\0\31\26\23\0\1\26\5\0"+
    "\4\26\3\0\15\26\1\u013f\13\26\23\0\1\26\5\0"+
    "\4\26\3\0\5\26\1\u0140\23\26\23\0\1\26\5\0"+
    "\4\26\3\0\11\26\1\u0141\17\26\23\0\1\26\5\0"+
    "\4\26\3\0\20\26\1\u0142\10\26\23\0\1\26\5\0"+
    "\4\26\3\0\7\26\1\u0143\21\26\23\0\1\26\5\0"+
    "\4\26\3\0\15\26\1\u0144\13\26\23\0\1\26\5\0"+
    "\4\26\3\0\2\26\1\u0145\14\26\1\u0146\5\26\1\u0147"+
    "\3\26\23\0\1\26\5\0\4\26\3\0\4\26\1\u0148"+
    "\24\26\23\0\1\26\5\0\4\26\3\0\4\26\1\u0149"+
    "\24\26\23\0\1\26\5\0\4\26\3\0\22\26\1\u014a"+
    "\6\26\23\0\1\26\5\0\4\26\3\0\21\26\1\u014b"+
    "\7\26\23\0\1\26\5\0\4\26\3\0\21\26\1\u014c"+
    "\7\26\23\0\1\26\5\0\4\26\3\0\30\26\1\u014d"+
    "\23\0\1\26\5\0\4\26\3\0\11\26\1\u014e\17\26"+
    "\23\0\1\26\5\0\4\26\3\0\23\26\1\u014f\5\26"+
    "\23\0\1\26\5\0\4\26\3\0\17\26\1\u0150\11\26"+
    "\23\0\1\26\5\0\4\26\3\0\15\26\1\u0151\13\26"+
    "\23\0\1\26\5\0\4\26\3\0\24\26\1\u0152\4\26"+
    "\23\0\1\26\5\0\4\26\3\0\21\26\1\u0153\7\26"+
    "\23\0\1\26\5\0\4\26\3\0\23\26\1\u0154\5\26"+
    "\23\0\1\26\5\0\4\26\3\0\13\26\1\u0155\15\26"+
    "\23\0\1\26\5\0\4\26\3\0\21\26\1\u0156\7\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u0157\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u0158\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u0159\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\16\26\1\u015a\12\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u015b\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u015c\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\5\26\1\u015d\23\26"+
    "\23\0\1\26\5\0\4\26\3\0\16\26\1\u015e\12\26"+
    "\23\0\1\26\5\0\4\26\3\0\5\26\1\u015f\23\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u0160\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u0161\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\16\26\1\u0162\12\26"+
    "\23\0\1\26\5\0\4\26\3\0\16\26\1\u0163\12\26"+
    "\23\0\1\26\5\0\4\26\3\0\21\26\1\u0164\7\26"+
    "\23\0\1\26\5\0\4\26\3\0\4\26\1\u0165\24\26"+
    "\23\0\1\26\5\0\4\26\3\0\21\26\1\u0166\7\26"+
    "\23\0\1\26\5\0\4\26\3\0\21\26\1\u0167\7\26"+
    "\23\0\1\26\5\0\4\26\3\0\23\26\1\u0168\5\26"+
    "\23\0\1\26\5\0\4\26\3\0\14\26\1\u0169\14\26"+
    "\23\0\1\26\5\0\4\26\3\0\21\26\1\u016a\7\26"+
    "\23\0\1\26\5\0\4\26\3\0\20\26\1\u016b\10\26"+
    "\23\0\1\26\5\0\4\26\3\0\7\26\1\u016c\21\26"+
    "\23\0\1\26\5\0\4\26\3\0\11\26\1\u016d\17\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u016e\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\24\26\1\u016f\4\26"+
    "\23\0\1\26\5\0\4\26\3\0\21\26\1\u0170\7\26"+
    "\23\0\1\26\5\0\4\26\3\0\21\26\1\u0171\7\26"+
    "\23\0\1\26\5\0\4\26\3\0\5\26\1\u0172\23\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u0173\27\26"+
    "\23\0\1\26\5\0\4\26\3\0\14\26\1\u0174\14\26"+
    "\23\0\1\26\5\0\4\26\3\0\1\26\1\u0175\27\26"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15903];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\2\1\5\11\1\1\2\11"+
    "\2\1\2\11\4\1\2\11\23\1\2\11\1\1\1\0"+
    "\2\1\1\11\1\1\1\11\1\1\1\0\1\11\1\1"+
    "\1\11\3\1\1\0\1\1\3\0\3\11\43\1\1\0"+
    "\1\11\1\1\10\11\4\1\1\11\1\1\3\0\2\1"+
    "\1\11\2\0\54\1\2\0\1\1\1\11\2\0\303\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();
    public int linea;
    public int columna;
    private int comment_count = 0;
    public String msg = "";
    private int par_apcount = 0;
    private Editor editor;
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private void addErrores(int linea, String mensaje){
        editor.ERRORES.add(new ErroresSintacticos(linea,mensaje));
    }
    private void mensaje(String msg){
        System.out.println(msg);
    }
    public boolean parentesisIguales(){return par_apcount==0;}
    private Symbol symbol(int type, Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer_S(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 106: break;
          case 2:
            { addErrores(yyline,"Error lexico en la línea " + (yyline+1)+ " --> Símbolo no reconocido.");
         this.msg = "Código de error 1: Símbolo no reconocido ";return new Symbol(sym.ERROR,(int) yychar,yyline,yytext());
            }
            // fall through
          case 107: break;
          case 3:
            { /*Ignore*/
            }
            // fall through
          case 108: break;
          case 4:
            { yybegin(STRING); string.setLength(0); string.append("\"");
            }
            // fall through
          case 109: break;
          case 5:
            { return new Symbol(sym.Par_a,(int) yychar,yyline,yytext());
            }
            // fall through
          case 110: break;
          case 6:
            { return new Symbol(sym.Par_c,(int) yychar,yyline,yytext());
            }
            // fall through
          case 111: break;
          case 7:
            { return new Symbol(sym.Mul,(int) yychar,yyline,yytext());
            }
            // fall through
          case 112: break;
          case 8:
            { return new Symbol(sym.Suma,(int) yychar,yyline,yytext());
            }
            // fall through
          case 113: break;
          case 9:
            { return new Symbol(sym.COMA,(int) yychar,yyline,yytext());
            }
            // fall through
          case 114: break;
          case 10:
            { return new Symbol(sym.Resta,(int) yychar,yyline,yytext());
            }
            // fall through
          case 115: break;
          case 11:
            { return new Symbol(sym.PUNTO,(int) yychar,yyline,yytext());
            }
            // fall through
          case 116: break;
          case 12:
            { return new Symbol(sym.Div,(int) yychar,yyline,yytext());
            }
            // fall through
          case 117: break;
          case 13:
            { return new Symbol(sym.Numero,(int) yychar,yyline,new Integer(yytext()));
            }
            // fall through
          case 118: break;
          case 14:
            { return new Symbol(sym.DosPuntos,(int) yychar,yyline,yytext());
            }
            // fall through
          case 119: break;
          case 15:
            { return new Symbol(sym.PUNTO_COMA,(int) yychar,yyline,yytext());
            }
            // fall through
          case 120: break;
          case 16:
            { return new Symbol(sym.Menor,(int) yychar,yyline,yytext());
            }
            // fall through
          case 121: break;
          case 17:
            { return new Symbol(sym.Asignacion_s,(int) yychar,yyline,yytext());
            }
            // fall through
          case 122: break;
          case 18:
            { return new Symbol(sym.Mayor,(int) yychar,yyline,yytext());
            }
            // fall through
          case 123: break;
          case 19:
            { return new Symbol(sym.Identificador,(int) yychar,yyline,yytext());
            }
            // fall through
          case 124: break;
          case 20:
            { return new Symbol(sym.Cor_a,(int) yychar,yyline,yytext());
            }
            // fall through
          case 125: break;
          case 21:
            { return new Symbol(sym.Cor_c,(int) yychar,yyline,yytext());
            }
            // fall through
          case 126: break;
          case 22:
            { return new Symbol(sym.o,(int) yychar,yyline,yytext());
            }
            // fall through
          case 127: break;
          case 23:
            { return new Symbol(sym.y,(int) yychar,yyline,yytext());
            }
            // fall through
          case 128: break;
          case 24:
            { return new Symbol(sym.Lla_a,(int) yychar,yyline,yytext());
            }
            // fall through
          case 129: break;
          case 25:
            { return new Symbol(sym.Lla_c,(int) yychar,yyline,yytext());
            }
            // fall through
          case 130: break;
          case 26:
            { string.append( yytext() );
            }
            // fall through
          case 131: break;
          case 27:
            { addErrores(yyline,"Error lexico en la línea " + (yyline+1)+ " --> La cadena no esta cerrada.");
                                    this.msg = "Código de error 4: La cadena no esta cerrada ";  yybegin(YYINITIAL); return new Symbol(sym.ERROR,(int) yychar,yyline,yytext());
            }
            // fall through
          case 132: break;
          case 28:
            { yybegin(YYINITIAL);string.append("\"");return new Symbol(sym.Texto,(int) yychar,yyline,string.toString());
            }
            // fall through
          case 133: break;
          case 29:
            { addErrores(yyline,"Error lexico en la línea " + (yyline+1)+ " --> La cadena no esta cerrada.");
    this.msg = "Código de error 4: La cadena no esta cerrada ";  yybegin(YYINITIAL); return new Symbol(sym.ERROR,(int) yychar,yyline,yytext());
            }
            // fall through
          case 134: break;
          case 30:
            { return new Symbol(sym.Diferente,(int) yychar,yyline,yytext());
            }
            // fall through
          case 135: break;
          case 31:
            { //this.msg = "Código de error 6: Cadena inválida ";return new Symbol(sym.ERROR,(int) yychar,yyline,yytext());
        addErrores(yyline,"Error lexico en la línea " + (yyline+1)+ " --> Cadena invalida.");
            }
            // fall through
          case 136: break;
          case 32:
            { addErrores(yyline,"Error lexico en la línea " + (yyline+1)+ " --> Formato de número decimal incorrecto.");
        this.msg = "Código de error 2: Formato de número decimal incorrecto "; yytext(); linea = this.yyline+1;
            }
            // fall through
          case 137: break;
          case 33:
            { return new Symbol(sym.Menor_i,(int) yychar,yyline,yytext());
            }
            // fall through
          case 138: break;
          case 34:
            { return new Symbol(sym.Igual,(int) yychar,yyline,yytext());
            }
            // fall through
          case 139: break;
          case 35:
            { return new Symbol(sym.Mayor_i,(int) yychar,yyline,yytext());
            }
            // fall through
          case 140: break;
          case 36:
            { return new Symbol(sym.hr,(int) yychar,yyline,yytext());
            }
            // fall through
          case 141: break;
          case 37:
            { return new Symbol(sym.no,(int) yychar,yyline,yytext());
            }
            // fall through
          case 142: break;
          case 38:
            { return new Symbol(sym.si,(int) yychar,yyline,yytext());
            }
            // fall through
          case 143: break;
          case 39:
            { if (--comment_count == 0) yybegin(YYINITIAL);
            }
            // fall through
          case 144: break;
          case 40:
            { comment_count++;
            }
            // fall through
          case 145: break;
          case 41:
            { string.append( '\"' );
            }
            // fall through
          case 146: break;
          case 42:
            { string.append( '\'' );
            }
            // fall through
          case 147: break;
          case 43:
            { string.append( '\\' );
            }
            // fall through
          case 148: break;
          case 44:
            { string.append( '\b' );
            }
            // fall through
          case 149: break;
          case 45:
            { string.append( '\f' );
            }
            // fall through
          case 150: break;
          case 46:
            { string.append( '\n' );
            }
            // fall through
          case 151: break;
          case 47:
            { string.append( '\r' );
            }
            // fall through
          case 152: break;
          case 48:
            { string.append( '\t' );
            }
            // fall through
          case 153: break;
          case 49:
            { return new Symbol(sym.Decimal,(int) yychar,yyline,new Double(yytext()));
            }
            // fall through
          case 154: break;
          case 50:
            { addErrores(yyline,"Error lexico en la línea " + (yyline)+ " --> Formato de tiempo incorrecto, debe estar separado por un espacio .");
        this.msg = "Código de error 5: Formato de tiempo incorrecto, debe estar separado por un espacio ";  return new Symbol(sym.ERROR,(int) yychar,yyline,yytext());
            }
            // fall through
          case 155: break;
          case 51:
            { return new Symbol(sym.led,(int) yychar,yyline,yytext());
            }
            // fall through
          case 156: break;
          case 52:
            { return new Symbol(sym.min,(int) yychar,yyline,yytext());
            }
            // fall through
          case 157: break;
          case 53:
            { return new Symbol(sym.seg,(int) yychar,yyline,yytext());
            }
            // fall through
          case 158: break;
          case 54:
            { return new Symbol(sym.Tiempo,(int) yychar,yyline,yytext());
            }
            // fall through
          case 159: break;
          case 55:
            { return new Symbol(sym.azul,(int) yychar,yyline,yytext());
            }
            // fall through
          case 160: break;
          case 56:
            { return new Symbol(sym.caso,(int) yychar,yyline,yytext());
            }
            // fall through
          case 161: break;
          case 57:
            { return new Symbol(sym.como,(int) yychar,yyline,yytext());
            }
            // fall through
          case 162: break;
          case 58:
            { return new Symbol(sym.para,(int) yychar,yyline,yytext());
            }
            // fall through
          case 163: break;
          case 59:
            { return new Symbol(sym.rojo,(int) yychar,yyline,yytext());
            }
            // fall through
          case 164: break;
          case 60:
            { return new Symbol(sym.sino,(int) yychar,yyline,yytext());
            }
            // fall through
          case 165: break;
          case 61:
            { return new Symbol(sym.usar,(int) yychar,yyline,yytext());
            }
            // fall through
          case 166: break;
          case 62:
            { return new Symbol(sym.falso,(int) yychar,yyline,yytext());
            }
            // fall through
          case 167: break;
          case 63:
            { return new Symbol(sym.girar,(int) yychar,yyline,yytext());
            }
            // fall through
          case 168: break;
          case 64:
            { return new Symbol(sym.hacer,(int) yychar,yyline,yytext());
            }
            // fall through
          case 169: break;
          case 65:
            { return new Symbol(sym.motor,(int) yychar,yyline,yytext());
            }
            // fall through
          case 170: break;
          case 66:
            { return new Symbol(sym.salir,(int) yychar,yyline,yytext());
            }
            // fall through
          case 171: break;
          case 67:
            { return new Symbol(sym.texto,(int) yychar,yyline,yytext());
            }
            // fall through
          case 172: break;
          case 68:
            { return new Symbol(sym.veces,(int) yychar,yyline,yytext());
            }
            // fall through
          case 173: break;
          case 69:
            { return new Symbol(sym.verde,(int) yychar,yyline,yytext());
            }
            // fall through
          case 174: break;
          case 70:
            { return new Symbol(sym.apagar,(int) yychar,yyline,yytext());
            }
            // fall through
          case 175: break;
          case 71:
            { return new Symbol(sym.entero,(int) yychar,yyline,yytext());
            }
            // fall through
          case 176: break;
          case 72:
            { return new Symbol(sym.estado,(int) yychar,yyline,yytext());
            }
            // fall through
          case 177: break;
          case 73:
            { return new Symbol(sym.grados,(int) yychar,yyline,yytext());
            }
            // fall through
          case 178: break;
          case 74:
            { return new Symbol(sym.ledRGB,(int) yychar,yyline,yytext());
            }
            // fall through
          case 179: break;
          case 75:
            { return new Symbol(sym.logico,(int) yychar,yyline,yytext());
            }
            // fall through
          case 180: break;
          case 76:
            { return new Symbol(sym.tiempo,(int) yychar,yyline,yytext());
            }
            // fall through
          case 181: break;
          case 77:
            { return new Symbol(sym.arreglo,(int) yychar,yyline,yytext());
            }
            // fall through
          case 182: break;
          case 78:
            { return new Symbol(sym.asignar,(int) yychar,yyline,yytext());
            }
            // fall through
          case 183: break;
          case 79:
            { return new Symbol(sym.decimal,(int) yychar,yyline,yytext());
            }
            // fall through
          case 184: break;
          case 80:
            { return new Symbol(sym.definir,(int) yychar,yyline,yytext());
            }
            // fall through
          case 185: break;
          case 81:
            { return new Symbol(sym.derecha,(int) yychar,yyline,yytext());
            }
            // fall through
          case 186: break;
          case 82:
            { return new Symbol(sym.detener,(int) yychar,yyline,yytext());
            }
            // fall through
          case 187: break;
          case 83:
            { return new Symbol(sym.display,(int) yychar,yyline,yytext());
            }
            // fall through
          case 188: break;
          case 84:
            { return new Symbol(sym.fin_var,(int) yychar,yyline,yytext());
            }
            // fall through
          case 189: break;
          case 85:
            { return new Symbol(sym.incluir,(int) yychar,yyline,yytext());
            }
            // fall through
          case 190: break;
          case 86:
            { return new Symbol(sym.mostrar,(int) yychar,yyline,yytext());
            }
            // fall through
          case 191: break;
          case 87:
            { return new Symbol(sym.prender,(int) yychar,yyline,yytext());
            }
            // fall through
          case 192: break;
          case 88:
            { return new Symbol(sym.repetir,(int) yychar,yyline,yytext());
            }
            // fall through
          case 193: break;
          case 89:
            { return new Symbol(sym.facil_si,(int) yychar,yyline,yytext());
            }
            // fall through
          case 194: break;
          case 90:
            { return new Symbol(sym.mientras,(int) yychar,yyline,yytext());
            }
            // fall through
          case 195: break;
          case 91:
            { return new Symbol(sym.selector,(int) yychar,yyline,yytext());
            }
            // fall through
          case 196: break;
          case 92:
            { return new Symbol(sym.arregloBi,(int) yychar,yyline,yytext());
            }
            // fall through
          case 197: break;
          case 93:
            { return new Symbol(sym.izquierda,(int) yychar,yyline,yytext());
            }
            // fall through
          case 198: break;
          case 94:
            { return new Symbol(sym.verdadero,(int) yychar,yyline,yytext());
            }
            // fall through
          case 199: break;
          case 95:
            { return new Symbol(sym.facil_sino,(int) yychar,yyline,yytext());
            }
            // fall through
          case 200: break;
          case 96:
            { return new Symbol(sym.fin_bloque,(int) yychar,yyline,yytext());
            }
            // fall through
          case 201: break;
          case 97:
            { return new Symbol(sym.inicio_var,(int) yychar,yyline,yytext());
            }
            // fall through
          case 202: break;
          case 98:
            { return new Symbol(sym.intensidad,(int) yychar,yyline,yytext());
            }
            // fall through
          case 203: break;
          case 99:
            { return new Symbol(sym.visualizar,(int) yychar,yyline,yytext());
            }
            // fall through
          case 204: break;
          case 100:
            { return new Symbol(sym.decrementar,(int) yychar,yyline,yytext());
            }
            // fall through
          case 205: break;
          case 101:
            { return new Symbol(sym.incrementar,(int) yychar,yyline,yytext());
            }
            // fall through
          case 206: break;
          case 102:
            { return new Symbol(sym.fin_programa,(int) yychar,yyline,yytext());
            }
            // fall through
          case 207: break;
          case 103:
            { return new Symbol(sym.facil_repetir,(int) yychar,yyline,yytext());
            }
            // fall through
          case 208: break;
          case 104:
            { return new Symbol(sym.inicio_bloque,(int) yychar,yyline,yytext());
            }
            // fall through
          case 209: break;
          case 105:
            { return new Symbol(sym.inicio_programa,(int) yychar,yyline,yytext());
            }
            // fall through
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
