
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package aux_tools.sintactico;

import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;
import aux_tools.sintactico.ErroresSintacticos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\002\006\000\002\002\005\000\002\002\006" +
    "\000\002\002\004\000\002\002\003\000\002\053\007\000" +
    "\002\053\007\000\002\053\006\000\002\053\006\000\002" +
    "\053\006\000\002\053\006\000\002\053\004\000\002\045" +
    "\005\000\002\045\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\005\000\002\003\004\000" +
    "\002\003\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\005\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\006\000\002\007\006\000\002\055\012\000\002\055\011" +
    "\000\002\055\011\000\002\055\011\000\002\055\011\000" +
    "\002\055\015\000\002\055\014\000\002\055\014\000\002" +
    "\055\014\000\002\055\014\000\002\055\014\000\002\055" +
    "\014\000\002\055\014\000\002\010\011\000\002\010\011" +
    "\000\002\010\010\000\002\010\011\000\002\010\011\000" +
    "\002\010\010\000\002\010\010\000\002\010\010\000\002" +
    "\010\010\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\016\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\005\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\022\003\000\002" +
    "\022\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\025\003" +
    "\000\002\026\004\000\002\026\004\000\002\056\005\000" +
    "\002\056\005\000\002\056\010\000\002\056\007\000\002" +
    "\056\007\000\002\056\007\000\002\056\010\000\002\056" +
    "\007\000\002\056\005\000\002\056\007\000\002\056\012" +
    "\000\002\056\013\000\002\056\010\000\002\056\010\000" +
    "\002\056\005\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\005\000\002\032\004" +
    "\000\002\032\004\000\002\032\003\000\002\032\005\000" +
    "\002\032\004\000\002\032\004\000\002\032\003\000\002" +
    "\032\004\000\002\032\003\000\002\032\004\000\002\032" +
    "\003\000\002\032\004\000\002\032\003\000\002\032\004" +
    "\000\002\032\003\000\002\032\004\000\002\032\003\000" +
    "\002\032\004\000\002\032\003\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\046\011\000\002\046\010" +
    "\000\002\046\011\000\002\046\010\000\002\046\010\000" +
    "\002\046\010\000\002\046\010\000\002\046\015\000\002" +
    "\046\015\000\002\046\014\000\002\046\014\000\002\047" +
    "\011\000\002\047\011\000\002\047\007\000\002\047\010" +
    "\000\002\047\010\000\002\047\010\000\002\047\010\000" +
    "\002\047\010\000\002\047\011\000\002\047\011\000\002" +
    "\054\013\000\002\054\012\000\002\054\012\000\002\054" +
    "\012\000\002\054\012\000\002\054\012\000\002\054\012" +
    "\000\002\054\012\000\002\054\012\000\002\054\007\000" +
    "\002\054\012\000\002\054\012\000\002\035\010\000\002" +
    "\035\007\000\002\035\010\000\002\035\007\000\002\035" +
    "\007\000\002\035\010\000\002\035\007\000\002\035\007" +
    "\000\002\037\011\000\002\037\010\000\002\037\007\000" +
    "\002\037\010\000\002\037\010\000\002\037\011\000\002" +
    "\037\010\000\002\037\006\000\002\037\006\000\002\040" +
    "\011\000\002\040\010\000\002\040\010\000\002\040\010" +
    "\000\002\040\010\000\002\040\010\000\002\040\005\000" +
    "\002\041\020\000\002\041\017\000\002\041\017\000\002" +
    "\041\017\000\002\041\017\000\002\041\015\000\002\041" +
    "\017\000\002\041\017\000\002\041\017\000\002\041\016" +
    "\000\002\041\017\000\002\041\020\000\002\041\010\000" +
    "\002\041\011\000\002\041\017\000\002\041\017\000\002" +
    "\042\011\000\002\042\010\000\002\042\010\000\002\042" +
    "\010\000\002\042\011\000\002\042\010\000\002\042\010" +
    "\000\002\052\011\000\002\052\010\000\002\052\011\000" +
    "\002\052\010\000\002\052\011\000\002\052\010\000\002" +
    "\052\011\000\002\052\010\000\002\052\004\000\002\052" +
    "\004\000\002\052\004\000\002\023\003\000\002\023\003" +
    "\000\002\051\003\000\002\051\003\000\002\050\003\000" +
    "\002\050\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\011\003\000\002" +
    "\011\003\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02c6\000\010\003\004\036\005\076\007\001\002\000" +
    "\016\002\ufffa\003\u02c1\013\022\036\005\037\021\076\u02c2" +
    "\001\002\000\006\076\u02b7\124\u02b6\001\002\000\014\003" +
    "\026\010\017\013\022\037\021\076\025\001\002\000\004" +
    "\076\012\001\002\000\004\002\011\001\002\000\004\002" +
    "\001\001\002\000\004\124\013\001\002\000\004\006\014" +
    "\001\002\000\004\100\015\001\002\000\014\003\ufff8\010" +
    "\ufff8\013\ufff8\037\ufff8\076\ufff8\001\002\000\012\003\uffe1" +
    "\013\uffe1\030\uffe1\076\uffe1\001\002\000\036\003\055\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\064\u02b4\074\051\075\065\076\045\131\035\001" +
    "\002\000\012\003\uffe3\013\uffe3\030\uffe3\076\uffe3\001\002" +
    "\000\012\003\u02b0\013\022\030\u02af\076\u025f\001\002\000" +
    "\006\012\u0266\076\u0267\001\002\000\010\003\u025d\013\022" +
    "\076\u0265\001\002\000\004\027\u0264\001\002\000\034\003" +
    "\055\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\u0263\131\035\001" +
    "\002\000\046\003\u0244\010\017\013\022\022\063\024\053" +
    "\025\054\027\u0243\030\u0248\044\041\046\066\053\036\056" +
    "\060\057\064\064\u023f\074\051\075\065\076\u0247\131\035" +
    "\001\002\000\012\003\uffdf\013\uffdf\030\uffdf\076\uffdf\001" +
    "\002\000\010\003\032\010\017\076\033\001\002\000\004" +
    "\027\u0242\001\002\000\040\003\055\022\063\024\053\025" +
    "\054\027\u0240\044\041\046\066\053\036\056\060\057\064" +
    "\064\u023f\074\051\075\065\076\045\131\035\001\002\000" +
    "\034\003\055\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\131" +
    "\035\001\002\000\040\022\uff72\024\uff72\025\uff72\044\uff72" +
    "\046\uff72\053\uff72\054\uff72\056\uff72\057\uff72\064\uff72\074" +
    "\uff72\075\uff72\076\uff72\105\uff72\131\uff72\001\002\000\006" +
    "\076\u01d0\102\u01cf\001\002\000\012\003\u01b8\004\217\062" +
    "\u01b9\076\223\001\002\000\040\022\uff62\024\uff62\025\uff62" +
    "\044\uff62\046\uff62\053\uff62\054\uff62\056\uff62\057\uff62\064" +
    "\uff62\074\uff62\075\uff62\076\uff62\105\uff62\131\uff62\001\002" +
    "\000\034\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\064\u01b7\074\051\075\065\076\045" +
    "\131\035\001\002\000\022\003\u01a1\004\106\005\075\006" +
    "\076\026\101\063\100\076\104\102\u01a0\001\002\000\040" +
    "\022\uff6e\024\uff6e\025\uff6e\044\uff6e\046\uff6e\053\uff6e\054" +
    "\uff6e\056\uff6e\057\uff6e\064\uff6e\074\uff6e\075\uff6e\076\uff6e" +
    "\105\uff6e\131\uff6e\001\002\000\040\022\uff6c\024\uff6c\025" +
    "\uff6c\044\uff6c\046\uff6c\053\uff6c\054\uff6c\056\uff6c\057\uff6c" +
    "\064\uff6c\074\uff6c\075\uff6c\076\uff6c\105\uff6c\131\uff6c\001" +
    "\002\000\040\022\uff63\024\uff63\025\uff63\044\uff63\046\uff63" +
    "\053\uff63\054\uff63\056\uff63\057\uff63\064\uff63\074\uff63\075" +
    "\uff63\076\uff63\105\uff63\131\uff63\001\002\000\024\004\u0193" +
    "\005\233\006\237\026\242\063\241\076\u0192\102\u0190\111" +
    "\236\126\234\001\002\000\040\022\uff70\024\uff70\025\uff70" +
    "\044\uff70\046\uff70\053\uff70\054\uff70\056\uff70\057\uff70\064" +
    "\uff70\074\uff70\075\uff70\076\uff70\105\uff70\131\uff70\001\002" +
    "\000\042\022\uff78\024\uff78\025\uff78\044\uff78\046\uff78\053" +
    "\uff78\054\uff78\056\uff78\057\uff78\064\uff78\074\uff78\075\uff78" +
    "\076\uff78\100\u018f\105\uff78\131\uff78\001\002\000\042\022" +
    "\uff74\024\uff74\025\uff74\044\uff74\046\uff74\053\uff74\054\uff74" +
    "\056\uff74\057\uff74\064\uff74\074\uff74\075\uff74\076\uff74\100" +
    "\u018e\105\uff74\131\uff74\001\002\000\004\076\u018d\001\002" +
    "\000\040\022\uff6a\024\uff6a\025\uff6a\044\uff6a\046\uff6a\053" +
    "\uff6a\054\uff6a\056\uff6a\057\uff6a\064\uff6a\074\uff6a\075\uff6a" +
    "\076\uff6a\105\uff6a\131\uff6a\001\002\000\022\003\105\004" +
    "\106\005\075\006\076\026\101\063\100\076\104\102\u0170" +
    "\001\002\000\022\003\105\004\106\005\075\006\076\026" +
    "\101\063\100\076\104\102\u0143\001\002\000\010\064\u0141" +
    "\100\u0140\105\u0142\001\002\000\046\022\uff94\024\uff94\025" +
    "\uff94\044\uff94\046\uff94\053\uff94\054\uff94\056\uff94\057\uff94" +
    "\064\uff94\074\uff94\075\uff94\076\uff94\100\uff94\103\uff94\105" +
    "\uff94\127\uff94\131\uff94\001\002\000\040\022\uff64\024\uff64" +
    "\025\uff64\044\uff64\046\uff64\053\uff64\054\uff64\056\uff64\057" +
    "\uff64\064\uff64\074\uff64\075\uff64\076\uff64\105\uff64\131\uff64" +
    "\001\002\000\010\003\367\076\370\102\366\001\002\000" +
    "\046\022\uff95\024\uff95\025\uff95\044\uff95\046\uff95\053\uff95" +
    "\054\uff95\056\uff95\057\uff95\064\uff95\074\uff95\075\uff95\076" +
    "\uff95\100\uff95\103\uff95\105\uff95\127\uff95\131\uff95\001\002" +
    "\000\040\022\uff68\024\uff68\025\uff68\044\uff68\046\uff68\053" +
    "\uff68\054\uff68\056\uff68\057\uff68\064\uff68\074\uff68\075\uff68" +
    "\076\uff68\105\uff68\131\uff68\001\002\000\012\003\221\004" +
    "\217\076\223\102\220\001\002\000\022\003\105\004\106" +
    "\005\075\006\076\026\101\063\100\076\104\102\077\001" +
    "\002\000\004\076\073\001\002\000\010\003\067\006\070" +
    "\076\071\001\002\000\046\022\uff92\024\uff92\025\uff92\044" +
    "\uff92\046\uff92\053\uff92\054\uff92\056\uff92\057\uff92\064\uff92" +
    "\074\uff92\075\uff92\076\uff92\100\uff92\103\uff92\105\uff92\127" +
    "\uff92\131\uff92\001\002\000\046\022\uff03\024\uff03\025\uff03" +
    "\044\uff03\046\uff03\053\uff03\054\uff03\056\uff03\057\uff03\064" +
    "\uff03\074\uff03\075\uff03\076\uff03\100\uff03\103\uff03\105\uff03" +
    "\127\uff03\131\uff03\001\002\000\046\022\uff04\024\uff04\025" +
    "\uff04\044\uff04\046\uff04\053\uff04\054\uff04\056\uff04\057\uff04" +
    "\064\uff04\074\uff04\075\uff04\076\uff04\100\uff04\103\uff04\105" +
    "\uff04\127\uff04\131\uff04\001\002\000\046\022\uff93\024\uff93" +
    "\025\uff93\044\uff93\046\uff93\053\uff93\054\uff93\056\uff93\057" +
    "\uff93\064\uff93\074\uff93\075\uff93\076\uff93\100\uff93\103\uff93" +
    "\105\uff93\127\uff93\131\uff93\001\002\000\046\022\uff96\024" +
    "\uff96\025\uff96\044\uff96\046\uff96\053\uff96\054\uff96\056\uff96" +
    "\057\uff96\064\uff96\074\uff96\075\uff96\076\uff96\100\uff96\103" +
    "\uff96\105\uff96\127\uff96\131\uff96\001\002\000\032\003\105" +
    "\004\106\005\075\006\076\026\135\063\133\110\140\116" +
    "\132\117\136\120\137\121\131\122\134\001\002\000\056" +
    "\003\ufef6\004\ufef6\005\ufef6\006\ufef6\013\ufef6\026\ufef6\030" +
    "\ufef6\046\ufef6\063\ufef6\074\ufef6\075\ufef6\076\ufef6\100\ufef6" +
    "\103\ufef6\104\ufef6\110\ufef6\116\ufef6\117\ufef6\120\ufef6\121" +
    "\ufef6\122\ufef6\127\ufef6\001\002\000\056\003\ufef5\004\ufef5" +
    "\005\ufef5\006\ufef5\013\ufef5\026\ufef5\030\ufef5\046\ufef5\063" +
    "\ufef5\074\ufef5\075\ufef5\076\ufef5\100\ufef5\103\ufef5\104\ufef5" +
    "\110\ufef5\116\ufef5\117\ufef5\120\ufef5\121\ufef5\122\ufef5\127" +
    "\ufef5\001\002\000\022\003\153\004\106\005\075\006\076" +
    "\026\101\063\100\076\104\103\152\001\002\000\054\003" +
    "\ufef2\004\ufef2\005\ufef2\006\ufef2\026\ufef2\046\uffab\063\ufef2" +
    "\071\uffab\073\uffab\074\uffab\075\uffab\076\uffab\103\uffab\104" +
    "\uffab\110\ufef2\116\ufef2\117\ufef2\120\ufef2\121\ufef2\122\ufef2" +
    "\127\uffab\001\002\000\054\003\ufef1\004\ufef1\005\ufef1\006" +
    "\ufef1\026\ufef1\046\uffaa\063\ufef1\071\uffaa\073\uffaa\074\uffaa" +
    "\075\uffaa\076\uffaa\103\uffaa\104\uffaa\110\ufef1\116\ufef1\117" +
    "\ufef1\120\ufef1\121\ufef1\122\ufef1\127\uffaa\001\002\000\024" +
    "\046\uffa2\071\145\073\144\074\uffa2\075\uffa2\076\uffa2\103" +
    "\uffa2\104\uffa2\127\uffa2\001\002\000\056\003\ufef4\004\ufef4" +
    "\005\ufef4\006\ufef4\013\ufef4\026\ufef4\030\ufef4\046\ufef4\063" +
    "\ufef4\074\ufef4\075\ufef4\076\ufef4\100\ufef4\103\ufef4\104\ufef4" +
    "\110\ufef4\116\ufef4\117\ufef4\120\ufef4\121\ufef4\122\ufef4\127" +
    "\ufef4\001\002\000\056\003\105\004\106\005\075\006\076" +
    "\026\135\046\uffac\063\133\071\uffac\073\uffac\074\uffac\075" +
    "\uffac\076\uffac\103\uffac\104\uffac\110\140\116\132\117\136" +
    "\120\137\121\131\122\134\126\130\127\uffac\001\002\000" +
    "\056\003\ufef3\004\ufef3\005\ufef3\006\ufef3\013\ufef3\026\ufef3" +
    "\030\ufef3\046\ufef3\063\ufef3\074\ufef3\075\ufef3\076\ufef3\100" +
    "\ufef3\103\ufef3\104\ufef3\110\ufef3\116\ufef3\117\ufef3\120\ufef3" +
    "\121\ufef3\122\ufef3\127\ufef3\001\002\000\056\003\ufef7\004" +
    "\ufef7\005\ufef7\006\ufef7\013\ufef7\026\ufef7\030\ufef7\046\ufef7" +
    "\063\ufef7\074\ufef7\075\ufef7\076\ufef7\100\ufef7\103\ufef7\104" +
    "\ufef7\110\ufef7\116\ufef7\117\ufef7\120\ufef7\121\ufef7\122\ufef7" +
    "\127\ufef7\001\002\000\004\103\110\001\002\000\004\104" +
    "\111\001\002\000\034\003\055\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\131\035\001\002\000\034\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\105\123\131\035\001\002\000\040" +
    "\022\uff73\024\uff73\025\uff73\044\uff73\046\uff73\053\uff73\054" +
    "\uff73\056\uff73\057\uff73\064\uff73\074\uff73\075\uff73\076\uff73" +
    "\105\uff73\131\uff73\001\002\000\040\022\uff6f\024\uff6f\025" +
    "\uff6f\044\uff6f\046\uff6f\053\uff6f\054\uff6f\056\uff6f\057\uff6f" +
    "\064\uff6f\074\uff6f\075\uff6f\076\uff6f\105\uff6f\131\uff6f\001" +
    "\002\000\040\022\uff6d\024\uff6d\025\uff6d\044\uff6d\046\uff6d" +
    "\053\uff6d\054\uff6d\056\uff6d\057\uff6d\064\uff6d\074\uff6d\075" +
    "\uff6d\076\uff6d\105\uff6d\131\uff6d\001\002\000\040\022\uff71" +
    "\024\uff71\025\uff71\044\uff71\046\uff71\053\uff71\054\uff71\056" +
    "\uff71\057\uff71\064\uff71\074\uff71\075\uff71\076\uff71\105\uff71" +
    "\131\uff71\001\002\000\042\022\uff79\024\uff79\025\uff79\044" +
    "\uff79\046\uff79\053\uff79\054\uff79\056\uff79\057\uff79\064\uff79" +
    "\074\uff79\075\uff79\076\uff79\100\125\105\uff79\131\uff79\001" +
    "\002\000\042\022\uff75\024\uff75\025\uff75\044\uff75\046\uff75" +
    "\053\uff75\054\uff75\056\uff75\057\uff75\064\uff75\074\uff75\075" +
    "\uff75\076\uff75\100\124\105\uff75\131\uff75\001\002\000\040" +
    "\022\uff6b\024\uff6b\025\uff6b\044\uff6b\046\uff6b\053\uff6b\054" +
    "\uff6b\056\uff6b\057\uff6b\064\uff6b\074\uff6b\075\uff6b\076\uff6b" +
    "\105\uff6b\131\uff6b\001\002\000\040\022\uff69\024\uff69\025" +
    "\uff69\044\uff69\046\uff69\053\uff69\054\uff69\056\uff69\057\uff69" +
    "\064\uff69\074\uff69\075\uff69\076\uff69\105\uff69\131\uff69\001" +
    "\002\000\040\022\uff5e\024\uff5e\025\uff5e\044\uff5e\046\uff5e" +
    "\053\uff5e\054\uff5e\056\uff5e\057\uff5e\064\uff5e\074\uff5e\075" +
    "\uff5e\076\uff5e\105\uff5e\131\uff5e\001\002\000\040\022\uff77" +
    "\024\uff77\025\uff77\044\uff77\046\uff77\053\uff77\054\uff77\056" +
    "\uff77\057\uff77\064\uff77\074\uff77\075\uff77\076\uff77\105\uff77" +
    "\131\uff77\001\002\000\040\022\uff7b\024\uff7b\025\uff7b\044" +
    "\uff7b\046\uff7b\053\uff7b\054\uff7b\056\uff7b\057\uff7b\064\uff7b" +
    "\074\uff7b\075\uff7b\076\uff7b\105\uff7b\131\uff7b\001\002\000" +
    "\016\003\105\004\106\005\075\006\076\026\135\063\133" +
    "\001\002\000\020\046\uffa4\074\uffa4\075\uffa4\076\uffa4\103" +
    "\uffa4\104\uffa4\127\uffa4\001\002\000\004\134\141\001\002" +
    "\000\020\003\uffa1\004\uffa1\005\uffa1\006\uffa1\026\uffa1\063" +
    "\uffa1\076\uffa1\001\002\000\020\003\uff9d\004\uff9d\005\uff9d" +
    "\006\uff9d\026\uff9d\063\uff9d\076\uff9d\001\002\000\030\003" +
    "\ufef2\013\ufef2\030\ufef2\046\ufef2\074\ufef2\075\ufef2\076\ufef2" +
    "\100\ufef2\103\ufef2\104\ufef2\127\ufef2\001\002\000\020\003" +
    "\uffa0\004\uffa0\005\uffa0\006\uffa0\026\uffa0\063\uffa0\076\uffa0" +
    "\001\002\000\030\003\ufef1\013\ufef1\030\ufef1\046\ufef1\074" +
    "\ufef1\075\ufef1\076\ufef1\100\ufef1\103\ufef1\104\ufef1\127\ufef1" +
    "\001\002\000\020\003\uff9e\004\uff9e\005\uff9e\006\uff9e\026" +
    "\uff9e\063\uff9e\076\uff9e\001\002\000\020\003\uff9f\004\uff9f" +
    "\005\uff9f\006\uff9f\026\uff9f\063\uff9f\076\uff9f\001\002\000" +
    "\020\003\uff9c\004\uff9c\005\uff9c\006\uff9c\026\uff9c\063\uff9c" +
    "\076\uff9c\001\002\000\024\046\uffa9\071\uffa9\073\uffa9\074" +
    "\uffa9\075\uffa9\076\uffa9\103\uffa9\104\uffa9\127\uffa9\001\002" +
    "\000\020\046\uffa8\074\uffa8\075\uffa8\076\uffa8\103\uffa8\104" +
    "\uffa8\127\uffa8\001\002\000\010\026\150\063\146\076\151" +
    "\001\002\000\010\026\ufeef\063\ufeef\076\ufeef\001\002\000" +
    "\010\026\ufef0\063\ufef0\076\ufef0\001\002\000\020\046\uffab" +
    "\074\uffab\075\uffab\076\uffab\103\uffab\104\uffab\127\uffab\001" +
    "\002\000\020\046\uffa3\074\uffa3\075\uffa3\076\uffa3\103\uffa3" +
    "\104\uffa3\127\uffa3\001\002\000\020\046\uffaa\074\uffaa\075" +
    "\uffaa\076\uffaa\103\uffaa\104\uffaa\127\uffaa\001\002\000\022" +
    "\046\uffac\074\uffac\075\uffac\076\uffac\103\uffac\104\uffac\126" +
    "\130\127\uffac\001\002\000\004\104\210\001\002\000\034" +
    "\003\ufef3\004\ufef3\005\ufef3\006\ufef3\026\ufef3\063\ufef3\103" +
    "\200\110\ufef3\116\ufef3\117\ufef3\120\ufef3\121\ufef3\122\ufef3" +
    "\001\002\000\006\103\156\104\155\001\002\000\034\003" +
    "\055\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\045\131\035\001" +
    "\002\000\036\003\055\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\104\160\131\035\001\002\000\034\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\105\175\131\035\001\002\000\036" +
    "\003\055\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\105\162" +
    "\131\035\001\002\000\034\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\056\060\057\064\074\051\075\065" +
    "\076\045\105\163\131\035\001\002\000\040\022\uff60\024" +
    "\uff60\025\uff60\044\uff60\046\uff60\053\uff60\054\uff60\056\uff60" +
    "\057\uff60\064\uff60\074\uff60\075\uff60\076\uff60\105\uff60\131" +
    "\uff60\001\002\000\044\022\uff61\024\uff61\025\uff61\044\uff61" +
    "\046\uff61\053\uff61\054\uff61\056\uff61\057\uff61\060\165\064" +
    "\uff61\074\uff61\075\uff61\076\uff61\104\164\105\uff61\131\uff61" +
    "\001\002\000\034\003\055\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\056\060\057\064\074\051\075\065" +
    "\076\045\131\035\001\002\000\036\003\055\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\104\167\131\035\001\002\000" +
    "\034\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\045\105\172\131" +
    "\035\001\002\000\034\003\055\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\131\035\001\002\000\034\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\105\171\131\035\001\002\000\040" +
    "\022\uff5a\024\uff5a\025\uff5a\044\uff5a\046\uff5a\053\uff5a\054" +
    "\uff5a\056\uff5a\057\uff5a\064\uff5a\074\uff5a\075\uff5a\076\uff5a" +
    "\105\uff5a\131\uff5a\001\002\000\040\022\uff57\024\uff57\025" +
    "\uff57\044\uff57\046\uff57\053\uff57\054\uff57\056\uff57\057\uff57" +
    "\064\uff57\074\uff57\075\uff57\076\uff57\105\uff57\131\uff57\001" +
    "\002\000\034\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\105" +
    "\174\131\035\001\002\000\040\022\uff58\024\uff58\025\uff58" +
    "\044\uff58\046\uff58\053\uff58\054\uff58\056\uff58\057\uff58\064" +
    "\uff58\074\uff58\075\uff58\076\uff58\105\uff58\131\uff58\001\002" +
    "\000\040\022\uff5b\024\uff5b\025\uff5b\044\uff5b\046\uff5b\053" +
    "\uff5b\054\uff5b\056\uff5b\057\uff5b\064\uff5b\074\uff5b\075\uff5b" +
    "\076\uff5b\105\uff5b\131\uff5b\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\105\177\131\035\001\002\000" +
    "\040\022\uff5c\024\uff5c\025\uff5c\044\uff5c\046\uff5c\053\uff5c" +
    "\054\uff5c\056\uff5c\057\uff5c\064\uff5c\074\uff5c\075\uff5c\076" +
    "\uff5c\105\uff5c\131\uff5c\001\002\000\004\104\201\001\002" +
    "\000\034\003\055\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\131\035\001\002\000\034\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\056\060\057\064\074\051\075\065" +
    "\076\045\105\203\131\035\001\002\000\042\022\uff5f\024" +
    "\uff5f\025\uff5f\044\uff5f\046\uff5f\053\uff5f\054\uff5f\056\uff5f" +
    "\057\uff5f\060\204\064\uff5f\074\uff5f\075\uff5f\076\uff5f\105" +
    "\uff5f\131\uff5f\001\002\000\004\104\205\001\002\000\034" +
    "\003\055\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\131\035" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\207\131\035\001\002\000\040\022\uff59\024\uff59\025" +
    "\uff59\044\uff59\046\uff59\053\uff59\054\uff59\056\uff59\057\uff59" +
    "\064\uff59\074\uff59\075\uff59\076\uff59\105\uff59\131\uff59\001" +
    "\002\000\034\003\055\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\034\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\105\212\131\035\001\002\000\040\022\uff5d" +
    "\024\uff5d\025\uff5d\044\uff5d\046\uff5d\053\uff5d\054\uff5d\056" +
    "\uff5d\057\uff5d\064\uff5d\074\uff5d\075\uff5d\076\uff5d\105\uff5d" +
    "\131\uff5d\001\002\000\020\046\uffa5\074\uffa5\075\uffa5\076" +
    "\uffa5\103\uffa5\104\uffa5\127\uffa5\001\002\000\020\003\105" +
    "\004\106\005\075\006\076\026\135\063\133\076\216\001" +
    "\002\000\020\046\uffa6\074\uffa6\075\uffa6\076\uffa6\103\uffa6" +
    "\104\uffa6\127\uffa6\001\002\000\020\046\uffa7\074\uffa7\075" +
    "\uffa7\076\uffa7\103\uffa7\104\uffa7\127\uffa7\001\002\000\014" +
    "\003\uff05\062\uff05\076\uff05\104\uff05\127\uff05\001\002\000" +
    "\014\003\343\004\217\076\223\103\345\127\342\001\002" +
    "\000\004\103\340\001\002\000\004\127\224\001\002\000" +
    "\014\003\uff06\062\uff06\076\uff06\104\uff06\127\uff06\001\002" +
    "\000\012\046\066\074\051\075\065\076\225\001\002\000" +
    "\024\004\245\005\233\006\237\026\242\063\241\076\243" +
    "\102\235\111\236\126\234\001\002\000\020\046\uff99\074" +
    "\uff99\075\uff99\076\uff99\100\uff99\103\uff99\127\uff99\001\002" +
    "\000\020\046\uff98\074\uff98\075\uff98\076\uff98\100\uff98\103" +
    "\uff98\127\uff98\001\002\000\004\103\231\001\002\000\004" +
    "\100\232\001\002\000\040\022\uff35\024\uff35\025\uff35\044" +
    "\uff35\046\uff35\053\uff35\054\uff35\056\uff35\057\uff35\064\uff35" +
    "\074\uff35\075\uff35\076\uff35\105\uff35\131\uff35\001\002\000" +
    "\056\022\uffae\024\uffae\025\uffae\044\uffae\046\uffae\053\uffae" +
    "\054\uffae\056\uffae\057\uffae\064\uffae\074\uffae\075\uffae\076" +
    "\uffae\100\uffae\103\uffae\105\uffae\112\uffae\113\uffae\114\uffae" +
    "\115\uffae\127\uffae\131\uffae\001\002\000\020\003\272\007" +
    "\273\021\266\031\271\052\267\123\270\130\274\001\002" +
    "\000\012\004\245\005\233\076\243\102\235\001\002\000" +
    "\064\003\262\004\245\005\233\006\257\022\uffbc\024\uffbc" +
    "\025\uffbc\026\261\044\uffbc\046\uffbc\053\uffbc\054\uffbc\056" +
    "\uffbc\057\uffbc\063\260\064\uffbc\074\uffbc\075\uffbc\076\243" +
    "\100\uffbc\102\235\103\uffbc\105\uffbc\127\uffbc\131\uffbc\001" +
    "\002\000\046\022\uffbb\024\uffbb\025\uffbb\044\uffbb\046\uffbb" +
    "\053\uffbb\054\uffbb\056\uffbb\057\uffbb\064\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\100\uffbb\103\uffbb\105\uffbb\127\uffbb\131\uffbb" +
    "\001\002\000\056\022\uffb1\024\uffb1\025\uffb1\044\uffb1\046" +
    "\uffb1\053\uffb1\054\uffb1\056\uffb1\057\uffb1\064\uffb1\074\uffb1" +
    "\075\uffb1\076\uffb1\100\uffb1\103\uffb1\105\uffb1\112\uffb1\113" +
    "\uffb1\114\uffb1\115\uffb1\127\uffb1\131\uffb1\001\002\000\046" +
    "\022\uffba\024\uffba\025\uffba\044\uffba\046\uffba\053\uffba\054" +
    "\uffba\056\uffba\057\uffba\064\uffba\074\uffba\075\uffba\076\uffba" +
    "\100\uffba\103\uffba\105\uffba\127\uffba\131\uffba\001\002\000" +
    "\046\022\uffb9\024\uffb9\025\uffb9\044\uffb9\046\uffb9\053\uffb9" +
    "\054\uffb9\056\uffb9\057\uffb9\064\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\100\uffb9\103\uffb9\105\uffb9\127\uffb9\131\uffb9\001\002" +
    "\000\056\022\uffad\024\uffad\025\uffad\044\uffad\046\uffad\053" +
    "\uffad\054\uffad\056\uffad\057\uffad\064\uffad\074\uffad\075\uffad" +
    "\076\uffad\100\uffad\103\uffad\105\uffad\112\uffad\113\uffad\114" +
    "\uffad\115\uffad\127\uffad\131\uffad\001\002\000\056\022\uffb4" +
    "\024\uffb4\025\uffb4\044\uffb4\046\uffb4\053\uffb4\054\uffb4\056" +
    "\uffb4\057\uffb4\064\uffb4\074\uffb4\075\uffb4\076\uffb4\100\uffb4" +
    "\103\uffb4\105\uffb4\112\uffb4\113\uffb4\114\252\115\253\127" +
    "\uffb4\131\uffb4\001\002\000\056\022\uffaf\024\uffaf\025\uffaf" +
    "\044\uffaf\046\uffaf\053\uffaf\054\uffaf\056\uffaf\057\uffaf\064" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\100\uffaf\103\uffaf\105\uffaf" +
    "\112\uffaf\113\uffaf\114\uffaf\115\uffaf\127\uffaf\131\uffaf\001" +
    "\002\000\052\022\uffb8\024\uffb8\025\uffb8\044\uffb8\046\uffb8" +
    "\053\uffb8\054\uffb8\056\uffb8\057\uffb8\064\uffb8\074\uffb8\075" +
    "\uffb8\076\uffb8\100\uffb8\103\uffb8\105\uffb8\112\250\113\247" +
    "\127\uffb8\131\uffb8\001\002\000\012\004\245\005\233\076" +
    "\243\102\235\001\002\000\012\004\245\005\233\076\243" +
    "\102\235\001\002\000\056\022\uffb6\024\uffb6\025\uffb6\044" +
    "\uffb6\046\uffb6\053\uffb6\054\uffb6\056\uffb6\057\uffb6\064\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\100\uffb6\103\uffb6\105\uffb6\112" +
    "\uffb6\113\uffb6\114\252\115\253\127\uffb6\131\uffb6\001\002" +
    "\000\012\004\245\005\233\076\243\102\235\001\002\000" +
    "\012\004\245\005\233\076\243\102\235\001\002\000\056" +
    "\022\uffb2\024\uffb2\025\uffb2\044\uffb2\046\uffb2\053\uffb2\054" +
    "\uffb2\056\uffb2\057\uffb2\064\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\100\uffb2\103\uffb2\105\uffb2\112\uffb2\113\uffb2\114\uffb2\115" +
    "\uffb2\127\uffb2\131\uffb2\001\002\000\056\022\uffb3\024\uffb3" +
    "\025\uffb3\044\uffb3\046\uffb3\053\uffb3\054\uffb3\056\uffb3\057" +
    "\uffb3\064\uffb3\074\uffb3\075\uffb3\076\uffb3\100\uffb3\103\uffb3" +
    "\105\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\127\uffb3\131" +
    "\uffb3\001\002\000\056\022\uffb5\024\uffb5\025\uffb5\044\uffb5" +
    "\046\uffb5\053\uffb5\054\uffb5\056\uffb5\057\uffb5\064\uffb5\074" +
    "\uffb5\075\uffb5\076\uffb5\100\uffb5\103\uffb5\105\uffb5\112\uffb5" +
    "\113\uffb5\114\252\115\253\127\uffb5\131\uffb5\001\002\000" +
    "\046\022\uffc0\024\uffc0\025\uffc0\044\uffc0\046\uffc0\053\uffc0" +
    "\054\uffc0\056\uffc0\057\uffc0\064\uffc0\074\uffc0\075\uffc0\076" +
    "\uffc0\100\uffc0\103\uffc0\105\uffc0\127\uffc0\131\uffc0\001\002" +
    "\000\046\022\uffbf\024\uffbf\025\uffbf\044\uffbf\046\uffbf\053" +
    "\uffbf\054\uffbf\056\uffbf\057\uffbf\064\uffbf\074\uffbf\075\uffbf" +
    "\076\uffbf\100\uffbf\103\uffbf\105\uffbf\127\uffbf\131\uffbf\001" +
    "\002\000\046\022\uffbe\024\uffbe\025\uffbe\044\uffbe\046\uffbe" +
    "\053\uffbe\054\uffbe\056\uffbe\057\uffbe\064\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\100\uffbe\103\uffbe\105\uffbe\127\uffbe\131\uffbe" +
    "\001\002\000\046\022\uffb7\024\uffb7\025\uffb7\044\uffb7\046" +
    "\uffb7\053\uffb7\054\uffb7\056\uffb7\057\uffb7\064\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\100\uffb7\103\uffb7\105\uffb7\127\uffb7\131" +
    "\uffb7\001\002\000\052\022\uffbd\024\uffbd\025\uffbd\044\uffbd" +
    "\046\uffbd\053\uffbd\054\uffbd\056\uffbd\057\uffbd\064\uffbd\074" +
    "\uffbd\075\uffbd\076\uffbd\100\uffbd\103\uffbd\105\uffbd\112\250" +
    "\113\247\127\uffbd\131\uffbd\001\002\000\010\103\265\112" +
    "\250\113\247\001\002\000\056\022\uffb0\024\uffb0\025\uffb0" +
    "\044\uffb0\046\uffb0\053\uffb0\054\uffb0\056\uffb0\057\uffb0\064" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\100\uffb0\103\uffb0\105\uffb0" +
    "\112\uffb0\113\uffb0\114\uffb0\115\uffb0\127\uffb0\131\uffb0\001" +
    "\002\000\006\004\325\102\326\001\002\000\050\022\uff91" +
    "\024\uff91\025\uff91\044\uff91\046\uff91\053\uff91\054\uff91\056" +
    "\uff91\057\uff91\064\uff91\074\uff91\075\uff91\076\uff91\100\uff91" +
    "\103\uff91\105\uff91\126\320\127\uff91\131\uff91\001\002\000" +
    "\046\022\uff89\024\uff89\025\uff89\044\uff89\046\uff89\053\uff89" +
    "\054\uff89\056\uff89\057\uff89\064\uff89\074\uff89\075\uff89\076" +
    "\uff89\100\uff89\103\uff89\105\uff89\127\uff89\131\uff89\001\002" +
    "\000\004\126\304\001\002\000\046\022\uff83\024\uff83\025" +
    "\uff83\044\uff83\046\uff83\053\uff83\054\uff83\056\uff83\057\uff83" +
    "\064\uff83\074\uff83\075\uff83\076\uff83\100\uff83\103\uff83\105" +
    "\uff83\127\uff83\131\uff83\001\002\000\046\022\uff90\024\uff90" +
    "\025\uff90\044\uff90\046\uff90\053\uff90\054\uff90\056\uff90\057" +
    "\uff90\064\uff90\074\uff90\075\uff90\076\uff90\100\uff90\103\uff90" +
    "\105\uff90\127\uff90\131\uff90\001\002\000\004\102\275\001" +
    "\002\000\010\003\277\006\300\076\301\001\002\000\004" +
    "\103\303\001\002\000\004\103\302\001\002\000\004\103" +
    "\uff7d\001\002\000\004\103\uff7c\001\002\000\046\022\uff84" +
    "\024\uff84\025\uff84\044\uff84\046\uff84\053\uff84\054\uff84\056" +
    "\uff84\057\uff84\064\uff84\074\uff84\075\uff84\076\uff84\100\uff84" +
    "\103\uff84\105\uff84\127\uff84\131\uff84\001\002\000\046\022" +
    "\uff85\024\uff85\025\uff85\044\uff85\046\uff85\053\uff85\054\uff85" +
    "\056\uff85\057\uff85\064\uff85\074\uff85\075\uff85\076\uff85\100" +
    "\uff85\103\uff85\105\uff85\127\uff85\131\uff85\001\002\000\006" +
    "\014\306\041\307\001\002\000\050\022\uff88\024\uff88\025" +
    "\uff88\044\uff88\046\uff88\053\uff88\054\uff88\056\uff88\057\uff88" +
    "\064\uff88\074\uff88\075\uff88\076\uff88\100\uff88\102\310\103" +
    "\uff88\105\uff88\127\uff88\131\uff88\001\002\000\050\022\uff9a" +
    "\024\uff9a\025\uff9a\044\uff9a\046\uff9a\053\uff9a\054\uff9a\056" +
    "\uff9a\057\uff9a\064\uff9a\074\uff9a\075\uff9a\076\uff9a\100\uff9a" +
    "\102\uff9a\103\uff9a\105\uff9a\127\uff9a\131\uff9a\001\002\000" +
    "\050\022\uff9b\024\uff9b\025\uff9b\044\uff9b\046\uff9b\053\uff9b" +
    "\054\uff9b\056\uff9b\057\uff9b\064\uff9b\074\uff9b\075\uff9b\076" +
    "\uff9b\100\uff9b\102\uff9b\103\uff9b\105\uff9b\127\uff9b\131\uff9b" +
    "\001\002\000\010\003\311\076\312\077\313\001\002\000" +
    "\004\103\316\001\002\000\004\103\uff7e\001\002\000\004" +
    "\103\uff7f\001\002\000\004\103\315\001\002\000\046\022" +
    "\uff87\024\uff87\025\uff87\044\uff87\046\uff87\053\uff87\054\uff87" +
    "\056\uff87\057\uff87\064\uff87\074\uff87\075\uff87\076\uff87\100" +
    "\uff87\103\uff87\105\uff87\127\uff87\131\uff87\001\002\000\004" +
    "\100\317\001\002\000\046\022\uff86\024\uff86\025\uff86\044" +
    "\uff86\046\uff86\053\uff86\054\uff86\056\uff86\057\uff86\064\uff86" +
    "\074\uff86\075\uff86\076\uff86\100\uff86\103\uff86\105\uff86\127" +
    "\uff86\131\uff86\001\002\000\010\135\324\136\322\137\323" +
    "\001\002\000\046\022\uff8a\024\uff8a\025\uff8a\044\uff8a\046" +
    "\uff8a\053\uff8a\054\uff8a\056\uff8a\057\uff8a\064\uff8a\074\uff8a" +
    "\075\uff8a\076\uff8a\100\uff8a\103\uff8a\105\uff8a\127\uff8a\131" +
    "\uff8a\001\002\000\046\022\uff81\024\uff81\025\uff81\044\uff81" +
    "\046\uff81\053\uff81\054\uff81\056\uff81\057\uff81\064\uff81\074" +
    "\uff81\075\uff81\076\uff81\100\uff81\103\uff81\105\uff81\127\uff81" +
    "\131\uff81\001\002\000\046\022\uff80\024\uff80\025\uff80\044" +
    "\uff80\046\uff80\053\uff80\054\uff80\056\uff80\057\uff80\064\uff80" +
    "\074\uff80\075\uff80\076\uff80\100\uff80\103\uff80\105\uff80\127" +
    "\uff80\131\uff80\001\002\000\046\022\uff82\024\uff82\025\uff82" +
    "\044\uff82\046\uff82\053\uff82\054\uff82\056\uff82\057\uff82\064" +
    "\uff82\074\uff82\075\uff82\076\uff82\100\uff82\103\uff82\105\uff82" +
    "\127\uff82\131\uff82\001\002\000\046\022\ufff1\024\ufff1\025" +
    "\ufff1\044\ufff1\046\ufff1\053\ufff1\054\ufff1\056\ufff1\057\ufff1" +
    "\064\ufff1\074\ufff1\075\ufff1\076\ufff1\100\ufff1\103\ufff1\105" +
    "\ufff1\127\ufff1\131\ufff1\001\002\000\010\003\333\004\325" +
    "\103\335\001\002\000\006\103\331\127\330\001\002\000" +
    "\004\004\332\001\002\000\046\022\uff8e\024\uff8e\025\uff8e" +
    "\044\uff8e\046\uff8e\053\uff8e\054\uff8e\056\uff8e\057\uff8e\064" +
    "\uff8e\074\uff8e\075\uff8e\076\uff8e\100\uff8e\103\uff8e\105\uff8e" +
    "\127\uff8e\131\uff8e\001\002\000\046\022\ufff2\024\ufff2\025" +
    "\ufff2\044\ufff2\046\ufff2\053\ufff2\054\ufff2\056\ufff2\057\ufff2" +
    "\064\ufff2\074\ufff2\075\ufff2\076\ufff2\100\ufff2\103\ufff2\105" +
    "\ufff2\127\ufff2\131\ufff2\001\002\000\004\103\337\001\002" +
    "\000\046\022\uff8c\024\uff8c\025\uff8c\044\uff8c\046\uff8c\053" +
    "\uff8c\054\uff8c\056\uff8c\057\uff8c\064\uff8c\074\uff8c\075\uff8c" +
    "\076\uff8c\100\uff8c\103\336\105\uff8c\127\330\131\uff8c\001" +
    "\002\000\046\022\uff8d\024\uff8d\025\uff8d\044\uff8d\046\uff8d" +
    "\053\uff8d\054\uff8d\056\uff8d\057\uff8d\064\uff8d\074\uff8d\075" +
    "\uff8d\076\uff8d\100\uff8d\103\uff8d\105\uff8d\127\uff8d\131\uff8d" +
    "\001\002\000\046\022\uff8f\024\uff8f\025\uff8f\044\uff8f\046" +
    "\uff8f\053\uff8f\054\uff8f\056\uff8f\057\uff8f\064\uff8f\074\uff8f" +
    "\075\uff8f\076\uff8f\100\uff8f\103\uff8f\105\uff8f\127\uff8f\131" +
    "\uff8f\001\002\000\046\022\uff8b\024\uff8b\025\uff8b\044\uff8b" +
    "\046\uff8b\053\uff8b\054\uff8b\056\uff8b\057\uff8b\064\uff8b\074" +
    "\uff8b\075\uff8b\076\uff8b\100\uff8b\103\uff8b\105\uff8b\127\uff8b" +
    "\131\uff8b\001\002\000\004\100\341\001\002\000\040\022" +
    "\uff30\024\uff30\025\uff30\044\uff30\046\uff30\053\uff30\054\uff30" +
    "\056\uff30\057\uff30\064\uff30\074\uff30\075\uff30\076\uff30\105" +
    "\uff30\131\uff30\001\002\000\012\046\066\074\051\075\065" +
    "\076\225\001\002\000\004\103\361\001\002\000\006\003" +
    "\350\127\347\001\002\000\004\100\346\001\002\000\040" +
    "\022\uff31\024\uff31\025\uff31\044\uff31\046\uff31\053\uff31\054" +
    "\uff31\056\uff31\057\uff31\064\uff31\074\uff31\075\uff31\076\uff31" +
    "\105\uff31\131\uff31\001\002\000\014\046\066\074\051\075" +
    "\065\076\225\103\354\001\002\000\012\046\066\074\051" +
    "\075\065\076\225\001\002\000\004\103\352\001\002\000" +
    "\004\100\353\001\002\000\040\022\uff33\024\uff33\025\uff33" +
    "\044\uff33\046\uff33\053\uff33\054\uff33\056\uff33\057\uff33\064" +
    "\uff33\074\uff33\075\uff33\076\uff33\105\uff33\131\uff33\001\002" +
    "\000\004\100\360\001\002\000\004\103\356\001\002\000" +
    "\042\022\uff37\024\uff37\025\uff37\044\uff37\046\uff37\053\uff37" +
    "\054\uff37\056\uff37\057\uff37\064\uff37\074\uff37\075\uff37\076" +
    "\uff37\100\357\105\uff37\131\uff37\001\002\000\040\022\uff38" +
    "\024\uff38\025\uff38\044\uff38\046\uff38\053\uff38\054\uff38\056" +
    "\uff38\057\uff38\064\uff38\074\uff38\075\uff38\076\uff38\105\uff38" +
    "\131\uff38\001\002\000\040\022\uff32\024\uff32\025\uff32\044" +
    "\uff32\046\uff32\053\uff32\054\uff32\056\uff32\057\uff32\064\uff32" +
    "\074\uff32\075\uff32\076\uff32\105\uff32\131\uff32\001\002\000" +
    "\004\100\362\001\002\000\040\022\uff36\024\uff36\025\uff36" +
    "\044\uff36\046\uff36\053\uff36\054\uff36\056\uff36\057\uff36\064" +
    "\uff36\074\uff36\075\uff36\076\uff36\105\uff36\131\uff36\001\002" +
    "\000\004\103\364\001\002\000\004\100\365\001\002\000" +
    "\040\022\uff34\024\uff34\025\uff34\044\uff34\046\uff34\053\uff34" +
    "\054\uff34\056\uff34\057\uff34\064\uff34\074\uff34\075\uff34\076" +
    "\uff34\105\uff34\131\uff34\001\002\000\010\003\u012f\076\u0130" +
    "\103\u0131\001\002\000\004\076\u012b\001\002\000\004\103" +
    "\371\001\002\000\004\104\372\001\002\000\006\003\373" +
    "\011\374\001\002\000\010\011\u0129\100\u0128\105\u012a\001" +
    "\002\000\012\004\u0114\006\u0116\026\u0117\063\u0115\001\002" +
    "\000\006\011\376\105\377\001\002\000\012\004\u0100\006" +
    "\u0102\026\u0103\063\u0101\001\002\000\040\022\uff17\024\uff17" +
    "\025\uff17\044\uff17\046\uff17\053\uff17\054\uff17\056\uff17\057" +
    "\uff17\064\uff17\074\uff17\075\uff17\076\uff17\105\uff17\131\uff17" +
    "\001\002\000\004\101\u0110\001\002\000\004\101\u010c\001" +
    "\002\000\004\101\u0108\001\002\000\004\101\u0104\001\002" +
    "\000\034\003\055\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\131\035\001\002\000\034\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\054\u0106\056\060\057\064\074\051" +
    "\075\065\076\045\131\035\001\002\000\004\100\u0107\001" +
    "\002\000\006\011\uff0b\105\uff0b\001\002\000\034\003\055" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\131\035\001\002" +
    "\000\034\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\054\u010a\056\060\057\064\074\051\075\065\076\045" +
    "\131\035\001\002\000\004\100\u010b\001\002\000\006\011" +
    "\uff0f\105\uff0f\001\002\000\034\003\055\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\131\035\001\002\000\034\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\054\u010e\056" +
    "\060\057\064\074\051\075\065\076\045\131\035\001\002" +
    "\000\004\100\u010f\001\002\000\006\011\uff0d\105\uff0d\001" +
    "\002\000\034\003\055\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\034\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\054\u0112\056\060\057\064\074" +
    "\051\075\065\076\045\131\035\001\002\000\004\100\u0113" +
    "\001\002\000\006\011\uff11\105\uff11\001\002\000\004\101" +
    "\u0124\001\002\000\004\101\u0120\001\002\000\004\101\u011c" +
    "\001\002\000\004\101\u0118\001\002\000\034\003\055\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\131\035\001\002\000" +
    "\034\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\054\u011a\056\060\057\064\074\051\075\065\076\045\131" +
    "\035\001\002\000\004\100\u011b\001\002\000\006\011\uff0a" +
    "\105\uff0a\001\002\000\034\003\055\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\131\035\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\054\u011e\056\060" +
    "\057\064\074\051\075\065\076\045\131\035\001\002\000" +
    "\004\100\u011f\001\002\000\006\011\uff0e\105\uff0e\001\002" +
    "\000\034\003\055\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\131\035\001\002\000\034\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\054\u0122\056\060\057\064\074\051" +
    "\075\065\076\045\131\035\001\002\000\004\100\u0123\001" +
    "\002\000\006\011\uff0c\105\uff0c\001\002\000\034\003\055" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\131\035\001\002" +
    "\000\034\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\054\u0126\056\060\057\064\074\051\075\065\076\045" +
    "\131\035\001\002\000\004\100\u0127\001\002\000\006\011" +
    "\uff10\105\uff10\001\002\000\006\011\uff09\105\uff09\001\002" +
    "\000\006\011\uff08\105\uff08\001\002\000\006\011\uff07\105" +
    "\uff07\001\002\000\004\104\u012c\001\002\000\006\003\373" +
    "\011\374\001\002\000\006\011\376\105\u012e\001\002\000" +
    "\040\022\uff15\024\uff15\025\uff15\044\uff15\046\uff15\053\uff15" +
    "\054\uff15\056\uff15\057\uff15\064\uff15\074\uff15\075\uff15\076" +
    "\uff15\105\uff15\131\uff15\001\002\000\004\103\u013c\001\002" +
    "\000\004\103\u0135\001\002\000\004\104\u0132\001\002\000" +
    "\006\003\373\011\374\001\002\000\006\011\376\105\u0134" +
    "\001\002\000\040\022\uff16\024\uff16\025\uff16\044\uff16\046" +
    "\uff16\053\uff16\054\uff16\056\uff16\057\uff16\064\uff16\074\uff16" +
    "\075\uff16\076\uff16\105\uff16\131\uff16\001\002\000\010\003" +
    "\373\011\374\104\u0136\001\002\000\010\003\373\011\374" +
    "\105\u013a\001\002\000\006\011\376\105\u0138\001\002\000" +
    "\040\022\uff13\024\uff13\025\uff13\044\uff13\046\uff13\053\uff13" +
    "\054\uff13\056\uff13\057\uff13\064\uff13\074\uff13\075\uff13\076" +
    "\uff13\105\uff13\131\uff13\001\002\000\006\011\376\105\u013b" +
    "\001\002\000\040\022\uff12\024\uff12\025\uff12\044\uff12\046" +
    "\uff12\053\uff12\054\uff12\056\uff12\057\uff12\064\uff12\074\uff12" +
    "\075\uff12\076\uff12\105\uff12\131\uff12\001\002\000\040\022" +
    "\uff18\024\uff18\025\uff18\044\uff18\046\uff18\053\uff18\054\uff18" +
    "\056\uff18\057\uff18\064\uff18\074\uff18\075\uff18\076\uff18\105" +
    "\uff18\131\uff18\001\002\000\004\104\u013d\001\002\000\006" +
    "\003\373\011\374\001\002\000\006\011\376\105\u013f\001" +
    "\002\000\040\022\uff14\024\uff14\025\uff14\044\uff14\046\uff14" +
    "\053\uff14\054\uff14\056\uff14\057\uff14\064\uff14\074\uff14\075" +
    "\uff14\076\uff14\105\uff14\131\uff14\001\002\000\040\022\uff67" +
    "\024\uff67\025\uff67\044\uff67\046\uff67\053\uff67\054\uff67\056" +
    "\uff67\057\uff67\064\uff67\074\uff67\075\uff67\076\uff67\105\uff67" +
    "\131\uff67\001\002\000\040\022\uff66\024\uff66\025\uff66\044" +
    "\uff66\046\uff66\053\uff66\054\uff66\056\uff66\057\uff66\064\uff66" +
    "\074\uff66\075\uff66\076\uff66\105\uff66\131\uff66\001\002\000" +
    "\040\022\uff65\024\uff65\025\uff65\044\uff65\046\uff65\053\uff65" +
    "\054\uff65\056\uff65\057\uff65\064\uff65\074\uff65\075\uff65\076" +
    "\uff65\105\uff65\131\uff65\001\002\000\022\003\u014c\004\106" +
    "\005\075\006\076\026\101\063\100\076\104\127\u014b\001" +
    "\002\000\004\127\u0145\001\002\000\012\046\066\074\051" +
    "\075\065\076\225\001\002\000\004\127\u0147\001\002\000" +
    "\012\046\066\074\051\075\065\076\225\001\002\000\004" +
    "\103\u0149\001\002\000\004\100\u014a\001\002\000\040\022" +
    "\uff4a\024\uff4a\025\uff4a\044\uff4a\046\uff4a\053\uff4a\054\uff4a" +
    "\056\uff4a\057\uff4a\064\uff4a\074\uff4a\075\uff4a\076\uff4a\105" +
    "\uff4a\131\uff4a\001\002\000\012\046\066\074\051\075\065" +
    "\076\225\001\002\000\034\003\ufef3\004\ufef3\005\ufef3\006" +
    "\ufef3\026\ufef3\063\ufef3\103\u0169\110\ufef3\116\ufef3\117\ufef3" +
    "\120\ufef3\121\ufef3\122\ufef3\001\002\000\014\046\066\074" +
    "\051\075\065\076\225\127\u014e\001\002\000\016\003\u0155" +
    "\046\066\074\051\075\065\076\225\127\u0154\001\002\000" +
    "\004\127\u0150\001\002\000\012\046\066\074\051\075\065" +
    "\076\225\001\002\000\004\103\u0152\001\002\000\004\100" +
    "\u0153\001\002\000\040\022\uff48\024\uff48\025\uff48\044\uff48" +
    "\046\uff48\053\uff48\054\uff48\056\uff48\057\uff48\064\uff48\074" +
    "\uff48\075\uff48\076\uff48\105\uff48\131\uff48\001\002\000\012" +
    "\046\066\074\051\075\065\076\225\001\002\000\004\127" +
    "\u0163\001\002\000\014\046\066\074\051\075\065\076\225" +
    "\127\u0157\001\002\000\016\003\u015c\046\066\074\051\075" +
    "\065\076\225\103\u015b\001\002\000\004\103\u0159\001\002" +
    "\000\004\100\u015a\001\002\000\040\022\uff46\024\uff46\025" +
    "\uff46\044\uff46\046\uff46\053\uff46\054\uff46\056\uff46\057\uff46" +
    "\064\uff46\074\uff46\075\uff46\076\uff46\105\uff46\131\uff46\001" +
    "\002\000\004\100\u0162\001\002\000\004\100\u0161\001\002" +
    "\000\006\100\u015e\103\u015f\001\002\000\040\022\uff44\024" +
    "\uff44\025\uff44\044\uff44\046\uff44\053\uff44\054\uff44\056\uff44" +
    "\057\uff44\064\uff44\074\uff44\075\uff44\076\uff44\105\uff44\131" +
    "\uff44\001\002\000\042\022\uff4b\024\uff4b\025\uff4b\044\uff4b" +
    "\046\uff4b\053\uff4b\054\uff4b\056\uff4b\057\uff4b\064\uff4b\074" +
    "\uff4b\075\uff4b\076\uff4b\100\u0160\105\uff4b\131\uff4b\001\002" +
    "\000\040\022\uff4c\024\uff4c\025\uff4c\044\uff4c\046\uff4c\053" +
    "\uff4c\054\uff4c\056\uff4c\057\uff4c\064\uff4c\074\uff4c\075\uff4c" +
    "\076\uff4c\105\uff4c\131\uff4c\001\002\000\040\022\uff41\024" +
    "\uff41\025\uff41\044\uff41\046\uff41\053\uff41\054\uff41\056\uff41" +
    "\057\uff41\064\uff41\074\uff41\075\uff41\076\uff41\105\uff41\131" +
    "\uff41\001\002\000\040\022\uff45\024\uff45\025\uff45\044\uff45" +
    "\046\uff45\053\uff45\054\uff45\056\uff45\057\uff45\064\uff45\074" +
    "\uff45\075\uff45\076\uff45\105\uff45\131\uff45\001\002\000\012" +
    "\046\066\074\051\075\065\076\225\001\002\000\004\100" +
    "\u0165\001\002\000\040\022\uff42\024\uff42\025\uff42\044\uff42" +
    "\046\uff42\053\uff42\054\uff42\056\uff42\057\uff42\064\uff42\074" +
    "\uff42\075\uff42\076\uff42\105\uff42\131\uff42\001\002\000\004" +
    "\103\u0167\001\002\000\004\100\u0168\001\002\000\040\022" +
    "\uff47\024\uff47\025\uff47\044\uff47\046\uff47\053\uff47\054\uff47" +
    "\056\uff47\057\uff47\064\uff47\074\uff47\075\uff47\076\uff47\105" +
    "\uff47\131\uff47\001\002\000\004\100\u016a\001\002\000\040" +
    "\022\uff43\024\uff43\025\uff43\044\uff43\046\uff43\053\uff43\054" +
    "\uff43\056\uff43\057\uff43\064\uff43\074\uff43\075\uff43\076\uff43" +
    "\105\uff43\131\uff43\001\002\000\004\127\u016c\001\002\000" +
    "\012\046\066\074\051\075\065\076\225\001\002\000\004" +
    "\103\u016e\001\002\000\004\100\u016f\001\002\000\040\022" +
    "\uff49\024\uff49\025\uff49\044\uff49\046\uff49\053\uff49\054\uff49" +
    "\056\uff49\057\uff49\064\uff49\074\uff49\075\uff49\076\uff49\105" +
    "\uff49\131\uff49\001\002\000\022\003\u0177\004\106\005\075" +
    "\006\076\026\101\063\100\076\104\127\u0176\001\002\000" +
    "\004\127\u0172\001\002\000\012\046\066\074\051\075\065" +
    "\076\225\001\002\000\004\100\u0174\001\002\000\004\103" +
    "\u0175\001\002\000\040\022\uff53\024\uff53\025\uff53\044\uff53" +
    "\046\uff53\053\uff53\054\uff53\056\uff53\057\uff53\064\uff53\074" +
    "\uff53\075\uff53\076\uff53\105\uff53\131\uff53\001\002\000\012" +
    "\046\066\074\051\075\065\076\225\001\002\000\034\003" +
    "\ufef3\004\ufef3\005\ufef3\006\ufef3\026\ufef3\063\ufef3\110\ufef3" +
    "\116\ufef3\117\ufef3\120\ufef3\121\ufef3\122\ufef3\127\u0186\001" +
    "\002\000\014\046\066\074\051\075\065\076\225\127\u0179" +
    "\001\002\000\016\003\u017e\046\066\074\051\075\065\076" +
    "\225\103\u017d\001\002\000\004\103\u017b\001\002\000\042" +
    "\022\uff54\024\uff54\025\uff54\044\uff54\046\uff54\053\uff54\054" +
    "\uff54\056\uff54\057\uff54\064\uff54\074\uff54\075\uff54\076\uff54" +
    "\100\u017c\105\uff54\131\uff54\001\002\000\040\022\uff51\024" +
    "\uff51\025\uff51\044\uff51\046\uff51\053\uff51\054\uff51\056\uff51" +
    "\057\uff51\064\uff51\074\uff51\075\uff51\076\uff51\105\uff51\131" +
    "\uff51\001\002\000\004\100\u0185\001\002\000\004\103\u0183" +
    "\001\002\000\006\100\u0180\103\u0181\001\002\000\040\022" +
    "\uff4f\024\uff4f\025\uff4f\044\uff4f\046\uff4f\053\uff4f\054\uff4f" +
    "\056\uff4f\057\uff4f\064\uff4f\074\uff4f\075\uff4f\076\uff4f\105" +
    "\uff4f\131\uff4f\001\002\000\004\100\u0182\001\002\000\040" +
    "\022\uff56\024\uff56\025\uff56\044\uff56\046\uff56\053\uff56\054" +
    "\uff56\056\uff56\057\uff56\064\uff56\074\uff56\075\uff56\076\uff56" +
    "\105\uff56\131\uff56\001\002\000\004\100\u0184\001\002\000" +
    "\040\022\uff4d\024\uff4d\025\uff4d\044\uff4d\046\uff4d\053\uff4d" +
    "\054\uff4d\056\uff4d\057\uff4d\064\uff4d\074\uff4d\075\uff4d\076" +
    "\uff4d\105\uff4d\131\uff4d\001\002\000\040\022\uff50\024\uff50" +
    "\025\uff50\044\uff50\046\uff50\053\uff50\054\uff50\056\uff50\057" +
    "\uff50\064\uff50\074\uff50\075\uff50\076\uff50\105\uff50\131\uff50" +
    "\001\002\000\012\046\066\074\051\075\065\076\225\001" +
    "\002\000\004\103\u0188\001\002\000\004\100\u0189\001\002" +
    "\000\040\022\uff4e\024\uff4e\025\uff4e\044\uff4e\046\uff4e\053" +
    "\uff4e\054\uff4e\056\uff4e\057\uff4e\064\uff4e\074\uff4e\075\uff4e" +
    "\076\uff4e\105\uff4e\131\uff4e\001\002\000\004\103\u018b\001" +
    "\002\000\004\100\u018c\001\002\000\040\022\uff52\024\uff52" +
    "\025\uff52\044\uff52\046\uff52\053\uff52\054\uff52\056\uff52\057" +
    "\uff52\064\uff52\074\uff52\075\uff52\076\uff52\105\uff52\131\uff52" +
    "\001\002\000\046\022\uff97\024\uff97\025\uff97\044\uff97\046" +
    "\uff97\053\uff97\054\uff97\056\uff97\057\uff97\064\uff97\074\uff97" +
    "\075\uff97\076\uff97\100\uff97\103\uff97\105\uff97\127\uff97\131" +
    "\uff97\001\002\000\040\022\uff76\024\uff76\025\uff76\044\uff76" +
    "\046\uff76\053\uff76\054\uff76\056\uff76\057\uff76\064\uff76\074" +
    "\uff76\075\uff76\076\uff76\105\uff76\131\uff76\001\002\000\040" +
    "\022\uff7a\024\uff7a\025\uff7a\044\uff7a\046\uff7a\053\uff7a\054" +
    "\uff7a\056\uff7a\057\uff7a\064\uff7a\074\uff7a\075\uff7a\076\uff7a" +
    "\105\uff7a\131\uff7a\001\002\000\022\003\105\004\u019a\005" +
    "\u0198\006\076\026\101\063\100\076\u0199\102\235\001\002" +
    "\000\004\062\u0194\001\002\000\054\022\uffad\024\uffad\025" +
    "\uffad\044\uffad\046\uffad\053\uffad\054\uffad\056\uffad\057\uffad" +
    "\062\uff06\064\uffad\074\uffad\075\uffad\076\uffad\100\uffad\105" +
    "\uffad\112\uffad\113\uffad\114\uffad\115\uffad\131\uffad\001\002" +
    "\000\054\022\uffaf\024\uffaf\025\uffaf\044\uffaf\046\uffaf\053" +
    "\uffaf\054\uffaf\056\uffaf\057\uffaf\062\uff05\064\uffaf\074\uffaf" +
    "\075\uffaf\076\uffaf\100\uffaf\105\uffaf\112\uffaf\113\uffaf\114" +
    "\uffaf\115\uffaf\131\uffaf\001\002\000\004\104\u0195\001\002" +
    "\000\034\003\055\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\131\035\001\002\000\034\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\056\060\057\064\074\051\075\065" +
    "\076\045\105\u0197\131\035\001\002\000\040\022\uff3e\024" +
    "\uff3e\025\uff3e\044\uff3e\046\uff3e\053\uff3e\054\uff3e\056\uff3e" +
    "\057\uff3e\064\uff3e\074\uff3e\075\uff3e\076\uff3e\105\uff3e\131" +
    "\uff3e\001\002\000\044\003\ufef6\004\ufef6\005\ufef6\006\ufef6" +
    "\026\ufef6\063\ufef6\103\uffae\110\ufef6\112\uffae\113\uffae\114" +
    "\uffae\115\uffae\116\ufef6\117\ufef6\120\ufef6\121\ufef6\122\ufef6" +
    "\001\002\000\054\003\105\004\106\005\075\006\076\026" +
    "\135\063\133\071\uffac\073\uffac\103\uffad\110\140\112\uffad" +
    "\113\uffad\114\uffad\115\uffad\116\132\117\136\120\137\121" +
    "\131\122\134\126\130\127\uffac\001\002\000\044\003\ufef7" +
    "\004\ufef7\005\ufef7\006\ufef7\026\ufef7\063\ufef7\103\uffaf\110" +
    "\ufef7\112\uffaf\113\uffaf\114\uffaf\115\uffaf\116\ufef7\117\ufef7" +
    "\120\ufef7\121\ufef7\122\ufef7\001\002\000\004\127\u019c\001" +
    "\002\000\012\046\066\074\051\075\065\076\225\001\002" +
    "\000\004\103\u019e\001\002\000\004\100\u019f\001\002\000" +
    "\040\022\uff55\024\uff55\025\uff55\044\uff55\046\uff55\053\uff55" +
    "\054\uff55\056\uff55\057\uff55\064\uff55\074\uff55\075\uff55\076" +
    "\uff55\105\uff55\131\uff55\001\002\000\022\003\105\004\106" +
    "\005\075\006\076\026\101\063\100\076\104\103\u01a8\001" +
    "\002\000\034\003\ufef3\004\ufef3\005\ufef3\006\ufef3\026\ufef3" +
    "\063\ufef3\105\u01a7\110\ufef3\116\ufef3\117\ufef3\120\ufef3\121" +
    "\ufef3\122\ufef3\001\002\000\004\103\u01a3\001\002\000\004" +
    "\104\u01a4\001\002\000\034\003\055\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\131\035\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\105\u01a6\131\035\001\002\000" +
    "\040\022\uff2d\024\uff2d\025\uff2d\044\uff2d\046\uff2d\053\uff2d" +
    "\054\uff2d\056\uff2d\057\uff2d\064\uff2d\074\uff2d\075\uff2d\076" +
    "\uff2d\105\uff2d\131\uff2d\001\002\000\040\022\uff29\024\uff29" +
    "\025\uff29\044\uff29\046\uff29\053\uff29\054\uff29\056\uff29\057" +
    "\uff29\064\uff29\074\uff29\075\uff29\076\uff29\105\uff29\131\uff29" +
    "\001\002\000\004\104\u01b4\001\002\000\006\103\u01ab\104" +
    "\u01aa\001\002\000\034\003\055\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\131\035\001\002\000\036\003\055\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\104\u01ad\131\035\001\002" +
    "\000\034\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\105\u01b1" +
    "\131\035\001\002\000\036\003\055\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\105\u01af\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\u01b0\131\035\001" +
    "\002\000\040\022\uff2e\024\uff2e\025\uff2e\044\uff2e\046\uff2e" +
    "\053\uff2e\054\uff2e\056\uff2e\057\uff2e\064\uff2e\074\uff2e\075" +
    "\uff2e\076\uff2e\105\uff2e\131\uff2e\001\002\000\040\022\uff2f" +
    "\024\uff2f\025\uff2f\044\uff2f\046\uff2f\053\uff2f\054\uff2f\056" +
    "\uff2f\057\uff2f\064\uff2f\074\uff2f\075\uff2f\076\uff2f\105\uff2f" +
    "\131\uff2f\001\002\000\040\022\uff2a\024\uff2a\025\uff2a\044" +
    "\uff2a\046\uff2a\053\uff2a\054\uff2a\056\uff2a\057\uff2a\064\uff2a" +
    "\074\uff2a\075\uff2a\076\uff2a\105\uff2a\131\uff2a\001\002\000" +
    "\034\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\045\105\u01b3\131" +
    "\035\001\002\000\040\022\uff2b\024\uff2b\025\uff2b\044\uff2b" +
    "\046\uff2b\053\uff2b\054\uff2b\056\uff2b\057\uff2b\064\uff2b\074" +
    "\uff2b\075\uff2b\076\uff2b\105\uff2b\131\uff2b\001\002\000\034" +
    "\003\055\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\131\035" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\u01b6\131\035\001\002\000\040\022\uff2c\024\uff2c\025" +
    "\uff2c\044\uff2c\046\uff2c\053\uff2c\054\uff2c\056\uff2c\057\uff2c" +
    "\064\uff2c\074\uff2c\075\uff2c\076\uff2c\105\uff2c\131\uff2c\001" +
    "\002\000\004\027\uffe7\001\002\000\004\104\u01cc\001\002" +
    "\000\004\104\u01c9\001\002\000\010\062\u01bc\076\u01bd\104" +
    "\u01bb\001\002\000\034\003\055\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\131\035\001\002\000\036\003\055\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\104\u01c2\131\035\001\002" +
    "\000\004\104\u01be\001\002\000\034\003\055\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\u01c0\131\035\001" +
    "\002\000\040\022\uff3b\024\uff3b\025\uff3b\044\uff3b\046\uff3b" +
    "\053\uff3b\054\uff3b\056\uff3b\057\uff3b\064\uff3b\074\uff3b\075" +
    "\uff3b\076\uff3b\105\uff3b\131\uff3b\001\002\000\034\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\105\u01c6\131\035\001\002" +
    "\000\036\003\055\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\u01c4\131\035\001\002\000\034\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\105\u01c5\131\035\001\002\000\040\022" +
    "\uff3f\024\uff3f\025\uff3f\044\uff3f\046\uff3f\053\uff3f\054\uff3f" +
    "\056\uff3f\057\uff3f\064\uff3f\074\uff3f\075\uff3f\076\uff3f\105" +
    "\uff3f\131\uff3f\001\002\000\040\022\uff40\024\uff40\025\uff40" +
    "\044\uff40\046\uff40\053\uff40\054\uff40\056\uff40\057\uff40\064" +
    "\uff40\074\uff40\075\uff40\076\uff40\105\uff40\131\uff40\001\002" +
    "\000\040\022\uff3a\024\uff3a\025\uff3a\044\uff3a\046\uff3a\053" +
    "\uff3a\054\uff3a\056\uff3a\057\uff3a\064\uff3a\074\uff3a\075\uff3a" +
    "\076\uff3a\105\uff3a\131\uff3a\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\105\u01c8\131\035\001\002\000" +
    "\040\022\uff3c\024\uff3c\025\uff3c\044\uff3c\046\uff3c\053\uff3c" +
    "\054\uff3c\056\uff3c\057\uff3c\064\uff3c\074\uff3c\075\uff3c\076" +
    "\uff3c\105\uff3c\131\uff3c\001\002\000\034\003\055\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\131\035\001\002\000\034" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\105\u01cb\131\035" +
    "\001\002\000\040\022\uff3d\024\uff3d\025\uff3d\044\uff3d\046" +
    "\uff3d\053\uff3d\054\uff3d\056\uff3d\057\uff3d\064\uff3d\074\uff3d" +
    "\075\uff3d\076\uff3d\105\uff3d\131\uff3d\001\002\000\034\003" +
    "\055\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\045\131\035\001" +
    "\002\000\034\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\105" +
    "\u01ce\131\035\001\002\000\040\022\uff39\024\uff39\025\uff39" +
    "\044\uff39\046\uff39\053\uff39\054\uff39\056\uff39\057\uff39\064" +
    "\uff39\074\uff39\075\uff39\076\uff39\105\uff39\131\uff39\001\002" +
    "\000\014\003\u01df\076\u01e1\103\u01e2\111\u01e0\127\u01de\001" +
    "\002\000\004\111\u01d1\001\002\000\004\004\u01d2\001\002" +
    "\000\004\127\u01d3\001\002\000\006\074\u01d6\075\u01d4\001" +
    "\002\000\004\076\uff01\001\002\000\004\076\u01d7\001\002" +
    "\000\004\076\uff02\001\002\000\004\127\u01d8\001\002\000" +
    "\020\003\105\004\106\005\075\006\076\026\101\063\100" +
    "\076\104\001\002\000\004\103\u01da\001\002\000\004\104" +
    "\u01db\001\002\000\034\003\055\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\131\035\001\002\000\034\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\105\u01dd\131\035\001\002\000\040" +
    "\022\uff27\024\uff27\025\uff27\044\uff27\046\uff27\053\uff27\054" +
    "\uff27\056\uff27\057\uff27\064\uff27\074\uff27\075\uff27\076\uff27" +
    "\105\uff27\131\uff27\001\002\000\004\074\u0236\001\002\000" +
    "\004\127\u022d\001\002\000\004\004\u0223\001\002\000\006" +
    "\004\u01ea\111\u01eb\001\002\000\006\003\u01e4\104\u01e3\001" +
    "\002\000\034\003\055\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\004\104\u01e5\001\002\000\034" +
    "\003\055\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\131\035" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\u01e7\131\035\001\002\000\040\022\uff1b\024\uff1b\025" +
    "\uff1b\044\uff1b\046\uff1b\053\uff1b\054\uff1b\056\uff1b\057\uff1b" +
    "\064\uff1b\074\uff1b\075\uff1b\076\uff1b\105\uff1b\131\uff1b\001" +
    "\002\000\034\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\105" +
    "\u01e9\131\035\001\002\000\040\022\uff1c\024\uff1c\025\uff1c" +
    "\044\uff1c\046\uff1c\053\uff1c\054\uff1c\056\uff1c\057\uff1c\064" +
    "\uff1c\074\uff1c\075\uff1c\076\uff1c\105\uff1c\131\uff1c\001\002" +
    "\000\004\127\u021a\001\002\000\006\004\u01ed\127\u01ec\001" +
    "\002\000\006\074\u01d6\075\u01d4\001\002\000\004\127\u01ee" +
    "\001\002\000\010\003\u01f0\074\u01d6\075\u01d4\001\002\000" +
    "\004\076\u01f7\001\002\000\004\127\u01f1\001\002\000\020" +
    "\003\105\004\106\005\075\006\076\026\101\063\100\076" +
    "\104\001\002\000\004\103\u01f3\001\002\000\004\104\u01f4" +
    "\001\002\000\034\003\055\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\056\060\057\064\074\051\075\065" +
    "\076\045\131\035\001\002\000\034\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\105\u01f6\131\035\001\002\000\040\022" +
    "\uff1e\024\uff1e\025\uff1e\044\uff1e\046\uff1e\053\uff1e\054\uff1e" +
    "\056\uff1e\057\uff1e\064\uff1e\074\uff1e\075\uff1e\076\uff1e\105" +
    "\uff1e\131\uff1e\001\002\000\022\003\105\004\106\005\075" +
    "\006\076\026\101\063\100\076\104\127\u01f8\001\002\000" +
    "\022\003\u01ff\004\106\005\075\006\076\026\101\063\100" +
    "\076\104\103\u01fe\001\002\000\004\103\u01fa\001\002\000" +
    "\004\104\u01fb\001\002\000\034\003\055\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\131\035\001\002\000\034\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\105\u01fd\131\035\001\002" +
    "\000\040\022\uff22\024\uff22\025\uff22\044\uff22\046\uff22\053" +
    "\uff22\054\uff22\056\uff22\057\uff22\064\uff22\074\uff22\075\uff22" +
    "\076\uff22\105\uff22\131\uff22\001\002\000\004\104\u020f\001" +
    "\002\000\034\003\ufef3\004\ufef3\005\ufef3\006\ufef3\026\ufef3" +
    "\063\ufef3\103\u020b\110\ufef3\116\ufef3\117\ufef3\120\ufef3\121" +
    "\ufef3\122\ufef3\001\002\000\006\103\u0202\104\u0201\001\002" +
    "\000\034\003\055\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\131\035\001\002\000\036\003\055\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\104\u0204\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\u0208\131\035\001" +
    "\002\000\036\003\055\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\105\u0206\131\035\001\002\000\034\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\105\u0207\131\035\001\002\000\040" +
    "\022\uff19\024\uff19\025\uff19\044\uff19\046\uff19\053\uff19\054" +
    "\uff19\056\uff19\057\uff19\064\uff19\074\uff19\075\uff19\076\uff19" +
    "\105\uff19\131\uff19\001\002\000\040\022\uff28\024\uff28\025" +
    "\uff28\044\uff28\046\uff28\053\uff28\054\uff28\056\uff28\057\uff28" +
    "\064\uff28\074\uff28\075\uff28\076\uff28\105\uff28\131\uff28\001" +
    "\002\000\040\022\uff1a\024\uff1a\025\uff1a\044\uff1a\046\uff1a" +
    "\053\uff1a\054\uff1a\056\uff1a\057\uff1a\064\uff1a\074\uff1a\075" +
    "\uff1a\076\uff1a\105\uff1a\131\uff1a\001\002\000\034\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\105\u020a\131\035\001\002" +
    "\000\040\022\uff20\024\uff20\025\uff20\044\uff20\046\uff20\053" +
    "\uff20\054\uff20\056\uff20\057\uff20\064\uff20\074\uff20\075\uff20" +
    "\076\uff20\105\uff20\131\uff20\001\002\000\004\104\u020c\001" +
    "\002\000\034\003\055\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\034\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\105\u020e\131\035\001\002\000\040\022\uff1d" +
    "\024\uff1d\025\uff1d\044\uff1d\046\uff1d\053\uff1d\054\uff1d\056" +
    "\uff1d\057\uff1d\064\uff1d\074\uff1d\075\uff1d\076\uff1d\105\uff1d" +
    "\131\uff1d\001\002\000\034\003\055\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\131\035\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\105\u0211\131\035\001\002\000" +
    "\040\022\uff21\024\uff21\025\uff21\044\uff21\046\uff21\053\uff21" +
    "\054\uff21\056\uff21\057\uff21\064\uff21\074\uff21\075\uff21\076" +
    "\uff21\105\uff21\131\uff21\001\002\000\004\076\u0213\001\002" +
    "\000\004\127\u0214\001\002\000\020\003\105\004\106\005" +
    "\075\006\076\026\101\063\100\076\104\001\002\000\004" +
    "\103\u0216\001\002\000\004\104\u0217\001\002\000\034\003" +
    "\055\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\045\131\035\001" +
    "\002\000\034\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\105" +
    "\u0219\131\035\001\002\000\040\022\uff24\024\uff24\025\uff24" +
    "\044\uff24\046\uff24\053\uff24\054\uff24\056\uff24\057\uff24\064" +
    "\uff24\074\uff24\075\uff24\076\uff24\105\uff24\131\uff24\001\002" +
    "\000\006\074\u01d6\075\u01d4\001\002\000\004\076\u021c\001" +
    "\002\000\004\127\u021d\001\002\000\020\003\105\004\106" +
    "\005\075\006\076\026\101\063\100\076\104\001\002\000" +
    "\004\103\u021f\001\002\000\004\104\u0220\001\002\000\034" +
    "\003\055\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\131\035" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\u0222\131\035\001\002\000\040\022\uff25\024\uff25\025" +
    "\uff25\044\uff25\046\uff25\053\uff25\054\uff25\056\uff25\057\uff25" +
    "\064\uff25\074\uff25\075\uff25\076\uff25\105\uff25\131\uff25\001" +
    "\002\000\004\127\u0224\001\002\000\006\074\u01d6\075\u01d4" +
    "\001\002\000\004\076\u0226\001\002\000\004\127\u0227\001" +
    "\002\000\020\003\105\004\106\005\075\006\076\026\101" +
    "\063\100\076\104\001\002\000\004\103\u0229\001\002\000" +
    "\004\104\u022a\001\002\000\034\003\055\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\131\035\001\002\000\034\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\105\u022c\131\035\001\002" +
    "\000\040\022\uff26\024\uff26\025\uff26\044\uff26\046\uff26\053" +
    "\uff26\054\uff26\056\uff26\057\uff26\064\uff26\074\uff26\075\uff26" +
    "\076\uff26\105\uff26\131\uff26\001\002\000\006\074\u01d6\075" +
    "\u01d4\001\002\000\004\076\u022f\001\002\000\004\127\u0230" +
    "\001\002\000\020\003\105\004\106\005\075\006\076\026" +
    "\101\063\100\076\104\001\002\000\004\103\u0232\001\002" +
    "\000\004\104\u0233\001\002\000\034\003\055\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\u0235\131\035\001" +
    "\002\000\040\022\uff1f\024\uff1f\025\uff1f\044\uff1f\046\uff1f" +
    "\053\uff1f\054\uff1f\056\uff1f\057\uff1f\064\uff1f\074\uff1f\075" +
    "\uff1f\076\uff1f\105\uff1f\131\uff1f\001\002\000\004\076\u0237" +
    "\001\002\000\004\127\u0238\001\002\000\020\003\105\004" +
    "\106\005\075\006\076\026\101\063\100\076\104\001\002" +
    "\000\004\103\u023a\001\002\000\004\104\u023b\001\002\000" +
    "\034\003\055\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\131" +
    "\035\001\002\000\034\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\105\u023d\131\035\001\002\000\040\022\uff23\024\uff23" +
    "\025\uff23\044\uff23\046\uff23\053\uff23\054\uff23\056\uff23\057" +
    "\uff23\064\uff23\074\uff23\075\uff23\076\uff23\105\uff23\131\uff23" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\064\u0241\074\051\075\065" +
    "\076\045\131\035\001\002\000\004\027\uffe6\001\002\000" +
    "\006\002\ufffc\027\uffe5\001\002\000\004\027\uffe8\001\002" +
    "\000\004\002\000\001\002\000\004\027\uffe5\001\002\000" +
    "\046\003\055\022\063\024\053\025\054\027\u0243\030\u0248" +
    "\044\041\046\066\053\036\056\060\057\064\064\u0262\074" +
    "\051\075\065\076\045\100\u0140\105\u0142\131\035\001\002" +
    "\000\012\003\u025d\013\022\030\u025b\076\u025f\001\002\000" +
    "\004\027\u0259\001\002\000\054\003\055\004\u0193\005\233" +
    "\006\237\022\063\024\053\025\054\026\242\044\041\046" +
    "\066\053\036\056\060\057\064\063\241\074\051\075\065" +
    "\076\u0249\102\u0190\111\236\126\234\131\035\001\002\000" +
    "\012\003\uffde\013\uffde\030\uffde\076\uffde\001\002\000\072" +
    "\004\u0193\005\233\006\237\012\u024a\022\uffad\024\uffad\025" +
    "\uffad\026\242\044\uffad\046\uffad\053\uffad\056\uffad\057\uffad" +
    "\062\uff06\063\241\064\uffad\074\uffad\075\uffad\076\uffad\100" +
    "\uffad\102\u0190\111\236\112\uffad\113\uffad\114\uffad\115\uffad" +
    "\126\234\131\uffad\001\002\000\024\003\u0253\015\u0251\042" +
    "\u0254\043\u0250\047\u024c\065\u024e\066\u0252\067\u024f\070\u024b" +
    "\001\002\000\022\003\ufefe\004\ufefe\005\ufefe\006\ufefe\026" +
    "\ufefe\063\ufefe\100\ufefe\111\ufefe\001\002\000\022\003\ufefb" +
    "\004\ufefb\005\ufefb\006\ufefb\026\ufefb\063\ufefb\100\ufefb\111" +
    "\ufefb\001\002\000\006\100\u0255\111\u0256\001\002\000\022" +
    "\003\ufeff\004\ufeff\005\ufeff\006\ufeff\026\ufeff\063\ufeff\100" +
    "\ufeff\111\ufeff\001\002\000\022\003\ufefd\004\ufefd\005\ufefd" +
    "\006\ufefd\026\ufefd\063\ufefd\100\ufefd\111\ufefd\001\002\000" +
    "\022\003\ufef9\004\ufef9\005\ufef9\006\ufef9\026\ufef9\063\ufef9" +
    "\100\ufef9\111\ufef9\001\002\000\022\003\ufefc\004\ufefc\005" +
    "\ufefc\006\ufefc\026\ufefc\063\ufefc\100\ufefc\111\ufefc\001\002" +
    "\000\022\003\uff00\004\uff00\005\uff00\006\uff00\026\uff00\063" +
    "\uff00\100\uff00\111\uff00\001\002\000\022\003\ufef8\004\ufef8" +
    "\005\ufef8\006\ufef8\026\ufef8\063\ufef8\100\ufef8\111\ufef8\001" +
    "\002\000\022\003\ufefa\004\ufefa\005\ufefa\006\ufefa\026\ufefa" +
    "\063\ufefa\100\ufefa\111\ufefa\001\002\000\012\003\uffda\013" +
    "\uffda\030\uffda\076\uffda\001\002\000\016\003\105\004\106" +
    "\005\075\006\076\026\135\063\133\001\002\000\004\100" +
    "\u0258\001\002\000\012\003\uffc5\013\uffc5\030\uffc5\076\uffc5" +
    "\001\002\000\004\002\ufffe\001\002\000\012\003\uffe0\013" +
    "\uffe0\030\uffe0\076\uffe0\001\002\000\010\003\uffeb\010\uffeb" +
    "\076\uffeb\001\002\000\012\003\uffe4\013\uffe4\030\uffe4\076" +
    "\uffe4\001\002\000\004\100\u0261\001\002\000\012\003\uffe2" +
    "\013\uffe2\030\uffe2\076\uffe2\001\002\000\004\076\u0260\001" +
    "\002\000\004\012\u024a\001\002\000\012\003\uffdd\013\uffdd" +
    "\030\uffdd\076\uffdd\001\002\000\036\022\uff66\024\uff66\025" +
    "\uff66\027\uffe6\044\uff66\046\uff66\053\uff66\056\uff66\057\uff66" +
    "\064\uff66\074\uff66\075\uff66\076\uff66\131\uff66\001\002\000" +
    "\026\004\u0193\005\233\006\237\012\u024a\026\242\063\241" +
    "\076\u0192\102\u0190\111\236\126\234\001\002\000\004\002" +
    "\ufffd\001\002\000\010\003\uffec\010\uffec\076\uffec\001\002" +
    "\000\024\003\u0253\015\u0251\042\u0254\043\u0250\047\u024c\065" +
    "\u024e\066\u0252\067\u024f\070\u024b\001\002\000\030\003\u0253" +
    "\012\u0269\015\u0251\042\u0254\043\u0250\047\u024c\065\u024e\066" +
    "\u0252\067\u024f\070\u024b\076\u026a\001\002\000\006\100\u02a6" +
    "\111\u02a7\001\002\000\034\003\u0253\015\u0251\042\u0254\043" +
    "\u0250\047\u024c\065\u024e\066\u0252\067\u024f\070\u024b\100\u0271" +
    "\111\u0270\140\u0273\141\u0274\001\002\000\024\003\u0253\015" +
    "\u0251\042\u0254\043\u0250\047\u024c\065\u024e\066\u0252\067\u024f" +
    "\070\u024b\001\002\000\006\100\u026c\111\u026d\001\002\000" +
    "\012\003\uffd9\013\uffd9\030\uffd9\076\uffd9\001\002\000\016" +
    "\003\105\004\106\005\075\006\076\026\135\063\133\001" +
    "\002\000\004\100\u026f\001\002\000\012\003\uffc6\013\uffc6" +
    "\030\uffc6\076\uffc6\001\002\000\016\003\105\004\106\005" +
    "\075\006\076\026\135\063\133\001\002\000\012\003\uffd7" +
    "\013\uffd7\030\uffd7\076\uffd7\001\002\000\022\003\u029e\004" +
    "\106\005\075\006\076\026\135\063\133\100\u029d\111\u029c" +
    "\001\002\000\006\004\u0291\106\u0292\001\002\000\006\004" +
    "\u0275\106\u0276\001\002\000\004\107\u028c\001\002\000\006" +
    "\004\u0278\107\u0277\001\002\000\004\106\u0288\001\002\000" +
    "\006\106\u027a\107\u0279\001\002\000\006\004\u027e\106\u027f" +
    "\001\002\000\004\004\u027b\001\002\000\004\107\u027c\001" +
    "\002\000\004\100\u027d\001\002\000\012\003\uffcd\013\uffcd" +
    "\030\uffcd\076\uffcd\001\002\000\004\107\u0286\001\002\000" +
    "\006\004\u0281\107\u0280\001\002\000\004\100\u0285\001\002" +
    "\000\006\100\u0283\107\u0282\001\002\000\014\003\uffd0\013" +
    "\uffd0\030\uffd0\076\uffd0\100\u0284\001\002\000\012\003\uffca" +
    "\013\uffca\030\uffca\076\uffca\001\002\000\012\003\uffd1\013" +
    "\uffd1\030\uffd1\076\uffd1\001\002\000\012\003\uffcb\013\uffcb" +
    "\030\uffcb\076\uffcb\001\002\000\004\100\u0287\001\002\000" +
    "\012\003\uffcc\013\uffcc\030\uffcc\076\uffcc\001\002\000\004" +
    "\004\u0289\001\002\000\004\107\u028a\001\002\000\004\100" +
    "\u028b\001\002\000\012\003\uffce\013\uffce\030\uffce\076\uffce" +
    "\001\002\000\004\106\u028d\001\002\000\004\004\u028e\001" +
    "\002\000\004\107\u028f\001\002\000\004\100\u0290\001\002" +
    "\000\012\003\uffcf\013\uffcf\030\uffcf\076\uffcf\001\002\000" +
    "\004\107\u0299\001\002\000\006\004\u0294\107\u0293\001\002" +
    "\000\004\100\u0298\001\002\000\006\100\u0296\107\u0295\001" +
    "\002\000\014\003\uffd5\013\uffd5\030\uffd5\076\uffd5\100\u0297" +
    "\001\002\000\012\003\uffd2\013\uffd2\030\uffd2\076\uffd2\001" +
    "\002\000\012\003\uffd6\013\uffd6\030\uffd6\076\uffd6\001\002" +
    "\000\012\003\uffd3\013\uffd3\030\uffd3\076\uffd3\001\002\000" +
    "\004\100\u029a\001\002\000\012\003\uffd4\013\uffd4\030\uffd4" +
    "\076\uffd4\001\002\000\004\100\u02a3\001\002\000\020\003" +
    "\105\004\106\005\075\006\076\026\135\063\133\076\u02a0" +
    "\001\002\000\012\003\uffdc\013\uffdc\030\uffdc\076\uffdc\001" +
    "\002\000\014\003\uffdb\013\uffdb\030\uffdb\076\uffdb\100\ufef3" +
    "\001\002\000\014\003\uffc7\013\uffc7\030\uffc7\076\uffc7\100" +
    "\u02a2\001\002\000\004\100\u02a1\001\002\000\012\003\uffc8" +
    "\013\uffc8\030\uffc8\076\uffc8\001\002\000\012\003\uffc9\013" +
    "\uffc9\030\uffc9\076\uffc9\001\002\000\012\003\uffc1\013\uffc1" +
    "\030\uffc1\076\uffc1\001\002\000\004\100\u02a5\001\002\000" +
    "\012\003\uffc2\013\uffc2\030\uffc2\076\uffc2\001\002\000\012" +
    "\003\uffd8\013\uffd8\030\uffd8\076\uffd8\001\002\000\016\003" +
    "\105\004\106\005\075\006\076\026\135\063\133\001\002" +
    "\000\004\100\u02a9\001\002\000\012\003\uffc3\013\uffc3\030" +
    "\uffc3\076\uffc3\001\002\000\004\111\u02ab\001\002\000\016" +
    "\003\105\004\106\005\075\006\076\026\135\063\133\001" +
    "\002\000\004\100\u02ad\001\002\000\012\003\uffc4\013\uffc4" +
    "\030\uffc4\076\uffc4\001\002\000\012\003\u025d\013\022\030" +
    "\u02b1\076\u02b2\001\002\000\010\003\uffef\010\uffef\076\uffef" +
    "\001\002\000\012\003\uffee\010\uffee\030\u0248\076\uffee\001" +
    "\002\000\010\003\ufff0\010\ufff0\076\ufff0\001\002\000\010" +
    "\003\uffed\010\uffed\076\uffed\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\064\u02b5\074\051\075\065\076\045\131\035\001\002\000" +
    "\004\027\uffea\001\002\000\004\027\uffe9\001\002\000\004" +
    "\006\u02be\001\002\000\020\003\ufff3\006\u02b9\010\ufff3\013" +
    "\ufff3\037\ufff3\076\ufff3\124\u02b8\001\002\000\006\006\u02bc" +
    "\100\u02bb\001\002\000\004\100\u02ba\001\002\000\014\003" +
    "\ufff6\010\ufff6\013\ufff6\037\ufff6\076\ufff6\001\002\000\014" +
    "\003\ufff5\010\ufff5\013\ufff5\037\ufff5\076\ufff5\001\002\000" +
    "\016\003\ufff4\010\ufff4\013\ufff4\037\ufff4\076\ufff4\100\u02bd" +
    "\001\002\000\014\003\ufff9\010\ufff9\013\ufff9\037\ufff9\076" +
    "\ufff9\001\002\000\004\100\u02bf\001\002\000\014\003\ufff7" +
    "\010\ufff7\013\ufff7\037\ufff7\076\ufff7\001\002\000\004\002" +
    "\ufffb\001\002\000\020\002\ufffa\003\u02c1\013\022\030\u0248" +
    "\036\005\037\021\076\u02c2\001\002\000\004\076\u02c7\001" +
    "\002\000\010\003\u02c5\010\017\076\033\001\002\000\004" +
    "\027\u02c6\001\002\000\040\003\055\022\063\024\053\025" +
    "\054\027\u0243\044\041\046\066\053\036\056\060\057\064" +
    "\064\u023f\074\051\075\065\076\045\131\035\001\002\000" +
    "\004\002\uffff\001\002\000\006\012\u024a\124\013\001\002" +
    "\000\012\003\u025d\013\022\030\u025b\076\u0265\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02c6\000\006\002\007\053\005\001\001\000\020\002" +
    "\u02bf\003\u02c2\005\022\007\017\010\015\053\005\055\026" +
    "\001\001\000\002\001\001\000\016\003\027\004\023\005" +
    "\022\007\017\010\015\055\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\047\025\046\026\060\032\u02b2\033" +
    "\033\035\045\037\041\040\042\041\051\042\061\046\056" +
    "\047\043\054\036\056\055\001\001\000\002\001\001\000" +
    "\012\005\u02ad\007\017\010\015\055\026\001\001\000\002" +
    "\001\001\000\010\007\u025b\010\u025d\055\u0259\001\001\000" +
    "\002\001\001\000\036\012\047\025\046\026\060\032\037" +
    "\033\033\035\045\037\041\040\042\041\051\042\061\046" +
    "\056\047\043\054\036\056\055\001\001\000\050\004\u0245" +
    "\005\u0244\007\017\010\015\012\047\025\046\026\060\032" +
    "\u023d\033\033\035\045\037\041\040\042\041\051\042\061" +
    "\046\056\047\043\054\036\055\026\056\055\001\001\000" +
    "\002\001\001\000\004\004\030\001\001\000\002\001\001" +
    "\000\036\012\047\025\046\026\060\032\u023d\033\033\035" +
    "\045\037\041\040\042\041\051\042\061\046\056\047\043" +
    "\054\036\056\055\001\001\000\036\012\047\025\046\026" +
    "\060\032\037\033\033\035\045\037\041\040\042\041\051" +
    "\042\061\046\056\047\043\054\036\056\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u01b9\001\001" +
    "\000\002\001\001\000\034\012\117\025\116\026\060\033" +
    "\112\035\115\037\113\040\114\041\120\042\121\046\056" +
    "\047\043\054\036\056\055\001\001\000\012\011\102\015" +
    "\101\017\u01a1\060\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\245\014\243\016" +
    "\237\023\u0190\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\102\015\101\017\u0170\060\073\001\001\000\012" +
    "\011\102\015\101\017\u0143\060\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\221\001" +
    "\001\000\012\011\102\015\101\017\106\060\073\001\001" +
    "\000\002\001\001\000\004\051\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\102\020\213\060\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\102" +
    "\015\101\017\153\060\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\142\001\001\000\002\001\001" +
    "\000\010\011\102\020\125\060\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\047\025\046\026\060\032\111\033\033\035" +
    "\045\037\041\040\042\041\051\042\061\046\056\047\043" +
    "\054\036\056\055\001\001\000\034\012\117\025\116\026" +
    "\060\033\112\035\115\037\113\040\114\041\120\042\121" +
    "\046\056\047\043\054\036\056\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\102\060\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\047" +
    "\025\046\026\060\032\175\033\033\035\045\037\041\040" +
    "\042\041\051\042\061\046\056\047\043\054\036\056\055" +
    "\001\001\000\036\012\047\025\046\026\060\032\156\033" +
    "\033\035\045\037\041\040\042\041\051\042\061\046\056" +
    "\047\043\054\036\056\055\001\001\000\034\012\117\025" +
    "\116\026\060\033\112\035\115\037\113\040\114\041\120" +
    "\042\121\046\056\047\043\054\036\056\055\001\001\000" +
    "\036\012\047\025\046\026\060\032\160\033\033\035\045" +
    "\037\041\040\042\041\051\042\061\046\056\047\043\054" +
    "\036\056\055\001\001\000\034\012\117\025\116\026\060" +
    "\033\112\035\115\037\113\040\114\041\120\042\121\046" +
    "\056\047\043\054\036\056\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\047\025\046\026\060\032" +
    "\172\033\033\035\045\037\041\040\042\041\051\042\061" +
    "\046\056\047\043\054\036\056\055\001\001\000\036\012" +
    "\047\025\046\026\060\032\165\033\033\035\045\037\041" +
    "\040\042\041\051\042\061\046\056\047\043\054\036\056" +
    "\055\001\001\000\034\012\117\025\116\026\060\033\112" +
    "\035\115\037\113\040\114\041\120\042\121\046\056\047" +
    "\043\054\036\056\055\001\001\000\036\012\047\025\046" +
    "\026\060\032\167\033\033\035\045\037\041\040\042\041" +
    "\051\042\061\046\056\047\043\054\036\056\055\001\001" +
    "\000\034\012\117\025\116\026\060\033\112\035\115\037" +
    "\113\040\114\041\120\042\121\046\056\047\043\054\036" +
    "\056\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\012\117\025\116\026\060\033\112\035\115\037\113" +
    "\040\114\041\120\042\121\046\056\047\043\054\036\056" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\117\025\116\026\060\033\112\035\115\037\113\040" +
    "\114\041\120\042\121\046\056\047\043\054\036\056\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\047\025\046\026\060\032\201\033\033\035\045\037\041" +
    "\040\042\041\051\042\061\046\056\047\043\054\036\056" +
    "\055\001\001\000\034\012\117\025\116\026\060\033\112" +
    "\035\115\037\113\040\114\041\120\042\121\046\056\047" +
    "\043\054\036\056\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\047\025\046\026\060\032\205\033" +
    "\033\035\045\037\041\040\042\041\051\042\061\046\056" +
    "\047\043\054\036\056\055\001\001\000\034\012\117\025" +
    "\116\026\060\033\112\035\115\037\113\040\114\041\120" +
    "\042\121\046\056\047\043\054\036\056\055\001\001\000" +
    "\002\001\001\000\036\012\047\025\046\026\060\032\210" +
    "\033\033\035\045\037\041\040\042\041\051\042\061\046" +
    "\056\047\043\054\036\056\055\001\001\000\034\012\117" +
    "\025\116\026\060\033\112\035\115\037\113\040\114\041" +
    "\120\042\121\046\056\047\043\054\036\056\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\102\060" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\225\024\227" +
    "\025\226\026\060\056\055\001\001\000\010\013\245\014" +
    "\243\016\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\263\014\243" +
    "\016\237\001\001\000\010\013\262\014\243\016\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\255\016\237" +
    "\001\001\000\006\014\250\016\237\001\001\000\002\001" +
    "\001\000\004\016\254\001\001\000\004\016\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\225\024\362" +
    "\025\226\026\060\056\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\225\024\354\025\226\026\060\056\055\001\001\000" +
    "\014\012\225\024\350\025\226\026\060\056\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\374\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\047\025\046\026" +
    "\060\032\u0104\033\033\035\045\037\041\040\042\041\051" +
    "\042\061\046\056\047\043\054\036\056\055\001\001\000" +
    "\034\012\117\025\116\026\060\033\112\035\115\037\113" +
    "\040\114\041\120\042\121\046\056\047\043\054\036\056" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\047\025\046\026\060\032\u0108\033\033\035\045\037" +
    "\041\040\042\041\051\042\061\046\056\047\043\054\036" +
    "\056\055\001\001\000\034\012\117\025\116\026\060\033" +
    "\112\035\115\037\113\040\114\041\120\042\121\046\056" +
    "\047\043\054\036\056\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\012\047\025\046\026\060\032\u010c" +
    "\033\033\035\045\037\041\040\042\041\051\042\061\046" +
    "\056\047\043\054\036\056\055\001\001\000\034\012\117" +
    "\025\116\026\060\033\112\035\115\037\113\040\114\041" +
    "\120\042\121\046\056\047\043\054\036\056\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\047\025" +
    "\046\026\060\032\u0110\033\033\035\045\037\041\040\042" +
    "\041\051\042\061\046\056\047\043\054\036\056\055\001" +
    "\001\000\034\012\117\025\116\026\060\033\112\035\115" +
    "\037\113\040\114\041\120\042\121\046\056\047\043\054" +
    "\036\056\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\012\047\025\046\026\060\032\u0118" +
    "\033\033\035\045\037\041\040\042\041\051\042\061\046" +
    "\056\047\043\054\036\056\055\001\001\000\034\012\117" +
    "\025\116\026\060\033\112\035\115\037\113\040\114\041" +
    "\120\042\121\046\056\047\043\054\036\056\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\047\025" +
    "\046\026\060\032\u011c\033\033\035\045\037\041\040\042" +
    "\041\051\042\061\046\056\047\043\054\036\056\055\001" +
    "\001\000\034\012\117\025\116\026\060\033\112\035\115" +
    "\037\113\040\114\041\120\042\121\046\056\047\043\054" +
    "\036\056\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\047\025\046\026\060\032\u0120\033\033\035" +
    "\045\037\041\040\042\041\051\042\061\046\056\047\043" +
    "\054\036\056\055\001\001\000\034\012\117\025\116\026" +
    "\060\033\112\035\115\037\113\040\114\041\120\042\121" +
    "\046\056\047\043\054\036\056\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\047\025\046\026\060" +
    "\032\u0124\033\033\035\045\037\041\040\042\041\051\042" +
    "\061\046\056\047\043\054\036\056\055\001\001\000\034" +
    "\012\117\025\116\026\060\033\112\035\115\037\113\040" +
    "\114\041\120\042\121\046\056\047\043\054\036\056\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u0132\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\u0136\001\001\000\004\052\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u013d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\102\015\101\017\u014c\060\073\001\001\000\002\001" +
    "\001\000\014\012\225\024\u0145\025\226\026\060\056\055" +
    "\001\001\000\002\001\001\000\014\012\225\024\u0147\025" +
    "\226\026\060\056\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\225\024\u016a\025" +
    "\226\026\060\056\055\001\001\000\002\001\001\000\014" +
    "\012\225\024\u014e\025\226\026\060\056\055\001\001\000" +
    "\014\012\225\024\u0155\025\226\026\060\056\055\001\001" +
    "\000\002\001\001\000\014\012\225\024\u0150\025\226\026" +
    "\060\056\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\225\024\u0165\025\226\026" +
    "\060\056\055\001\001\000\002\001\001\000\014\012\225" +
    "\024\u0157\025\226\026\060\056\055\001\001\000\014\012" +
    "\225\024\u015c\025\226\026\060\056\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\225\024\u0163\025\226\026\060" +
    "\056\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\225\024\u016c\025\226\026\060\056\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\102\015\101\017\u0177\060\073\001\001\000\002\001\001" +
    "\000\014\012\225\024\u0172\025\226\026\060\056\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\225\024\u0189\025\226\026\060\056\055\001" +
    "\001\000\002\001\001\000\014\012\225\024\u0179\025\226" +
    "\026\060\056\055\001\001\000\014\012\225\024\u017e\025" +
    "\226\026\060\056\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\225\024\u0186\025\226\026\060" +
    "\056\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\102\013\263\014\243\015\101\016\237" +
    "\017\u019a\060\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\047" +
    "\025\046\026\060\032\u0195\033\033\035\045\037\041\040" +
    "\042\041\051\042\061\046\056\047\043\054\036\056\055" +
    "\001\001\000\034\012\117\025\116\026\060\033\112\035" +
    "\115\037\113\040\114\041\120\042\121\046\056\047\043" +
    "\054\036\056\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\102\020\125\060\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\225\024\u019c\025" +
    "\226\026\060\056\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\102\015\101\017" +
    "\u01a8\060\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\047\025\046\026\060\032" +
    "\u01a4\033\033\035\045\037\041\040\042\041\051\042\061" +
    "\046\056\047\043\054\036\056\055\001\001\000\034\012" +
    "\117\025\116\026\060\033\112\035\115\037\113\040\114" +
    "\041\120\042\121\046\056\047\043\054\036\056\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\047\025\046\026\060\032" +
    "\u01b1\033\033\035\045\037\041\040\042\041\051\042\061" +
    "\046\056\047\043\054\036\056\055\001\001\000\036\012" +
    "\047\025\046\026\060\032\u01ab\033\033\035\045\037\041" +
    "\040\042\041\051\042\061\046\056\047\043\054\036\056" +
    "\055\001\001\000\034\012\117\025\116\026\060\033\112" +
    "\035\115\037\113\040\114\041\120\042\121\046\056\047" +
    "\043\054\036\056\055\001\001\000\036\012\047\025\046" +
    "\026\060\032\u01ad\033\033\035\045\037\041\040\042\041" +
    "\051\042\061\046\056\047\043\054\036\056\055\001\001" +
    "\000\034\012\117\025\116\026\060\033\112\035\115\037" +
    "\113\040\114\041\120\042\121\046\056\047\043\054\036" +
    "\056\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\012\117\025\116\026\060\033\112" +
    "\035\115\037\113\040\114\041\120\042\121\046\056\047" +
    "\043\054\036\056\055\001\001\000\002\001\001\000\036" +
    "\012\047\025\046\026\060\032\u01b4\033\033\035\045\037" +
    "\041\040\042\041\051\042\061\046\056\047\043\054\036" +
    "\056\055\001\001\000\034\012\117\025\116\026\060\033" +
    "\112\035\115\037\113\040\114\041\120\042\121\046\056" +
    "\047\043\054\036\056\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\047\025\046\026\060\032\u01c6\033" +
    "\033\035\045\037\041\040\042\041\051\042\061\046\056" +
    "\047\043\054\036\056\055\001\001\000\036\012\047\025" +
    "\046\026\060\032\u01c0\033\033\035\045\037\041\040\042" +
    "\041\051\042\061\046\056\047\043\054\036\056\055\001" +
    "\001\000\002\001\001\000\036\012\047\025\046\026\060" +
    "\032\u01be\033\033\035\045\037\041\040\042\041\051\042" +
    "\061\046\056\047\043\054\036\056\055\001\001\000\034" +
    "\012\117\025\116\026\060\033\112\035\115\037\113\040" +
    "\114\041\120\042\121\046\056\047\043\054\036\056\055" +
    "\001\001\000\002\001\001\000\034\012\117\025\116\026" +
    "\060\033\112\035\115\037\113\040\114\041\120\042\121" +
    "\046\056\047\043\054\036\056\055\001\001\000\036\012" +
    "\047\025\046\026\060\032\u01c2\033\033\035\045\037\041" +
    "\040\042\041\051\042\061\046\056\047\043\054\036\056" +
    "\055\001\001\000\034\012\117\025\116\026\060\033\112" +
    "\035\115\037\113\040\114\041\120\042\121\046\056\047" +
    "\043\054\036\056\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\117\025\116\026" +
    "\060\033\112\035\115\037\113\040\114\041\120\042\121" +
    "\046\056\047\043\054\036\056\055\001\001\000\002\001" +
    "\001\000\036\012\047\025\046\026\060\032\u01c9\033\033" +
    "\035\045\037\041\040\042\041\051\042\061\046\056\047" +
    "\043\054\036\056\055\001\001\000\034\012\117\025\116" +
    "\026\060\033\112\035\115\037\113\040\114\041\120\042" +
    "\121\046\056\047\043\054\036\056\055\001\001\000\002" +
    "\001\001\000\036\012\047\025\046\026\060\032\u01cc\033" +
    "\033\035\045\037\041\040\042\041\051\042\061\046\056" +
    "\047\043\054\036\056\055\001\001\000\034\012\117\025" +
    "\116\026\060\033\112\035\115\037\113\040\114\041\120" +
    "\042\121\046\056\047\043\054\036\056\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u01d4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\102\015\101\017\u01d8\060\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\047" +
    "\025\046\026\060\032\u01db\033\033\035\045\037\041\040" +
    "\042\041\051\042\061\046\056\047\043\054\036\056\055" +
    "\001\001\000\034\012\117\025\116\026\060\033\112\035" +
    "\115\037\113\040\114\041\120\042\121\046\056\047\043" +
    "\054\036\056\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\047\025\046\026\060\032" +
    "\u01e7\033\033\035\045\037\041\040\042\041\051\042\061" +
    "\046\056\047\043\054\036\056\055\001\001\000\002\001" +
    "\001\000\036\012\047\025\046\026\060\032\u01e5\033\033" +
    "\035\045\037\041\040\042\041\051\042\061\046\056\047" +
    "\043\054\036\056\055\001\001\000\034\012\117\025\116" +
    "\026\060\033\112\035\115\037\113\040\114\041\120\042" +
    "\121\046\056\047\043\054\036\056\055\001\001\000\002" +
    "\001\001\000\034\012\117\025\116\026\060\033\112\035" +
    "\115\037\113\040\114\041\120\042\121\046\056\047\043" +
    "\054\036\056\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0211\001\001\000\002" +
    "\001\001\000\004\050\u01ee\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\102\015\101\017\u01f1\060\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\047\025\046\026\060\032\u01f4\033\033\035\045\037\041" +
    "\040\042\041\051\042\061\046\056\047\043\054\036\056" +
    "\055\001\001\000\034\012\117\025\116\026\060\033\112" +
    "\035\115\037\113\040\114\041\120\042\121\046\056\047" +
    "\043\054\036\056\055\001\001\000\002\001\001\000\012" +
    "\011\102\015\101\017\u01f8\060\073\001\001\000\012\011" +
    "\102\015\101\017\u01ff\060\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\047\025\046\026\060\032" +
    "\u01fb\033\033\035\045\037\041\040\042\041\051\042\061" +
    "\046\056\047\043\054\036\056\055\001\001\000\034\012" +
    "\117\025\116\026\060\033\112\035\115\037\113\040\114" +
    "\041\120\042\121\046\056\047\043\054\036\056\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\047\025\046\026\060\032" +
    "\u0208\033\033\035\045\037\041\040\042\041\051\042\061" +
    "\046\056\047\043\054\036\056\055\001\001\000\036\012" +
    "\047\025\046\026\060\032\u0202\033\033\035\045\037\041" +
    "\040\042\041\051\042\061\046\056\047\043\054\036\056" +
    "\055\001\001\000\034\012\117\025\116\026\060\033\112" +
    "\035\115\037\113\040\114\041\120\042\121\046\056\047" +
    "\043\054\036\056\055\001\001\000\036\012\047\025\046" +
    "\026\060\032\u0204\033\033\035\045\037\041\040\042\041" +
    "\051\042\061\046\056\047\043\054\036\056\055\001\001" +
    "\000\034\012\117\025\116\026\060\033\112\035\115\037" +
    "\113\040\114\041\120\042\121\046\056\047\043\054\036" +
    "\056\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\012\117\025\116\026\060\033\112" +
    "\035\115\037\113\040\114\041\120\042\121\046\056\047" +
    "\043\054\036\056\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\047\025\046\026\060\032\u020c\033" +
    "\033\035\045\037\041\040\042\041\051\042\061\046\056" +
    "\047\043\054\036\056\055\001\001\000\034\012\117\025" +
    "\116\026\060\033\112\035\115\037\113\040\114\041\120" +
    "\042\121\046\056\047\043\054\036\056\055\001\001\000" +
    "\002\001\001\000\036\012\047\025\046\026\060\032\u020f" +
    "\033\033\035\045\037\041\040\042\041\051\042\061\046" +
    "\056\047\043\054\036\056\055\001\001\000\034\012\117" +
    "\025\116\026\060\033\112\035\115\037\113\040\114\041" +
    "\120\042\121\046\056\047\043\054\036\056\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\102\015\101\017\u0214\060\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\047\025\046\026" +
    "\060\032\u0217\033\033\035\045\037\041\040\042\041\051" +
    "\042\061\046\056\047\043\054\036\056\055\001\001\000" +
    "\034\012\117\025\116\026\060\033\112\035\115\037\113" +
    "\040\114\041\120\042\121\046\056\047\043\054\036\056" +
    "\055\001\001\000\002\001\001\000\004\050\u021a\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\102\015" +
    "\101\017\u021d\060\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\047\025\046\026\060\032\u0220\033" +
    "\033\035\045\037\041\040\042\041\051\042\061\046\056" +
    "\047\043\054\036\056\055\001\001\000\034\012\117\025" +
    "\116\026\060\033\112\035\115\037\113\040\114\041\120" +
    "\042\121\046\056\047\043\054\036\056\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u0224\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\102\015" +
    "\101\017\u0227\060\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\047\025\046\026\060\032\u022a\033" +
    "\033\035\045\037\041\040\042\041\051\042\061\046\056" +
    "\047\043\054\036\056\055\001\001\000\034\012\117\025" +
    "\116\026\060\033\112\035\115\037\113\040\114\041\120" +
    "\042\121\046\056\047\043\054\036\056\055\001\001\000" +
    "\002\001\001\000\004\050\u022d\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\102\015\101\017\u0230\060" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\047\025\046\026\060\032\u0233\033\033\035\045\037" +
    "\041\040\042\041\051\042\061\046\056\047\043\054\036" +
    "\056\055\001\001\000\034\012\117\025\116\026\060\033" +
    "\112\035\115\037\113\040\114\041\120\042\121\046\056" +
    "\047\043\054\036\056\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\102\015\101" +
    "\017\u0238\060\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\012\047\025\046\026\060\032\u023b\033\033" +
    "\035\045\037\041\040\042\041\051\042\061\046\056\047" +
    "\043\054\036\056\055\001\001\000\034\012\117\025\116" +
    "\026\060\033\112\035\115\037\113\040\114\041\120\042" +
    "\121\046\056\047\043\054\036\056\055\001\001\000\002" +
    "\001\001\000\034\012\117\025\116\026\060\033\112\035" +
    "\115\037\113\040\114\041\120\042\121\046\056\047\043" +
    "\054\036\056\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\047\025\046\026\060\032\u023d\033\033\035" +
    "\045\037\041\040\042\041\051\042\061\046\056\047\043" +
    "\054\036\056\055\001\001\000\010\007\u025b\010\u025d\055" +
    "\u0259\001\001\000\002\001\001\000\046\012\047\013\245" +
    "\014\243\016\237\023\u0190\025\046\026\060\032\037\033" +
    "\033\035\045\037\041\040\042\041\051\042\061\046\056" +
    "\047\043\054\036\056\055\001\001\000\002\001\001\000" +
    "\012\013\245\014\243\016\237\023\u0190\001\001\000\004" +
    "\057\u024c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\102" +
    "\060\u0256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\245\014\243\016\237\023\u0190\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\u02a9\001\001" +
    "\000\004\057\u0267\001\001\000\002\001\001\000\004\057" +
    "\u0271\001\001\000\004\057\u026a\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\102\060\u026d\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\102\060\u02a3" +
    "\001\001\000\002\001\001\000\006\011\102\060\u029a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\102" +
    "\060\u029e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\102\060\u02a7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\102\060\u02ab\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\u025b\010\u025d\055\u0259\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\012\117\025\116\026\060\033\112\035" +
    "\115\037\113\040\114\041\120\042\121\046\056\047\043" +
    "\054\036\056\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\u02bf\003\u02c2\005" +
    "\u02c7\007\017\010\015\053\005\055\026\001\001\000\002" +
    "\001\001\000\004\004\u02c3\001\001\000\002\001\001\000" +
    "\036\012\047\025\046\026\060\032\u023d\033\033\035\045" +
    "\037\041\040\042\041\051\042\061\046\056\047\043\054" +
    "\036\056\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\u025b\010\u025d\055\u0259\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 //Codigo del usuario
    private Editor editor;
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABEZA BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		System.out.println("Programa Correcto!!!!!");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del programa"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CABEZA error BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de declaración"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CABEZA BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de declaración"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= CABEZA BLOQUE_DECLARACION error fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de código"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error INICIO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Contenido no esperado antes de iniciar el programa"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Programa no reconocido"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABEZA ::= inicio_programa Identificador usar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),"Nombre del programa");
            System.out.println("Inicio y nombre correcto, junto con la condiguracion usar");
        }
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABEZA ::= Identificador Identificador usar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_programa. Tienes: " + s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CABEZA ::= inicio_programa usar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó ponerle nombre al programa."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CABEZA ::= inicio_programa Identificador Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la palabra \"usar\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CABEZA ::= inicio_programa Identificador usar PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la configuración de USAR."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CABEZA ::= inicio_programa Identificador usar Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CABEZA ::= inicio_programa Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la configuración usar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PINES ::= PINES COMA Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PINES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PINES ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PINES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOQUE_DECLARACION ::= inicio_var fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto vacío");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUE_DECLARACION ::= inicio_var error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Bloque de declaraciones no completo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir fin_var. Tienes "+ s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE_DECLARACION ::= DECLARACIONES Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del bloque de declaraciones."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE_DECLARACION ::= error DECLARACIONES fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_var."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUE_CODIGO ::= inicio_bloque fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO vacío correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOQUE_CODIGO ::= inicio_bloque SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO correcto\n");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOQUE_CODIGO ::= error SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del bloque de código"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOQUE_CODIGO ::= Identificador SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribiste mal inicio_bloque. Tienes: " + s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOQUE_CODIGO ::= error fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error al identificar el bloque de código " + sright));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOQUE_CODIGO ::= error fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error al identificar el bloque de código " + sright));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONES ::= DECLARACIONES DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONES ::= DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONES ::= DECLARACIONES DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONES ::= DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONES ::= error fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Declaración no válida."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONES ::= DECLARACIONES error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Declaración no válida."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= definir Identificador como TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un "  + td.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= definir Identificador como TIPO_DATO_DEC error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Identificador Identificador como TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"definir\" "));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= definir Identificador Identificador TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\" "));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= definir Identificador TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar la palabra \"como\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= definir Identificador como PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el tipo de dato."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_ARREGLO ::= definir Identificador como arreglo Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arreglo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_ARREGLO ::= definir Identificador como arreglo Cor_a Numero Cor_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_ARREGLO ::= definir Identificador como arreglo Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó abrir el corchete para el arreglo."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_ARREGLO ::= definir Identificador como arreglo Cor_a Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó agregar el tamaño  del arreglo."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_ARREGLO ::= definir Identificador como arreglo Cor_a Numero PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó cerrar el corchete del arreglo."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_ARREGLO ::= definir Identificador como arregloBi Cor_a Numero Cor_c Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arregloBi");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_ARREGLO ::= definir Identificador como arregloBi Cor_a Numero Cor_c Cor_a Numero Cor_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_ARREGLO ::= definir Identificador como arregloBi Numero Cor_c Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó abrir el corchete del primer tamaño del arreglo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_ARREGLO ::= definir Identificador como arregloBi Cor_a Cor_c Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner el primer tamaño del arreglo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_ARREGLO ::= definir Identificador como arregloBi Cor_a Numero Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó cerrar el corchete del primer tamaño del arreglo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_ARREGLO ::= definir Identificador como arregloBi Cor_a Numero Cor_c Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó abrir el corchete del segundo tamaño del arreglo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_ARREGLO ::= definir Identificador como arregloBi Cor_a Numero Cor_c Cor_a Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner el segundo tamaño del arreglo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_ARREGLO ::= definir Identificador como arregloBi Cor_a Numero Cor_c Cor_a Numero PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó cerrar el corchete segundo tamaño del arreglo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un " + td.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s Identificador PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un " + td.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_A ::= definir Identificador Identificador TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_A ::= Identificador Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"definir\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_A ::= definir como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el nombre del identificador."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_A ::= definir Identificador TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar la palabra \"como\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_A ::= definir Identificador como Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el tipo de dato."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el signo =."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION ::= Identificador Asignacion_s Texto 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION ::= Identificador Asignacion_s verdadero 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION ::= Identificador Asignacion_s falso 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= Identificador Asignacion_s EXPRESION 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION ::= Identificador Asignacion_s 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el valor a asignar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION ::= Identificador Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo ="));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION ::= Identificador verdadero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo ="));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION ::= Identificador falso 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo ="));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= Identificador EXPRESION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo ="));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION ::= Identificador Asignacion_s error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo determinar el valor a asignar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TERMINO ::= TERMINO Mul FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TERMINO ::= TERMINO Div FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FACTOR ::= Par_a EXPRESION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FACTOR ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALOR_BOOL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_BOOL",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALOR_BOOL ::= verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_BOOL",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALOR_BOOL ::= falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_BOOL",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALOR_BOOL ::= Identificador PUNTO estado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_BOOL",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICION ::= Identificador OP_REL TIPO_VALOR_DEC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= TIPO_VALOR_DEC OP_REL Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= TIPO_VALOR_DEC OP_REL TIPO_VALOR_DEC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= TIPO_VALOR_DEC TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se necesita un operador relacional."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= Identificador TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se necesita un operador relacional."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICION ::= VALOR_BOOL OP_LOGICO VALOR_BOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICION ::= VALOR_BOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_REL ::= Mayor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_REL ::= Menor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP_REL ::= Diferente 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP_REL ::= Mayor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP_REL ::= Menor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP_REL ::= Igual 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DIRECCION ::= izquierda 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DIRECCION ::= derecha 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FACIL_SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FACIL_SENTENCIA ::= METODO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // METODO ::= incrementar Identificador 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un incremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // METODO ::= decrementar Identificador 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un decremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // METODO ::= MOSTRAR_TEXTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // METODO ::= MANIPULAR_COMPONENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MOSTRAR_TEXTO ::= mostrar PARAMETRO_TEXTO 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado mostrar texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MOSTRAR_TEXTO ::= mostrar error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al identificar el texto dado"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender 
            {
              Object RESULT =null;
		System.out.println("Encontrado prender");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MANIPULAR_COMPONENTE ::= Identificador PUNTO apagar 
            {
              Object RESULT =null;
		System.out.println("Encontrado apagar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a PINES Par_c 
            {
              Object RESULT =null;
		System.out.println("Encontrado asignar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar PINES Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó abrir el paréntesis."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó ingresar la lista de pines."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a PINES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó cerrar el paréntesis."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a error Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Lista de pines no válida."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender PUNTO COLOR 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado prender color");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MANIPULAR_COMPONENTE ::= Identificador PUNTO detener 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado detener motor");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar direccion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a TIEMPO Par_c 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar con tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito el valor de tiempo. Recuerda que es un numero entero y ya sea seg, hr o min."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a TEXTO Par_c 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado visualizar display");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a error Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo identificar el texto a visualizar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MANIPULAR_COMPONENTE ::= Identificador PUNTO error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrita la función del componente."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TIEMPO ::= Tiempo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TIEMPO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TEXTO ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA ::= SENTENCIA METODO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA ::= METODO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA ::= SENTENCIA ASIGNACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA ::= ASIGNACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA ::= SENTENCIA DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA ::= DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA ::= SENTENCIA SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA ::= SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA ::= SENTENCIA SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA ::= SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA ::= SENTENCIA SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA ::= SENTENCIA SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIA ::= SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIA ::= SENTENCIA SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA ::= SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala."));System.out.println("Error recuperado por ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA ::= error fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala."));System.out.println("Error recuperado por fin_bloque");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA ::= error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala."));System.out.println("Error recuperado por }");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DECISION ::= SENTENCIA_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECISION ::= SENTENCIA_FACIL_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECISION ::= SENTENCIA_FACIL_SINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA_SI ::= si Par_a error Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIA_SI ::= si CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA_SI ::= si Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_SI ::= si Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis de la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_SI ::= si Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque si"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_SI ::= si Par_a error Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"sino\""));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque sino"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado FACIL SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_FACIL_SI ::= Identificador Par_a CONDICION COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribiste mal la sentencia. Tienes: " + s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_FACIL_SI ::= facil_si CONDICION COMA FACIL_SENTENCIA PUNTO_COMA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis del bloque facil_si"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_FACIL_SI ::= facil_si Par_a COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la coma que separa la condición de la instrucción"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la instrucción a ejecutar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó cerrar el paréntesis del bloque fácil_si"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIA_FACIL_SI ::= facil_si Par_a error COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al estructurar la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ser una sola sentencia"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		System.out.println("Se ha encontrado FACIL SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el ; en el facil_sino"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTENCIA_FACIL_SINO ::= facil_sino CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te saltaste la coma que separa la condición de la instrucción"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la instrucción a realizar cuando sea verdadero"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la coma que separa las instrucciones"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la instrucción a realizar cuando sea falso"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó cerrar el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al estructurar la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA error COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ser una sola sentencia"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ser una sola sentencia"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces Lla_a Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTENCIA_REPETIR ::= Identificador PARAMETRO_ENTERO veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"repetir\". Tienes "+s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCIA_REPETIR ::= repetir veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el número entero de repeticiones"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"veces\""));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO Identificador Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"veces\". Tienes: " +s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque repetir"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTENCIA_REPETIR ::= repetir error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia repetir esta incompleta"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		System.out.println("Se ha encontrado FACIL REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO COMA FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo determinar el contenido del paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SENTENCIA_FACIL_REPETIR ::= facil_repetir PARAMETRO_ENTERO COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque facil_repetir"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el número de repeticiones"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO error FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te saltaste una coma"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la instrucción a repetir"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La instrución esta vacía"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTENCIA_FACIL_REPETIR ::= facil_repetir error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de la sentencia facil_repetir, popr favor revisalo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado MIENTRAS");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado MIENTRAS");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SENTENCIA_MIENTRAS ::= mientras CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SENTENCIA_MIENTRAS ::= mientras Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condicion"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque mientras"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SENTENCIA_MIENTRAS ::= mientras error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintaxis del ciclo mientras, por favor revisalo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado PARA");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SENTENCIA_PARA ::= para Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SENTENCIA_PARA ::= para Par_a Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner un nuevo identificador"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SENTENCIA_PARA ::= para Par_a Identificador Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el signo = "));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el valor de la variable"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SENTENCIA_PARA ::= para Par_a COMA incrementar Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner ya sea \"incrementar\" o \"decrementar\""));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner una coma entre el incremento y la condicion"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // SENTENCIA_PARA ::= para Par_a error COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la declaración del contador"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA error COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura del incremento/decremento"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA error Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura de la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SENTENCIA_PARA ::= para Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La función para esta sin atributos"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SENTENCIA_PARA ::= para Par_a Par_c error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis del contenido de la función para."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque para"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner las sentencias del bloque para"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SELECTOR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // SENTENCIA_SELECTOR ::= selector Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la sentencia selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // SENTENCIA_SELECTOR ::= selector Par_a Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el identificador en el selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // SENTENCIA_SELECTOR ::= selector error Identificador Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis en el selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // SENTENCIA_SELECTOR ::= selector Par_a error Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ir un identificador en el atributo de selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta agregar los casos"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // BLOQUE_SELECTOR ::= caso Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // BLOQUE_SELECTOR ::= caso Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // BLOQUE_SELECTOR ::= caso verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // BLOQUE_SELECTOR ::= caso falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // BLOQUE_SELECTOR ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector."));
        System.out.println("Error en casos del selector, punto coma en " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // BLOQUE_SELECTOR ::= error caso 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector."));
        System.out.println("Error en casos del selector, ir al caso en línea " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // BLOQUE_SELECTOR ::= error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector."));
        System.out.println("Error en casos del selector, ir a llave en la línea " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // PARAMETRO_ENTERO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_ENTERO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // PARAMETRO_ENTERO ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_ENTERO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // PARAMETRO_TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_TEXTO",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // PARAMETRO_TEXTO ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_TEXTO",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // INC_DEC ::= incrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // INC_DEC ::= decrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TIPO_DATO_DEC ::= entero 
            {
              Object RESULT =null;
		RESULT = "entero";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TIPO_DATO_DEC ::= decimal 
            {
              Object RESULT =null;
		RESULT = "decimal";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TIPO_DATO_DEC ::= logico 
            {
              Object RESULT =null;
		RESULT = "logico";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // TIPO_DATO_DEC ::= texto 
            {
              Object RESULT =null;
		RESULT = "texto";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TIPO_DATO_DEC ::= display 
            {
              Object RESULT =null;
		RESULT = "display";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TIPO_DATO_DEC ::= motor 
            {
              Object RESULT =null;
		RESULT = "motor";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TIPO_DATO_DEC ::= led 
            {
              Object RESULT =null;
		RESULT = "led";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TIPO_DATO_DEC ::= ledRGB 
            {
              Object RESULT =null;
		RESULT = "ledRGB";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // TIPO_DATO_DEC ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Tipo de dato no válido."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // TIPO_VALOR_DEC ::= Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // TIPO_VALOR_DEC ::= Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT =s ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // TIPO_VALOR_DEC ::= Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // TIPO_VALOR_DEC ::= VALOR_LOGICO_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // TIPO_VALOR_DEC ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se esperaba un valor."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // VALOR_LOGICO_DEC ::= verdadero 
            {
              Object RESULT =null;
		RESULT = "verdadero";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO_DEC",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // VALOR_LOGICO_DEC ::= falso 
            {
              Object RESULT =null;
		RESULT = "falso";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO_DEC",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // OP_LOGICO ::= y 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // OP_LOGICO ::= o 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
