
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package aux_tools.sintactico;

import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\372\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\002\005\000\002\002\004\000\002\002\003" +
    "\000\002\055\004\000\002\055\004\000\002\055\004\000" +
    "\002\003\004\000\002\003\005\000\002\003\006\000\002" +
    "\003\005\000\002\003\003\000\002\004\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\007\007\000\002\007\007\000\002\007\006\000\002\007" +
    "\007\000\002\007\006\000\002\007\006\000\002\057\012" +
    "\000\002\057\021\000\002\010\011\000\002\010\010\000" +
    "\002\010\011\000\002\010\011\000\002\010\010\000\002" +
    "\010\010\000\002\010\010\000\002\010\010\000\002\010" +
    "\011\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\006\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\024\003\000\002\024\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\004\000\002\030\004\000\002" +
    "\030\003\000\002\030\003\000\002\031\004\000\002\031" +
    "\004\000\002\060\005\000\002\060\005\000\002\060\007" +
    "\000\002\060\005\000\002\060\007\000\002\060\012\000" +
    "\002\060\013\000\002\060\010\000\002\060\010\000\002" +
    "\060\006\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\005\000\002\035\004\000" +
    "\002\035\004\000\002\035\003\000\002\035\005\000\002" +
    "\035\004\000\002\035\004\000\002\035\003\000\002\035" +
    "\004\000\002\035\003\000\002\035\004\000\002\035\003" +
    "\000\002\035\004\000\002\035\003\000\002\035\004\000" +
    "\002\035\003\000\002\035\004\000\002\035\003\000\002" +
    "\035\004\000\002\035\003\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\050\011\000\002\050\011\000" +
    "\002\050\010\000\002\050\010\000\002\050\010\000\002" +
    "\050\010\000\002\050\015\000\002\050\015\000\002\050" +
    "\014\000\002\050\014\000\002\051\011\000\002\051\011" +
    "\000\002\051\007\000\002\051\010\000\002\051\010\000" +
    "\002\051\010\000\002\051\010\000\002\051\010\000\002" +
    "\051\011\000\002\051\011\000\002\056\013\000\002\056" +
    "\012\000\002\056\012\000\002\056\012\000\002\056\012" +
    "\000\002\056\012\000\002\056\012\000\002\056\012\000" +
    "\002\056\012\000\002\056\012\000\002\056\012\000\002" +
    "\056\012\000\002\040\010\000\002\040\007\000\002\040" +
    "\007\000\002\040\007\000\002\040\007\000\002\040\007" +
    "\000\002\042\011\000\002\042\010\000\002\042\007\000" +
    "\002\042\010\000\002\042\010\000\002\042\011\000\002" +
    "\042\010\000\002\042\006\000\002\042\006\000\002\043" +
    "\011\000\002\043\010\000\002\043\010\000\002\043\010" +
    "\000\002\043\010\000\002\043\010\000\002\043\005\000" +
    "\002\044\020\000\002\044\017\000\002\044\017\000\002" +
    "\044\017\000\002\044\017\000\002\044\015\000\002\044" +
    "\017\000\002\044\017\000\002\044\017\000\002\044\016" +
    "\000\002\044\017\000\002\044\020\000\002\044\010\000" +
    "\002\044\011\000\002\044\017\000\002\044\017\000\002" +
    "\045\011\000\002\045\010\000\002\045\010\000\002\045" +
    "\010\000\002\045\011\000\002\045\010\000\002\045\010" +
    "\000\002\054\011\000\002\054\010\000\002\054\011\000" +
    "\002\054\010\000\002\054\011\000\002\054\010\000\002" +
    "\054\011\000\002\054\010\000\002\054\004\000\002\054" +
    "\004\000\002\054\004\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\053\003\000" +
    "\002\053\003\000\002\052\003\000\002\052\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\011\003\000\002\011\003\000\002\041\003\000\002\041" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0282\000\006\003\004\035\005\001\002\000\012\002" +
    "\ufffc\003\004\035\005\075\u0283\001\002\000\006\003\u0281" +
    "\075\u0282\001\002\000\010\003\011\036\012\075\014\001" +
    "\002\000\004\002\010\001\002\000\004\002\001\001\002" +
    "\000\006\003\ufff4\010\ufff4\001\002\000\012\003\020\013" +
    "\021\027\u027d\075\023\001\002\000\006\003\142\010\143" +
    "\001\002\000\010\003\020\013\021\075\023\001\002\000" +
    "\010\013\021\027\137\075\023\001\002\000\012\003\uffeb" +
    "\013\uffeb\027\uffeb\075\uffeb\001\002\000\012\003\uffef\013" +
    "\uffef\027\uffef\075\uffef\001\002\000\006\027\133\077\134" +
    "\001\002\000\006\012\052\075\053\001\002\000\012\003" +
    "\uffed\013\uffed\027\uffed\075\uffed\001\002\000\004\075\024" +
    "\001\002\000\004\012\025\001\002\000\024\003\036\015" +
    "\035\041\037\042\033\046\027\064\031\065\034\066\032" +
    "\067\026\001\002\000\030\003\uff16\004\uff16\005\uff16\006" +
    "\uff16\013\uff16\025\uff16\027\uff16\062\uff16\075\uff16\077\uff16" +
    "\110\uff16\001\002\000\030\003\uff13\004\uff13\005\uff13\006" +
    "\uff13\013\uff13\025\uff13\027\uff13\062\uff13\075\uff13\077\uff13" +
    "\110\uff13\001\002\000\006\077\040\110\041\001\002\000" +
    "\030\003\uff17\004\uff17\005\uff17\006\uff17\013\uff17\025\uff17" +
    "\027\uff17\062\uff17\075\uff17\077\uff17\110\uff17\001\002\000" +
    "\030\003\uff15\004\uff15\005\uff15\006\uff15\013\uff15\025\uff15" +
    "\027\uff15\062\uff15\075\uff15\077\uff15\110\uff15\001\002\000" +
    "\030\003\uff11\004\uff11\005\uff11\006\uff11\013\uff11\025\uff11" +
    "\027\uff11\062\uff11\075\uff11\077\uff11\110\uff11\001\002\000" +
    "\030\003\uff18\004\uff18\005\uff18\006\uff18\013\uff18\025\uff18" +
    "\027\uff18\062\uff18\075\uff18\077\uff18\110\uff18\001\002\000" +
    "\030\003\uff14\004\uff14\005\uff14\006\uff14\013\uff14\025\uff14" +
    "\027\uff14\062\uff14\075\uff14\077\uff14\110\uff14\001\002\000" +
    "\030\003\uff10\004\uff10\005\uff10\006\uff10\013\uff10\025\uff10" +
    "\027\uff10\062\uff10\075\uff10\077\uff10\110\uff10\001\002\000" +
    "\030\003\uff12\004\uff12\005\uff12\006\uff12\013\uff12\025\uff12" +
    "\027\uff12\062\uff12\075\uff12\077\uff12\110\uff12\001\002\000" +
    "\012\003\uffe7\013\uffe7\027\uffe7\075\uffe7\001\002\000\014" +
    "\004\042\005\050\006\045\025\047\062\043\001\002\000" +
    "\014\003\uff0f\013\uff0f\027\uff0f\075\uff0f\077\uff0f\001\002" +
    "\000\014\003\uff0b\013\uff0b\027\uff0b\075\uff0b\077\uff0b\001" +
    "\002\000\004\077\051\001\002\000\014\003\uff0d\013\uff0d" +
    "\027\uff0d\075\uff0d\077\uff0d\001\002\000\014\003\uff0c\013" +
    "\uff0c\027\uff0c\075\uff0c\077\uff0c\001\002\000\014\003\uff0a" +
    "\013\uff0a\027\uff0a\075\uff0a\077\uff0a\001\002\000\014\003" +
    "\uff0e\013\uff0e\027\uff0e\075\uff0e\077\uff0e\001\002\000\012" +
    "\003\uffdd\013\uffdd\027\uffdd\075\uffdd\001\002\000\026\003" +
    "\036\015\035\041\037\042\033\046\027\064\031\065\034" +
    "\066\032\067\026\136\113\001\002\000\030\003\036\012" +
    "\055\015\035\041\037\042\033\046\027\064\031\065\034" +
    "\066\032\067\026\075\056\001\002\000\006\077\106\110" +
    "\107\001\002\000\032\003\036\015\035\041\037\042\033" +
    "\046\027\064\031\065\034\066\032\067\026\077\066\110" +
    "\064\136\067\001\002\000\024\003\036\015\035\041\037" +
    "\042\033\046\027\064\031\065\034\066\032\067\026\001" +
    "\002\000\006\077\060\110\061\001\002\000\012\003\uffe5" +
    "\013\uffe5\027\uffe5\075\uffe5\001\002\000\014\004\042\005" +
    "\050\006\045\025\047\062\043\001\002\000\004\077\063" +
    "\001\002\000\012\003\uffde\013\uffde\027\uffde\075\uffde\001" +
    "\002\000\014\004\042\005\050\006\045\025\047\062\043" +
    "\001\002\000\030\003\uffe6\004\042\005\050\006\045\013" +
    "\uffe6\025\047\027\uffe6\062\043\075\uffe6\077\076\110\075" +
    "\001\002\000\012\003\uffe3\013\uffe3\027\uffe3\075\uffe3\001" +
    "\002\000\004\105\070\001\002\000\004\004\071\001\002" +
    "\000\004\106\072\001\002\000\004\077\073\001\002\000" +
    "\012\003\uffe2\013\uffe2\027\uffe2\075\uffe2\001\002\000\004" +
    "\077\103\001\002\000\016\003\077\004\042\005\050\006" +
    "\045\025\047\062\043\001\002\000\012\003\uffe8\013\uffe8" +
    "\027\uffe8\075\uffe8\001\002\000\004\077\102\001\002\000" +
    "\014\003\uffdf\013\uffdf\027\uffdf\075\uffdf\077\101\001\002" +
    "\000\012\003\uffe0\013\uffe0\027\uffe0\075\uffe0\001\002\000" +
    "\012\003\uffd8\013\uffd8\027\uffd8\075\uffd8\001\002\000\012" +
    "\003\uffd9\013\uffd9\027\uffd9\075\uffd9\001\002\000\004\077" +
    "\105\001\002\000\012\003\uffda\013\uffda\027\uffda\075\uffda" +
    "\001\002\000\012\003\uffe4\013\uffe4\027\uffe4\075\uffe4\001" +
    "\002\000\014\004\042\005\050\006\045\025\047\062\043" +
    "\001\002\000\004\077\111\001\002\000\012\003\uffdb\013" +
    "\uffdb\027\uffdb\075\uffdb\001\002\000\004\110\130\001\002" +
    "\000\004\105\114\001\002\000\004\013\115\001\002\000" +
    "\004\075\116\001\002\000\004\012\117\001\002\000\004" +
    "\137\120\001\002\000\004\105\121\001\002\000\004\004" +
    "\122\001\002\000\004\106\123\001\002\000\004\105\124" +
    "\001\002\000\004\004\125\001\002\000\004\106\126\001" +
    "\002\000\004\077\127\001\002\000\012\003\uffe1\013\uffe1" +
    "\027\uffe1\075\uffe1\001\002\000\014\004\042\005\050\006" +
    "\045\025\047\062\043\001\002\000\004\077\132\001\002" +
    "\000\012\003\uffdc\013\uffdc\027\uffdc\075\uffdc\001\002\000" +
    "\012\003\uffe9\013\uffe9\027\uffe9\075\uffe9\001\002\000\012" +
    "\003\uffea\013\uffea\027\uffea\075\uffea\001\002\000\012\003" +
    "\uffec\013\uffec\027\uffec\075\uffec\001\002\000\012\003\ufff0" +
    "\013\ufff0\027\ufff0\075\ufff0\001\002\000\006\003\ufff5\010" +
    "\ufff5\001\002\000\012\003\uffee\013\uffee\027\uffee\075\uffee" +
    "\001\002\000\006\002\ufffe\026\u027b\001\002\000\012\002" +
    "\ufff1\003\u0279\010\143\026\ufff1\001\002\000\036\003\170" +
    "\021\174\023\164\024\165\043\151\045\177\052\146\055" +
    "\171\056\175\063\154\073\162\074\176\075\156\127\145" +
    "\001\002\000\040\021\uff89\023\uff89\024\uff89\043\uff89\045" +
    "\uff89\052\uff89\053\uff89\055\uff89\056\uff89\063\uff89\073\uff89" +
    "\074\uff89\075\uff89\104\uff89\127\uff89\001\002\000\006\075" +
    "\u020a\101\u0209\001\002\000\012\003\u01f6\004\357\061\u01f7" +
    "\075\363\001\002\000\040\021\uff79\023\uff79\024\uff79\043" +
    "\uff79\045\uff79\052\uff79\053\uff79\055\uff79\056\uff79\063\uff79" +
    "\073\uff79\074\uff79\075\uff79\104\uff79\127\uff79\001\002\000" +
    "\034\021\174\023\164\024\165\043\151\045\177\052\146" +
    "\055\171\056\175\063\u01f5\073\162\074\176\075\156\127" +
    "\145\001\002\000\024\003\u01df\004\220\005\205\006\206" +
    "\025\215\062\214\071\222\075\216\101\u01de\001\002\000" +
    "\040\021\uff85\023\uff85\024\uff85\043\uff85\045\uff85\052\uff85" +
    "\053\uff85\055\uff85\056\uff85\063\uff85\073\uff85\074\uff85\075" +
    "\uff85\104\uff85\127\uff85\001\002\000\040\021\uff83\023\uff83" +
    "\024\uff83\043\uff83\045\uff83\052\uff83\053\uff83\055\uff83\056" +
    "\uff83\063\uff83\073\uff83\074\uff83\075\uff83\104\uff83\127\uff83" +
    "\001\002\000\006\002\ufff3\026\ufff3\001\002\000\040\021" +
    "\uff7a\023\uff7a\024\uff7a\043\uff7a\045\uff7a\052\uff7a\053\uff7a" +
    "\055\uff7a\056\uff7a\063\uff7a\073\uff7a\074\uff7a\075\uff7a\104" +
    "\uff7a\127\uff7a\001\002\000\024\004\263\005\261\006\374" +
    "\025\376\062\377\075\275\101\u01d8\110\375\124\373\001" +
    "\002\000\040\021\uff87\023\uff87\024\uff87\043\uff87\045\uff87" +
    "\052\uff87\053\uff87\055\uff87\056\uff87\063\uff87\073\uff87\074" +
    "\uff87\075\uff87\104\uff87\127\uff87\001\002\000\042\021\uff8f" +
    "\023\uff8f\024\uff8f\043\uff8f\045\uff8f\052\uff8f\053\uff8f\055" +
    "\uff8f\056\uff8f\063\uff8f\073\uff8f\074\uff8f\075\uff8f\077\u01d7" +
    "\104\uff8f\127\uff8f\001\002\000\042\021\uff8b\023\uff8b\024" +
    "\uff8b\043\uff8b\045\uff8b\052\uff8b\053\uff8b\055\uff8b\056\uff8b" +
    "\063\uff8b\073\uff8b\074\uff8b\075\uff8b\077\u01d6\104\uff8b\127" +
    "\uff8b\001\002\000\004\075\u01d5\001\002\000\040\021\uff81" +
    "\023\uff81\024\uff81\043\uff81\045\uff81\052\uff81\053\uff81\055" +
    "\uff81\056\uff81\063\uff81\073\uff81\074\uff81\075\uff81\104\uff81" +
    "\127\uff81\001\002\000\022\004\220\005\205\006\206\025" +
    "\215\062\214\071\222\075\216\101\u01b8\001\002\000\022" +
    "\004\220\005\205\006\206\025\215\062\214\071\222\075" +
    "\216\101\u0188\001\002\000\046\021\uffa6\023\uffa6\024\uffa6" +
    "\043\uffa6\045\uffa6\052\uffa6\053\uffa6\055\uffa6\056\uffa6\063" +
    "\uffa6\073\uffa6\074\uffa6\075\uffa6\077\uffa6\102\uffa6\104\uffa6" +
    "\125\uffa6\127\uffa6\001\002\000\040\021\uff7b\023\uff7b\024" +
    "\uff7b\043\uff7b\045\uff7b\052\uff7b\053\uff7b\055\uff7b\056\uff7b" +
    "\063\uff7b\073\uff7b\074\uff7b\075\uff7b\104\uff7b\127\uff7b\001" +
    "\002\000\010\063\u0186\077\u0185\104\u0187\001\002\000\010" +
    "\003\u013c\075\u013d\101\u013b\001\002\000\046\021\uffa7\023" +
    "\uffa7\024\uffa7\043\uffa7\045\uffa7\052\uffa7\053\uffa7\055\uffa7" +
    "\056\uffa7\063\uffa7\073\uffa7\074\uffa7\075\uffa7\077\uffa7\102" +
    "\uffa7\104\uffa7\125\uffa7\127\uffa7\001\002\000\040\021\uff7f" +
    "\023\uff7f\024\uff7f\043\uff7f\045\uff7f\052\uff7f\053\uff7f\055" +
    "\uff7f\056\uff7f\063\uff7f\073\uff7f\074\uff7f\075\uff7f\104\uff7f" +
    "\127\uff7f\001\002\000\012\003\361\004\357\075\363\101" +
    "\360\001\002\000\022\004\220\005\205\006\206\025\215" +
    "\062\214\071\222\075\216\101\207\001\002\000\004\075" +
    "\204\001\002\000\010\003\200\006\201\075\202\001\002" +
    "\000\046\021\uffa4\023\uffa4\024\uffa4\043\uffa4\045\uffa4\052" +
    "\uffa4\053\uffa4\055\uffa4\056\uffa4\063\uffa4\073\uffa4\074\uffa4" +
    "\075\uffa4\077\uffa4\102\uffa4\104\uffa4\125\uffa4\127\uffa4\001" +
    "\002\000\046\021\uff1b\023\uff1b\024\uff1b\043\uff1b\045\uff1b" +
    "\052\uff1b\053\uff1b\055\uff1b\056\uff1b\063\uff1b\073\uff1b\074" +
    "\uff1b\075\uff1b\077\uff1b\102\uff1b\104\uff1b\125\uff1b\127\uff1b" +
    "\001\002\000\046\021\uff1c\023\uff1c\024\uff1c\043\uff1c\045" +
    "\uff1c\052\uff1c\053\uff1c\055\uff1c\056\uff1c\063\uff1c\073\uff1c" +
    "\074\uff1c\075\uff1c\077\uff1c\102\uff1c\104\uff1c\125\uff1c\127" +
    "\uff1c\001\002\000\046\021\uffa5\023\uffa5\024\uffa5\043\uffa5" +
    "\045\uffa5\052\uffa5\053\uffa5\055\uffa5\056\uffa5\063\uffa5\073" +
    "\uffa5\074\uffa5\075\uffa5\077\uffa5\102\uffa5\104\uffa5\125\uffa5" +
    "\127\uffa5\001\002\000\046\021\uffa8\023\uffa8\024\uffa8\043" +
    "\uffa8\045\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8\063\uffa8" +
    "\073\uffa8\074\uffa8\075\uffa8\077\uffa8\102\uffa8\104\uffa8\125" +
    "\uffa8\127\uffa8\001\002\000\050\045\uffc5\070\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\102\uffc5\103\uffc5\107\257\111" +
    "\uffc5\112\uffc5\113\uffc5\114\uffc5\115\253\116\256\117\260" +
    "\120\252\121\254\125\uffc5\001\002\000\016\107\257\115" +
    "\253\116\256\117\260\120\252\121\254\001\002\000\026" +
    "\003\314\004\220\005\205\006\206\025\215\062\214\071" +
    "\222\075\216\101\243\102\313\001\002\000\040\045\uffba" +
    "\070\uffba\072\uffba\073\uffba\074\uffba\075\uffba\102\uffba\103" +
    "\uffba\107\uffba\115\uffba\116\uffba\117\uffba\120\uffba\121\uffba" +
    "\125\uffba\001\002\000\040\045\uffc0\070\255\072\250\073" +
    "\uffc0\074\uffc0\075\uffc0\102\uffc0\103\uffc0\107\257\115\253" +
    "\116\256\117\260\120\252\121\254\125\uffc0\001\002\000" +
    "\100\021\uffc8\023\uffc8\024\uffc8\043\uffc8\045\uffc8\052\uffc8" +
    "\053\uffc8\055\uffc8\056\uffc8\063\uffc8\070\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\077\uffc8\102\uffc8\103\uffc8\104\uffc8" +
    "\107\uffc8\111\uffc8\112\uffc8\113\uffc8\114\uffc8\115\uffc8\116" +
    "\uffc8\117\uffc8\120\uffc8\121\uffc8\125\uffc8\127\uffc8\001\002" +
    "\000\024\045\uffc2\070\245\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\102\uffc2\103\uffc2\125\uffc2\001\002\000\040\045\uffb9" +
    "\070\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\102\uffb9\103" +
    "\uffb9\107\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9" +
    "\125\uffb9\001\002\000\040\045\uffb8\070\uffb8\072\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\102\uffb8\103\uffb8\107\uffb8\115\uffb8" +
    "\116\uffb8\117\uffb8\120\uffb8\121\uffb8\125\uffb8\001\002\000" +
    "\052\045\uffc4\070\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4" +
    "\102\uffc4\103\uffc4\107\uffc4\111\uffc4\112\uffc4\113\uffc4\114" +
    "\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121\uffc4\124\311" +
    "\125\uffc4\001\002\000\100\021\uffcb\023\uffcb\024\uffcb\043" +
    "\uffcb\045\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\063\uffcb" +
    "\070\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\077\uffcb\102" +
    "\uffcb\103\uffcb\104\uffcb\107\uffcb\111\uffcb\112\uffcb\113\276" +
    "\114\277\115\uffcb\116\uffcb\117\uffcb\120\uffcb\121\uffcb\125" +
    "\uffcb\127\uffcb\001\002\000\050\045\uffc6\070\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\102\uffc6\103\uffc6\107\257\111" +
    "\uffc6\112\uffc6\113\uffc6\114\uffc6\115\253\116\256\117\260" +
    "\120\252\121\254\125\uffc6\001\002\000\044\045\uffb7\070" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\102\uffb7\103\uffb7" +
    "\107\uffb7\111\271\112\270\115\uffb7\116\uffb7\117\uffb7\120" +
    "\uffb7\121\uffb7\125\uffb7\001\002\000\004\101\304\001\002" +
    "\000\006\072\224\102\225\001\002\000\022\004\220\005" +
    "\205\006\206\025\215\062\214\071\222\075\216\101\243" +
    "\001\002\000\004\103\226\001\002\000\034\003\170\021" +
    "\174\023\164\024\165\043\151\045\177\052\146\055\171" +
    "\056\175\073\162\074\176\075\156\127\145\001\002\000" +
    "\034\021\174\023\164\024\165\043\151\045\177\052\146" +
    "\055\171\056\175\073\162\074\176\075\156\104\240\127" +
    "\145\001\002\000\040\021\uff8a\023\uff8a\024\uff8a\043\uff8a" +
    "\045\uff8a\052\uff8a\053\uff8a\055\uff8a\056\uff8a\063\uff8a\073" +
    "\uff8a\074\uff8a\075\uff8a\104\uff8a\127\uff8a\001\002\000\040" +
    "\021\uff86\023\uff86\024\uff86\043\uff86\045\uff86\052\uff86\053" +
    "\uff86\055\uff86\056\uff86\063\uff86\073\uff86\074\uff86\075\uff86" +
    "\104\uff86\127\uff86\001\002\000\040\021\uff84\023\uff84\024" +
    "\uff84\043\uff84\045\uff84\052\uff84\053\uff84\055\uff84\056\uff84" +
    "\063\uff84\073\uff84\074\uff84\075\uff84\104\uff84\127\uff84\001" +
    "\002\000\040\021\uff88\023\uff88\024\uff88\043\uff88\045\uff88" +
    "\052\uff88\053\uff88\055\uff88\056\uff88\063\uff88\073\uff88\074" +
    "\uff88\075\uff88\104\uff88\127\uff88\001\002\000\042\021\uff90" +
    "\023\uff90\024\uff90\043\uff90\045\uff90\052\uff90\053\uff90\055" +
    "\uff90\056\uff90\063\uff90\073\uff90\074\uff90\075\uff90\077\242" +
    "\104\uff90\127\uff90\001\002\000\042\021\uff8c\023\uff8c\024" +
    "\uff8c\043\uff8c\045\uff8c\052\uff8c\053\uff8c\055\uff8c\056\uff8c" +
    "\063\uff8c\073\uff8c\074\uff8c\075\uff8c\077\241\104\uff8c\127" +
    "\uff8c\001\002\000\040\021\uff82\023\uff82\024\uff82\043\uff82" +
    "\045\uff82\052\uff82\053\uff82\055\uff82\056\uff82\063\uff82\073" +
    "\uff82\074\uff82\075\uff82\104\uff82\127\uff82\001\002\000\040" +
    "\021\uff80\023\uff80\024\uff80\043\uff80\045\uff80\052\uff80\053" +
    "\uff80\055\uff80\056\uff80\063\uff80\073\uff80\074\uff80\075\uff80" +
    "\104\uff80\127\uff80\001\002\000\040\021\uff76\023\uff76\024" +
    "\uff76\043\uff76\045\uff76\052\uff76\053\uff76\055\uff76\056\uff76" +
    "\063\uff76\073\uff76\074\uff76\075\uff76\104\uff76\127\uff76\001" +
    "\002\000\040\021\uff8e\023\uff8e\024\uff8e\043\uff8e\045\uff8e" +
    "\052\uff8e\053\uff8e\055\uff8e\056\uff8e\063\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\104\uff8e\127\uff8e\001\002\000\040\021\uff92" +
    "\023\uff92\024\uff92\043\uff92\045\uff92\052\uff92\053\uff92\055" +
    "\uff92\056\uff92\063\uff92\073\uff92\074\uff92\075\uff92\104\uff92" +
    "\127\uff92\001\002\000\022\004\220\005\205\006\206\025" +
    "\215\062\214\071\222\075\216\101\243\001\002\000\024" +
    "\045\uffc3\070\245\072\uffc3\073\uffc3\074\uffc3\075\uffc3\102" +
    "\uffc3\103\uffc3\125\uffc3\001\002\000\022\004\220\005\205" +
    "\006\206\025\215\062\214\071\222\075\216\101\243\001" +
    "\002\000\040\045\uffc1\070\uffc1\072\uffc1\073\uffc1\074\uffc1" +
    "\075\uffc1\102\uffc1\103\uffc1\107\257\115\253\116\256\117" +
    "\260\120\252\121\254\125\uffc1\001\002\000\020\004\263" +
    "\005\261\025\215\062\214\071\222\075\216\101\243\001" +
    "\002\000\020\004\uff08\005\uff08\025\uff08\062\uff08\071\uff08" +
    "\075\uff08\101\uff08\001\002\000\020\004\263\005\261\025" +
    "\215\062\214\071\222\075\216\101\243\001\002\000\022" +
    "\004\uffb3\005\uffb3\006\uffb3\025\uffb3\062\uffb3\071\uffb3\075" +
    "\uffb3\101\uffb3\001\002\000\022\004\uffaf\005\uffaf\006\uffaf" +
    "\025\uffaf\062\uffaf\071\uffaf\075\uffaf\101\uffaf\001\002\000" +
    "\022\004\uffb2\005\uffb2\006\uffb2\025\uffb2\062\uffb2\071\uffb2" +
    "\075\uffb2\101\uffb2\001\002\000\020\004\uff09\005\uff09\025" +
    "\uff09\062\uff09\071\uff09\075\uff09\101\uff09\001\002\000\022" +
    "\004\uffb0\005\uffb0\006\uffb0\025\uffb0\062\uffb0\071\uffb0\075" +
    "\uffb0\101\uffb0\001\002\000\022\004\uffae\005\uffae\006\uffae" +
    "\025\uffae\062\uffae\071\uffae\075\uffae\101\uffae\001\002\000" +
    "\022\004\uffb1\005\uffb1\006\uffb1\025\uffb1\062\uffb1\071\uffb1" +
    "\075\uffb1\101\uffb1\001\002\000\100\021\uffc5\023\uffc5\024" +
    "\uffc5\043\uffc5\045\uffc5\052\uffc5\053\uffc5\055\uffc5\056\uffc5" +
    "\063\uffc5\070\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\077" +
    "\uffc5\102\uffc5\103\uffc5\104\uffc5\107\uffc5\111\uffc5\112\uffc5" +
    "\113\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121" +
    "\uffc5\125\uffc5\127\uffc5\001\002\000\040\045\uffbf\070\uffbf" +
    "\072\uffbf\073\uffbf\074\uffbf\075\uffbf\102\uffbf\103\uffbf\107" +
    "\uffbf\115\uffbf\116\uffbf\117\uffbf\120\uffbf\121\uffbf\125\uffbf" +
    "\001\002\000\100\021\uffc6\023\uffc6\024\uffc6\043\uffc6\045" +
    "\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\063\uffc6\070\uffc6" +
    "\072\uffc6\073\uffc6\074\uffc6\075\uffc6\077\uffc6\102\uffc6\103" +
    "\uffc6\104\uffc6\107\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6" +
    "\115\uffc6\116\uffc6\117\uffc6\120\uffc6\121\uffc6\125\uffc6\127" +
    "\uffc6\001\002\000\040\045\uffbe\070\uffbe\072\uffbe\073\uffbe" +
    "\074\uffbe\075\uffbe\102\uffbe\103\uffbe\107\uffbe\115\uffbe\116" +
    "\uffbe\117\uffbe\120\uffbe\121\uffbe\125\uffbe\001\002\000\044" +
    "\045\uffb7\070\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\102" +
    "\272\103\uffb7\107\uffb7\111\271\112\270\115\uffb7\116\uffb7" +
    "\117\uffb7\120\uffb7\121\uffb7\125\uffb7\001\002\000\006\072" +
    "\224\102\267\001\002\000\040\045\uffb5\070\uffb5\072\uffb5" +
    "\073\uffb5\074\uffb5\075\uffb5\102\uffb5\103\uffb5\107\uffb5\115" +
    "\uffb5\116\uffb5\117\uffb5\120\uffb5\121\uffb5\125\uffb5\001\002" +
    "\000\012\004\263\005\261\075\275\101\273\001\002\000" +
    "\012\004\263\005\261\075\275\101\273\001\002\000\100" +
    "\021\uffc7\023\uffc7\024\uffc7\043\uffc7\045\uffc7\052\uffc7\053" +
    "\uffc7\055\uffc7\056\uffc7\063\uffc7\070\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\077\uffc7\102\uffc7\103\uffc7\104\uffc7\107" +
    "\uffc7\111\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7" +
    "\117\uffc7\120\uffc7\121\uffc7\125\uffc7\127\uffc7\001\002\000" +
    "\012\004\263\005\261\075\275\101\273\001\002\000\100" +
    "\021\uffcd\023\uffcd\024\uffcd\043\uffcd\045\uffcd\052\uffcd\053" +
    "\uffcd\055\uffcd\056\uffcd\063\uffcd\070\uffcd\072\uffcd\073\uffcd" +
    "\074\uffcd\075\uffcd\077\uffcd\102\uffcd\103\uffcd\104\uffcd\107" +
    "\uffcd\111\uffcd\112\uffcd\113\276\114\277\115\uffcd\116\uffcd" +
    "\117\uffcd\120\uffcd\121\uffcd\125\uffcd\127\uffcd\001\002\000" +
    "\100\021\uffc4\023\uffc4\024\uffc4\043\uffc4\045\uffc4\052\uffc4" +
    "\053\uffc4\055\uffc4\056\uffc4\063\uffc4\070\uffc4\072\uffc4\073" +
    "\uffc4\074\uffc4\075\uffc4\077\uffc4\102\uffc4\103\uffc4\104\uffc4" +
    "\107\uffc4\111\uffc4\112\uffc4\113\uffc4\114\uffc4\115\uffc4\116" +
    "\uffc4\117\uffc4\120\uffc4\121\uffc4\125\uffc4\127\uffc4\001\002" +
    "\000\012\004\263\005\261\075\275\101\273\001\002\000" +
    "\012\004\263\005\261\075\275\101\273\001\002\000\100" +
    "\021\uffc9\023\uffc9\024\uffc9\043\uffc9\045\uffc9\052\uffc9\053" +
    "\uffc9\055\uffc9\056\uffc9\063\uffc9\070\uffc9\072\uffc9\073\uffc9" +
    "\074\uffc9\075\uffc9\077\uffc9\102\uffc9\103\uffc9\104\uffc9\107" +
    "\uffc9\111\uffc9\112\uffc9\113\uffc9\114\uffc9\115\uffc9\116\uffc9" +
    "\117\uffc9\120\uffc9\121\uffc9\125\uffc9\127\uffc9\001\002\000" +
    "\100\021\uffca\023\uffca\024\uffca\043\uffca\045\uffca\052\uffca" +
    "\053\uffca\055\uffca\056\uffca\063\uffca\070\uffca\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\077\uffca\102\uffca\103\uffca\104\uffca" +
    "\107\uffca\111\uffca\112\uffca\113\uffca\114\uffca\115\uffca\116" +
    "\uffca\117\uffca\120\uffca\121\uffca\125\uffca\127\uffca\001\002" +
    "\000\010\102\272\111\271\112\270\001\002\000\100\021" +
    "\uffcc\023\uffcc\024\uffcc\043\uffcc\045\uffcc\052\uffcc\053\uffcc" +
    "\055\uffcc\056\uffcc\063\uffcc\070\uffcc\072\uffcc\073\uffcc\074" +
    "\uffcc\075\uffcc\077\uffcc\102\uffcc\103\uffcc\104\uffcc\107\uffcc" +
    "\111\uffcc\112\uffcc\113\276\114\277\115\uffcc\116\uffcc\117" +
    "\uffcc\120\uffcc\121\uffcc\125\uffcc\127\uffcc\001\002\000\022" +
    "\004\220\005\205\006\206\025\215\062\214\071\222\075" +
    "\216\101\243\001\002\000\006\072\224\102\306\001\002" +
    "\000\040\045\uffb4\070\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\102\uffb4\103\uffb4\107\uffb4\115\uffb4\116\uffb4\117\uffb4" +
    "\120\uffb4\121\uffb4\125\uffb4\001\002\000\022\004\220\005" +
    "\205\006\206\025\215\062\214\071\222\075\216\101\243" +
    "\001\002\000\040\045\uffbb\070\255\072\250\073\uffbb\074" +
    "\uffbb\075\uffbb\102\uffbb\103\uffbb\107\257\115\253\116\256" +
    "\117\260\120\252\121\254\125\uffbb\001\002\000\004\132" +
    "\312\001\002\000\040\045\uffb6\070\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\102\uffb6\103\uffb6\107\uffb6\115\uffb6\116" +
    "\uffb6\117\uffb6\120\uffb6\121\uffb6\125\uffb6\001\002\000\004" +
    "\103\350\001\002\000\004\102\340\001\002\000\010\072" +
    "\224\102\317\103\316\001\002\000\034\003\170\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\055\171\056" +
    "\175\073\162\074\176\075\156\127\145\001\002\000\060" +
    "\003\170\021\174\023\164\024\165\043\151\045\177\052" +
    "\146\055\171\056\175\070\uffb5\072\uffb5\073\162\074\176" +
    "\075\156\102\uffb5\103\321\107\uffb5\115\uffb5\116\uffb5\117" +
    "\uffb5\120\uffb5\121\uffb5\127\145\001\002\000\034\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\055\171\056" +
    "\175\073\162\074\176\075\156\104\335\127\145\001\002" +
    "\000\034\003\170\021\174\023\164\024\165\043\151\045" +
    "\177\052\146\055\171\056\175\073\162\074\176\075\156" +
    "\127\145\001\002\000\034\021\174\023\164\024\165\043" +
    "\151\045\177\052\146\055\171\056\175\073\162\074\176" +
    "\075\156\104\323\127\145\001\002\000\044\021\uff78\023" +
    "\uff78\024\uff78\043\uff78\045\uff78\052\uff78\053\uff78\055\uff78" +
    "\056\uff78\057\325\063\uff78\073\uff78\074\uff78\075\uff78\103" +
    "\324\104\uff78\127\uff78\001\002\000\034\003\170\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\055\171\056" +
    "\175\073\162\074\176\075\156\127\145\001\002\000\036" +
    "\003\170\021\174\023\164\024\165\043\151\045\177\052" +
    "\146\055\171\056\175\073\162\074\176\075\156\103\327" +
    "\127\145\001\002\000\034\021\174\023\164\024\165\043" +
    "\151\045\177\052\146\055\171\056\175\073\162\074\176" +
    "\075\156\104\332\127\145\001\002\000\034\003\170\021" +
    "\174\023\164\024\165\043\151\045\177\052\146\055\171" +
    "\056\175\073\162\074\176\075\156\127\145\001\002\000" +
    "\034\021\174\023\164\024\165\043\151\045\177\052\146" +
    "\055\171\056\175\073\162\074\176\075\156\104\331\127" +
    "\145\001\002\000\040\021\uff72\023\uff72\024\uff72\043\uff72" +
    "\045\uff72\052\uff72\053\uff72\055\uff72\056\uff72\063\uff72\073" +
    "\uff72\074\uff72\075\uff72\104\uff72\127\uff72\001\002\000\040" +
    "\021\uff6f\023\uff6f\024\uff6f\043\uff6f\045\uff6f\052\uff6f\053" +
    "\uff6f\055\uff6f\056\uff6f\063\uff6f\073\uff6f\074\uff6f\075\uff6f" +
    "\104\uff6f\127\uff6f\001\002\000\034\021\174\023\164\024" +
    "\165\043\151\045\177\052\146\055\171\056\175\073\162" +
    "\074\176\075\156\104\334\127\145\001\002\000\040\021" +
    "\uff70\023\uff70\024\uff70\043\uff70\045\uff70\052\uff70\053\uff70" +
    "\055\uff70\056\uff70\063\uff70\073\uff70\074\uff70\075\uff70\104" +
    "\uff70\127\uff70\001\002\000\040\021\uff73\023\uff73\024\uff73" +
    "\043\uff73\045\uff73\052\uff73\053\uff73\055\uff73\056\uff73\063" +
    "\uff73\073\uff73\074\uff73\075\uff73\104\uff73\127\uff73\001\002" +
    "\000\034\021\174\023\164\024\165\043\151\045\177\052" +
    "\146\055\171\056\175\073\162\074\176\075\156\104\337" +
    "\127\145\001\002\000\040\021\uff74\023\uff74\024\uff74\043" +
    "\uff74\045\uff74\052\uff74\053\uff74\055\uff74\056\uff74\063\uff74" +
    "\073\uff74\074\uff74\075\uff74\104\uff74\127\uff74\001\002\000" +
    "\004\103\341\001\002\000\034\003\170\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\127\145\001\002\000\034\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\055\171\056" +
    "\175\073\162\074\176\075\156\104\343\127\145\001\002" +
    "\000\042\021\uff77\023\uff77\024\uff77\043\uff77\045\uff77\052" +
    "\uff77\053\uff77\055\uff77\056\uff77\057\344\063\uff77\073\uff77" +
    "\074\uff77\075\uff77\104\uff77\127\uff77\001\002\000\004\103" +
    "\345\001\002\000\034\003\170\021\174\023\164\024\165" +
    "\043\151\045\177\052\146\055\171\056\175\073\162\074" +
    "\176\075\156\127\145\001\002\000\034\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\104\347\127\145\001\002\000\040" +
    "\021\uff71\023\uff71\024\uff71\043\uff71\045\uff71\052\uff71\053" +
    "\uff71\055\uff71\056\uff71\063\uff71\073\uff71\074\uff71\075\uff71" +
    "\104\uff71\127\uff71\001\002\000\034\003\170\021\174\023" +
    "\164\024\165\043\151\045\177\052\146\055\171\056\175" +
    "\073\162\074\176\075\156\127\145\001\002\000\034\021" +
    "\174\023\164\024\165\043\151\045\177\052\146\055\171" +
    "\056\175\073\162\074\176\075\156\104\352\127\145\001" +
    "\002\000\040\021\uff75\023\uff75\024\uff75\043\uff75\045\uff75" +
    "\052\uff75\053\uff75\055\uff75\056\uff75\063\uff75\073\uff75\074" +
    "\uff75\075\uff75\104\uff75\127\uff75\001\002\000\022\004\220" +
    "\005\205\006\206\025\215\062\214\071\222\075\216\101" +
    "\243\001\002\000\040\045\uffbd\070\255\072\250\073\uffbd" +
    "\074\uffbd\075\uffbd\102\uffbd\103\uffbd\107\257\115\253\116" +
    "\256\117\260\120\252\121\254\125\uffbd\001\002\000\022" +
    "\004\220\005\205\006\206\025\215\062\214\071\222\075" +
    "\216\101\243\001\002\000\040\045\uffbc\070\255\072\250" +
    "\073\uffbc\074\uffbc\075\uffbc\102\uffbc\103\uffbc\107\257\115" +
    "\253\116\256\117\260\120\252\121\254\125\uffbc\001\002" +
    "\000\012\003\uff1d\061\uff1d\103\uff1d\125\uff1d\001\002\000" +
    "\014\003\u0128\004\357\075\363\102\u012a\125\u0127\001\002" +
    "\000\004\102\u0125\001\002\000\004\125\364\001\002\000" +
    "\012\003\uff1e\061\uff1e\103\uff1e\125\uff1e\001\002\000\012" +
    "\045\177\073\162\074\176\075\365\001\002\000\024\004" +
    "\263\005\261\006\374\025\376\062\377\075\275\101\273" +
    "\110\375\124\373\001\002\000\020\045\uffaa\073\uffaa\074" +
    "\uffaa\075\uffaa\077\uffaa\102\uffaa\125\uffaa\001\002\000\020" +
    "\045\uffab\073\uffab\074\uffab\075\uffab\077\uffab\102\uffab\125" +
    "\uffab\001\002\000\004\102\371\001\002\000\004\077\372" +
    "\001\002\000\040\021\uff4f\023\uff4f\024\uff4f\043\uff4f\045" +
    "\uff4f\052\uff4f\053\uff4f\055\uff4f\056\uff4f\063\uff4f\073\uff4f" +
    "\074\uff4f\075\uff4f\104\uff4f\127\uff4f\001\002\000\016\003" +
    "\u0109\007\u010a\030\u0108\051\u0106\122\u0107\126\u010b\001\002" +
    "\000\046\021\uffd2\023\uffd2\024\uffd2\043\uffd2\045\uffd2\052" +
    "\uffd2\053\uffd2\055\uffd2\056\uffd2\063\uffd2\073\uffd2\074\uffd2" +
    "\075\uffd2\077\uffd2\102\uffd2\104\uffd2\125\uffd2\127\uffd2\001" +
    "\002\000\064\003\u0104\004\263\005\261\006\u0101\021\uffd3" +
    "\023\uffd3\024\uffd3\025\u0103\043\uffd3\045\uffd3\052\uffd3\053" +
    "\uffd3\055\uffd3\056\uffd3\062\u0102\063\uffd3\073\uffd3\074\uffd3" +
    "\075\275\077\uffd3\101\273\102\uffd3\104\uffd3\125\uffd3\127" +
    "\uffd3\001\002\000\046\021\uffd0\023\uffd0\024\uffd0\043\uffd0" +
    "\045\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0\063\uffd0\073" +
    "\uffd0\074\uffd0\075\uffd0\077\uffd0\102\uffd0\104\uffd0\125\uffd0" +
    "\127\uffd0\001\002\000\046\021\uffd1\023\uffd1\024\uffd1\043" +
    "\uffd1\045\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\063\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\077\uffd1\102\uffd1\104\uffd1\125" +
    "\uffd1\127\uffd1\001\002\000\052\021\uffcf\023\uffcf\024\uffcf" +
    "\043\uffcf\045\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\063" +
    "\uffcf\073\uffcf\074\uffcf\075\uffcf\077\uffcf\102\uffcf\104\uffcf" +
    "\111\271\112\270\125\uffcf\127\uffcf\001\002\000\046\021" +
    "\uffd7\023\uffd7\024\uffd7\043\uffd7\045\uffd7\052\uffd7\053\uffd7" +
    "\055\uffd7\056\uffd7\063\uffd7\073\uffd7\074\uffd7\075\uffd7\077" +
    "\uffd7\102\uffd7\104\uffd7\125\uffd7\127\uffd7\001\002\000\046" +
    "\021\uffd6\023\uffd6\024\uffd6\043\uffd6\045\uffd6\052\uffd6\053" +
    "\uffd6\055\uffd6\056\uffd6\063\uffd6\073\uffd6\074\uffd6\075\uffd6" +
    "\077\uffd6\102\uffd6\104\uffd6\125\uffd6\127\uffd6\001\002\000" +
    "\046\021\uffd5\023\uffd5\024\uffd5\043\uffd5\045\uffd5\052\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\063\uffd5\073\uffd5\074\uffd5\075" +
    "\uffd5\077\uffd5\102\uffd5\104\uffd5\125\uffd5\127\uffd5\001\002" +
    "\000\046\021\uffce\023\uffce\024\uffce\043\uffce\045\uffce\052" +
    "\uffce\053\uffce\055\uffce\056\uffce\063\uffce\073\uffce\074\uffce" +
    "\075\uffce\077\uffce\102\uffce\104\uffce\125\uffce\127\uffce\001" +
    "\002\000\052\021\uffd4\023\uffd4\024\uffd4\043\uffd4\045\uffd4" +
    "\052\uffd4\053\uffd4\055\uffd4\056\uffd4\063\uffd4\073\uffd4\074" +
    "\uffd4\075\uffd4\077\uffd4\102\uffd4\104\uffd4\111\271\112\270" +
    "\125\uffd4\127\uffd4\001\002\000\050\021\uffa3\023\uffa3\024" +
    "\uffa3\043\uffa3\045\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3" +
    "\063\uffa3\073\uffa3\074\uffa3\075\uffa3\077\uffa3\102\uffa3\104" +
    "\uffa3\124\u0120\125\uffa3\127\uffa3\001\002\000\046\021\uffa0" +
    "\023\uffa0\024\uffa0\043\uffa0\045\uffa0\052\uffa0\053\uffa0\055" +
    "\uffa0\056\uffa0\063\uffa0\073\uffa0\074\uffa0\075\uffa0\077\uffa0" +
    "\102\uffa0\104\uffa0\125\uffa0\127\uffa0\001\002\000\004\124" +
    "\u0114\001\002\000\004\077\u0113\001\002\000\046\021\uffa2" +
    "\023\uffa2\024\uffa2\043\uffa2\045\uffa2\052\uffa2\053\uffa2\055" +
    "\uffa2\056\uffa2\063\uffa2\073\uffa2\074\uffa2\075\uffa2\077\uffa2" +
    "\102\uffa2\104\uffa2\125\uffa2\127\uffa2\001\002\000\004\101" +
    "\u010c\001\002\000\010\003\u010e\006\u010f\075\u0110\001\002" +
    "\000\004\102\u0112\001\002\000\004\102\u0111\001\002\000" +
    "\004\102\uff94\001\002\000\004\102\uff93\001\002\000\046" +
    "\021\uff9b\023\uff9b\024\uff9b\043\uff9b\045\uff9b\052\uff9b\053" +
    "\uff9b\055\uff9b\056\uff9b\063\uff9b\073\uff9b\074\uff9b\075\uff9b" +
    "\077\uff9b\102\uff9b\104\uff9b\125\uff9b\127\uff9b\001\002\000" +
    "\046\021\uff9c\023\uff9c\024\uff9c\043\uff9c\045\uff9c\052\uff9c" +
    "\053\uff9c\055\uff9c\056\uff9c\063\uff9c\073\uff9c\074\uff9c\075" +
    "\uff9c\077\uff9c\102\uff9c\104\uff9c\125\uff9c\127\uff9c\001\002" +
    "\000\046\021\uff9a\023\uff9a\024\uff9a\043\uff9a\045\uff9a\052" +
    "\uff9a\053\uff9a\055\uff9a\056\uff9a\063\uff9a\073\uff9a\074\uff9a" +
    "\075\uff9a\077\uff9a\102\uff9a\104\uff9a\125\uff9a\127\uff9a\001" +
    "\002\000\006\014\u0116\040\u0117\001\002\000\050\021\uff9f" +
    "\023\uff9f\024\uff9f\043\uff9f\045\uff9f\052\uff9f\053\uff9f\055" +
    "\uff9f\056\uff9f\063\uff9f\073\uff9f\074\uff9f\075\uff9f\077\uff9f" +
    "\101\u0118\102\uff9f\104\uff9f\125\uff9f\127\uff9f\001\002\000" +
    "\050\021\uffac\023\uffac\024\uffac\043\uffac\045\uffac\052\uffac" +
    "\053\uffac\055\uffac\056\uffac\063\uffac\073\uffac\074\uffac\075" +
    "\uffac\077\uffac\101\uffac\102\uffac\104\uffac\125\uffac\127\uffac" +
    "\001\002\000\050\021\uffad\023\uffad\024\uffad\043\uffad\045" +
    "\uffad\052\uffad\053\uffad\055\uffad\056\uffad\063\uffad\073\uffad" +
    "\074\uffad\075\uffad\077\uffad\101\uffad\102\uffad\104\uffad\125" +
    "\uffad\127\uffad\001\002\000\010\003\u0119\075\u011a\076\u011c" +
    "\001\002\000\004\102\u011e\001\002\000\004\102\uff95\001" +
    "\002\000\004\102\u011d\001\002\000\004\102\uff96\001\002" +
    "\000\046\021\uff9e\023\uff9e\024\uff9e\043\uff9e\045\uff9e\052" +
    "\uff9e\053\uff9e\055\uff9e\056\uff9e\063\uff9e\073\uff9e\074\uff9e" +
    "\075\uff9e\077\uff9e\102\uff9e\104\uff9e\125\uff9e\127\uff9e\001" +
    "\002\000\004\077\u011f\001\002\000\046\021\uff9d\023\uff9d" +
    "\024\uff9d\043\uff9d\045\uff9d\052\uff9d\053\uff9d\055\uff9d\056" +
    "\uff9d\063\uff9d\073\uff9d\074\uff9d\075\uff9d\077\uff9d\102\uff9d" +
    "\104\uff9d\125\uff9d\127\uff9d\001\002\000\010\133\u0124\134" +
    "\u0122\135\u0123\001\002\000\046\021\uffa1\023\uffa1\024\uffa1" +
    "\043\uffa1\045\uffa1\052\uffa1\053\uffa1\055\uffa1\056\uffa1\063" +
    "\uffa1\073\uffa1\074\uffa1\075\uffa1\077\uffa1\102\uffa1\104\uffa1" +
    "\125\uffa1\127\uffa1\001\002\000\046\021\uff98\023\uff98\024" +
    "\uff98\043\uff98\045\uff98\052\uff98\053\uff98\055\uff98\056\uff98" +
    "\063\uff98\073\uff98\074\uff98\075\uff98\077\uff98\102\uff98\104" +
    "\uff98\125\uff98\127\uff98\001\002\000\046\021\uff97\023\uff97" +
    "\024\uff97\043\uff97\045\uff97\052\uff97\053\uff97\055\uff97\056" +
    "\uff97\063\uff97\073\uff97\074\uff97\075\uff97\077\uff97\102\uff97" +
    "\104\uff97\125\uff97\127\uff97\001\002\000\046\021\uff99\023" +
    "\uff99\024\uff99\043\uff99\045\uff99\052\uff99\053\uff99\055\uff99" +
    "\056\uff99\063\uff99\073\uff99\074\uff99\075\uff99\077\uff99\102" +
    "\uff99\104\uff99\125\uff99\127\uff99\001\002\000\004\077\u0126" +
    "\001\002\000\040\021\uff4a\023\uff4a\024\uff4a\043\uff4a\045" +
    "\uff4a\052\uff4a\053\uff4a\055\uff4a\056\uff4a\063\uff4a\073\uff4a" +
    "\074\uff4a\075\uff4a\104\uff4a\127\uff4a\001\002\000\012\045" +
    "\177\073\162\074\176\075\365\001\002\000\004\102\u0136" +
    "\001\002\000\006\003\u012d\125\u012c\001\002\000\004\077" +
    "\u012b\001\002\000\040\021\uff4b\023\uff4b\024\uff4b\043\uff4b" +
    "\045\uff4b\052\uff4b\053\uff4b\055\uff4b\056\uff4b\063\uff4b\073" +
    "\uff4b\074\uff4b\075\uff4b\104\uff4b\127\uff4b\001\002\000\014" +
    "\045\177\073\162\074\176\075\365\102\u0131\001\002\000" +
    "\012\045\177\073\162\074\176\075\365\001\002\000\004" +
    "\102\u012f\001\002\000\004\077\u0130\001\002\000\040\021" +
    "\uff4d\023\uff4d\024\uff4d\043\uff4d\045\uff4d\052\uff4d\053\uff4d" +
    "\055\uff4d\056\uff4d\063\uff4d\073\uff4d\074\uff4d\075\uff4d\104" +
    "\uff4d\127\uff4d\001\002\000\004\077\u0135\001\002\000\004" +
    "\102\u0133\001\002\000\042\021\uff51\023\uff51\024\uff51\043" +
    "\uff51\045\uff51\052\uff51\053\uff51\055\uff51\056\uff51\063\uff51" +
    "\073\uff51\074\uff51\075\uff51\077\u0134\104\uff51\127\uff51\001" +
    "\002\000\040\021\uff52\023\uff52\024\uff52\043\uff52\045\uff52" +
    "\052\uff52\053\uff52\055\uff52\056\uff52\063\uff52\073\uff52\074" +
    "\uff52\075\uff52\104\uff52\127\uff52\001\002\000\040\021\uff4c" +
    "\023\uff4c\024\uff4c\043\uff4c\045\uff4c\052\uff4c\053\uff4c\055" +
    "\uff4c\056\uff4c\063\uff4c\073\uff4c\074\uff4c\075\uff4c\104\uff4c" +
    "\127\uff4c\001\002\000\004\077\u0137\001\002\000\040\021" +
    "\uff50\023\uff50\024\uff50\043\uff50\045\uff50\052\uff50\053\uff50" +
    "\055\uff50\056\uff50\063\uff50\073\uff50\074\uff50\075\uff50\104" +
    "\uff50\127\uff50\001\002\000\004\102\u0139\001\002\000\004" +
    "\077\u013a\001\002\000\040\021\uff4e\023\uff4e\024\uff4e\043" +
    "\uff4e\045\uff4e\052\uff4e\053\uff4e\055\uff4e\056\uff4e\063\uff4e" +
    "\073\uff4e\074\uff4e\075\uff4e\104\uff4e\127\uff4e\001\002\000" +
    "\010\003\u0174\075\u0175\102\u0176\001\002\000\004\075\u0170" +
    "\001\002\000\004\102\u013e\001\002\000\004\103\u013f\001" +
    "\002\000\006\003\u0140\011\u0141\001\002\000\010\011\u016e" +
    "\077\u016d\104\u016f\001\002\000\012\004\u0159\006\u015b\025" +
    "\u015c\062\u015a\001\002\000\006\011\u0143\104\u0144\001\002" +
    "\000\012\004\u0145\006\u0147\025\u0148\062\u0146\001\002\000" +
    "\040\021\uff31\023\uff31\024\uff31\043\uff31\045\uff31\052\uff31" +
    "\053\uff31\055\uff31\056\uff31\063\uff31\073\uff31\074\uff31\075" +
    "\uff31\104\uff31\127\uff31\001\002\000\004\100\u0155\001\002" +
    "\000\004\100\u0151\001\002\000\004\100\u014d\001\002\000" +
    "\004\100\u0149\001\002\000\034\003\170\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\127\145\001\002\000\034\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\053\u014b\055" +
    "\171\056\175\073\162\074\176\075\156\127\145\001\002" +
    "\000\004\077\u014c\001\002\000\006\011\uff25\104\uff25\001" +
    "\002\000\034\003\170\021\174\023\164\024\165\043\151" +
    "\045\177\052\146\055\171\056\175\073\162\074\176\075" +
    "\156\127\145\001\002\000\034\021\174\023\164\024\165" +
    "\043\151\045\177\052\146\053\u014f\055\171\056\175\073" +
    "\162\074\176\075\156\127\145\001\002\000\004\077\u0150" +
    "\001\002\000\006\011\uff29\104\uff29\001\002\000\034\003" +
    "\170\021\174\023\164\024\165\043\151\045\177\052\146" +
    "\055\171\056\175\073\162\074\176\075\156\127\145\001" +
    "\002\000\034\021\174\023\164\024\165\043\151\045\177" +
    "\052\146\053\u0153\055\171\056\175\073\162\074\176\075" +
    "\156\127\145\001\002\000\004\077\u0154\001\002\000\006" +
    "\011\uff27\104\uff27\001\002\000\034\003\170\021\174\023" +
    "\164\024\165\043\151\045\177\052\146\055\171\056\175" +
    "\073\162\074\176\075\156\127\145\001\002\000\034\021" +
    "\174\023\164\024\165\043\151\045\177\052\146\053\u0157" +
    "\055\171\056\175\073\162\074\176\075\156\127\145\001" +
    "\002\000\004\077\u0158\001\002\000\006\011\uff2b\104\uff2b" +
    "\001\002\000\004\100\u0169\001\002\000\004\100\u0165\001" +
    "\002\000\004\100\u0161\001\002\000\004\100\u015d\001\002" +
    "\000\034\003\170\021\174\023\164\024\165\043\151\045" +
    "\177\052\146\055\171\056\175\073\162\074\176\075\156" +
    "\127\145\001\002\000\034\021\174\023\164\024\165\043" +
    "\151\045\177\052\146\053\u015f\055\171\056\175\073\162" +
    "\074\176\075\156\127\145\001\002\000\004\077\u0160\001" +
    "\002\000\006\011\uff24\104\uff24\001\002\000\034\003\170" +
    "\021\174\023\164\024\165\043\151\045\177\052\146\055" +
    "\171\056\175\073\162\074\176\075\156\127\145\001\002" +
    "\000\034\021\174\023\164\024\165\043\151\045\177\052" +
    "\146\053\u0163\055\171\056\175\073\162\074\176\075\156" +
    "\127\145\001\002\000\004\077\u0164\001\002\000\006\011" +
    "\uff28\104\uff28\001\002\000\034\003\170\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\127\145\001\002\000\034\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\053\u0167\055" +
    "\171\056\175\073\162\074\176\075\156\127\145\001\002" +
    "\000\004\077\u0168\001\002\000\006\011\uff26\104\uff26\001" +
    "\002\000\034\003\170\021\174\023\164\024\165\043\151" +
    "\045\177\052\146\055\171\056\175\073\162\074\176\075" +
    "\156\127\145\001\002\000\034\021\174\023\164\024\165" +
    "\043\151\045\177\052\146\053\u016b\055\171\056\175\073" +
    "\162\074\176\075\156\127\145\001\002\000\004\077\u016c" +
    "\001\002\000\006\011\uff2a\104\uff2a\001\002\000\006\011" +
    "\uff23\104\uff23\001\002\000\006\011\uff22\104\uff22\001\002" +
    "\000\006\011\uff21\104\uff21\001\002\000\004\103\u0171\001" +
    "\002\000\006\003\u0140\011\u0141\001\002\000\006\011\u0143" +
    "\104\u0173\001\002\000\040\021\uff2f\023\uff2f\024\uff2f\043" +
    "\uff2f\045\uff2f\052\uff2f\053\uff2f\055\uff2f\056\uff2f\063\uff2f" +
    "\073\uff2f\074\uff2f\075\uff2f\104\uff2f\127\uff2f\001\002\000" +
    "\004\102\u0181\001\002\000\004\102\u017a\001\002\000\004" +
    "\103\u0177\001\002\000\006\003\u0140\011\u0141\001\002\000" +
    "\006\011\u0143\104\u0179\001\002\000\040\021\uff30\023\uff30" +
    "\024\uff30\043\uff30\045\uff30\052\uff30\053\uff30\055\uff30\056" +
    "\uff30\063\uff30\073\uff30\074\uff30\075\uff30\104\uff30\127\uff30" +
    "\001\002\000\010\003\u0140\011\u0141\103\u017b\001\002\000" +
    "\010\003\u0140\011\u0141\104\u017f\001\002\000\006\011\u0143" +
    "\104\u017d\001\002\000\040\021\uff2d\023\uff2d\024\uff2d\043" +
    "\uff2d\045\uff2d\052\uff2d\053\uff2d\055\uff2d\056\uff2d\063\uff2d" +
    "\073\uff2d\074\uff2d\075\uff2d\104\uff2d\127\uff2d\001\002\000" +
    "\006\011\u0143\104\u0180\001\002\000\040\021\uff2c\023\uff2c" +
    "\024\uff2c\043\uff2c\045\uff2c\052\uff2c\053\uff2c\055\uff2c\056" +
    "\uff2c\063\uff2c\073\uff2c\074\uff2c\075\uff2c\104\uff2c\127\uff2c" +
    "\001\002\000\040\021\uff32\023\uff32\024\uff32\043\uff32\045" +
    "\uff32\052\uff32\053\uff32\055\uff32\056\uff32\063\uff32\073\uff32" +
    "\074\uff32\075\uff32\104\uff32\127\uff32\001\002\000\004\103" +
    "\u0182\001\002\000\006\003\u0140\011\u0141\001\002\000\006" +
    "\011\u0143\104\u0184\001\002\000\040\021\uff2e\023\uff2e\024" +
    "\uff2e\043\uff2e\045\uff2e\052\uff2e\053\uff2e\055\uff2e\056\uff2e" +
    "\063\uff2e\073\uff2e\074\uff2e\075\uff2e\104\uff2e\127\uff2e\001" +
    "\002\000\040\021\uff7e\023\uff7e\024\uff7e\043\uff7e\045\uff7e" +
    "\052\uff7e\053\uff7e\055\uff7e\056\uff7e\063\uff7e\073\uff7e\074" +
    "\uff7e\075\uff7e\104\uff7e\127\uff7e\001\002\000\040\021\uff7d" +
    "\023\uff7d\024\uff7d\043\uff7d\045\uff7d\052\uff7d\053\uff7d\055" +
    "\uff7d\056\uff7d\063\uff7d\073\uff7d\074\uff7d\075\uff7d\104\uff7d" +
    "\127\uff7d\001\002\000\040\021\uff7c\023\uff7c\024\uff7c\043" +
    "\uff7c\045\uff7c\052\uff7c\053\uff7c\055\uff7c\056\uff7c\063\uff7c" +
    "\073\uff7c\074\uff7c\075\uff7c\104\uff7c\127\uff7c\001\002\000" +
    "\026\003\u0191\004\220\005\205\006\206\025\215\062\214" +
    "\071\222\075\216\101\243\125\u0190\001\002\000\006\072" +
    "\224\125\u018a\001\002\000\012\045\177\073\162\074\176" +
    "\075\365\001\002\000\004\125\u018c\001\002\000\012\045" +
    "\177\073\162\074\176\075\365\001\002\000\004\102\u018e" +
    "\001\002\000\004\077\u018f\001\002\000\040\021\uff62\023" +
    "\uff62\024\uff62\043\uff62\045\uff62\052\uff62\053\uff62\055\uff62" +
    "\056\uff62\063\uff62\073\uff62\074\uff62\075\uff62\104\uff62\127" +
    "\uff62\001\002\000\012\045\177\073\162\074\176\075\365" +
    "\001\002\000\004\125\u01ae\001\002\000\020\045\177\072" +
    "\224\073\162\074\176\075\365\102\267\125\u0193\001\002" +
    "\000\016\003\u019a\045\177\073\162\074\176\075\365\125" +
    "\u0199\001\002\000\004\125\u0195\001\002\000\012\045\177" +
    "\073\162\074\176\075\365\001\002\000\004\102\u0197\001" +
    "\002\000\004\077\u0198\001\002\000\040\021\uff60\023\uff60" +
    "\024\uff60\043\uff60\045\uff60\052\uff60\053\uff60\055\uff60\056" +
    "\uff60\063\uff60\073\uff60\074\uff60\075\uff60\104\uff60\127\uff60" +
    "\001\002\000\012\045\177\073\162\074\176\075\365\001" +
    "\002\000\004\125\u01a8\001\002\000\014\045\177\073\162" +
    "\074\176\075\365\125\u019c\001\002\000\016\003\u01a1\045" +
    "\177\073\162\074\176\075\365\102\u01a0\001\002\000\004" +
    "\102\u019e\001\002\000\004\077\u019f\001\002\000\040\021" +
    "\uff5e\023\uff5e\024\uff5e\043\uff5e\045\uff5e\052\uff5e\053\uff5e" +
    "\055\uff5e\056\uff5e\063\uff5e\073\uff5e\074\uff5e\075\uff5e\104" +
    "\uff5e\127\uff5e\001\002\000\004\077\u01a7\001\002\000\004" +
    "\077\u01a6\001\002\000\006\077\u01a3\102\u01a4\001\002\000" +
    "\040\021\uff5c\023\uff5c\024\uff5c\043\uff5c\045\uff5c\052\uff5c" +
    "\053\uff5c\055\uff5c\056\uff5c\063\uff5c\073\uff5c\074\uff5c\075" +
    "\uff5c\104\uff5c\127\uff5c\001\002\000\042\021\uff63\023\uff63" +
    "\024\uff63\043\uff63\045\uff63\052\uff63\053\uff63\055\uff63\056" +
    "\uff63\063\uff63\073\uff63\074\uff63\075\uff63\077\u01a5\104\uff63" +
    "\127\uff63\001\002\000\040\021\uff64\023\uff64\024\uff64\043" +
    "\uff64\045\uff64\052\uff64\053\uff64\055\uff64\056\uff64\063\uff64" +
    "\073\uff64\074\uff64\075\uff64\104\uff64\127\uff64\001\002\000" +
    "\040\021\uff59\023\uff59\024\uff59\043\uff59\045\uff59\052\uff59" +
    "\053\uff59\055\uff59\056\uff59\063\uff59\073\uff59\074\uff59\075" +
    "\uff59\104\uff59\127\uff59\001\002\000\040\021\uff5d\023\uff5d" +
    "\024\uff5d\043\uff5d\045\uff5d\052\uff5d\053\uff5d\055\uff5d\056" +
    "\uff5d\063\uff5d\073\uff5d\074\uff5d\075\uff5d\104\uff5d\127\uff5d" +
    "\001\002\000\012\045\177\073\162\074\176\075\365\001" +
    "\002\000\004\077\u01aa\001\002\000\040\021\uff5a\023\uff5a" +
    "\024\uff5a\043\uff5a\045\uff5a\052\uff5a\053\uff5a\055\uff5a\056" +
    "\uff5a\063\uff5a\073\uff5a\074\uff5a\075\uff5a\104\uff5a\127\uff5a" +
    "\001\002\000\004\102\u01ac\001\002\000\004\077\u01ad\001" +
    "\002\000\040\021\uff5f\023\uff5f\024\uff5f\043\uff5f\045\uff5f" +
    "\052\uff5f\053\uff5f\055\uff5f\056\uff5f\063\uff5f\073\uff5f\074" +
    "\uff5f\075\uff5f\104\uff5f\127\uff5f\001\002\000\012\045\177" +
    "\073\162\074\176\075\365\001\002\000\004\125\u01b0\001" +
    "\002\000\012\045\177\073\162\074\176\075\365\001\002" +
    "\000\004\077\u01b2\001\002\000\040\021\uff5b\023\uff5b\024" +
    "\uff5b\043\uff5b\045\uff5b\052\uff5b\053\uff5b\055\uff5b\056\uff5b" +
    "\063\uff5b\073\uff5b\074\uff5b\075\uff5b\104\uff5b\127\uff5b\001" +
    "\002\000\004\125\u01b4\001\002\000\012\045\177\073\162" +
    "\074\176\075\365\001\002\000\004\102\u01b6\001\002\000" +
    "\004\077\u01b7\001\002\000\040\021\uff61\023\uff61\024\uff61" +
    "\043\uff61\045\uff61\052\uff61\053\uff61\055\uff61\056\uff61\063" +
    "\uff61\073\uff61\074\uff61\075\uff61\104\uff61\127\uff61\001\002" +
    "\000\026\003\u01bf\004\220\005\205\006\206\025\215\062" +
    "\214\071\222\075\216\101\243\125\u01be\001\002\000\006" +
    "\072\224\125\u01ba\001\002\000\012\045\177\073\162\074" +
    "\176\075\365\001\002\000\004\077\u01bc\001\002\000\004" +
    "\102\u01bd\001\002\000\040\021\uff6b\023\uff6b\024\uff6b\043" +
    "\uff6b\045\uff6b\052\uff6b\053\uff6b\055\uff6b\056\uff6b\063\uff6b" +
    "\073\uff6b\074\uff6b\075\uff6b\104\uff6b\127\uff6b\001\002\000" +
    "\012\045\177\073\162\074\176\075\365\001\002\000\004" +
    "\125\u01ce\001\002\000\020\045\177\072\224\073\162\074" +
    "\176\075\365\102\267\125\u01c1\001\002\000\016\003\u01c6" +
    "\045\177\073\162\074\176\075\365\102\u01c5\001\002\000" +
    "\004\102\u01c3\001\002\000\042\021\uff6c\023\uff6c\024\uff6c" +
    "\043\uff6c\045\uff6c\052\uff6c\053\uff6c\055\uff6c\056\uff6c\063" +
    "\uff6c\073\uff6c\074\uff6c\075\uff6c\077\u01c4\104\uff6c\127\uff6c" +
    "\001\002\000\040\021\uff69\023\uff69\024\uff69\043\uff69\045" +
    "\uff69\052\uff69\053\uff69\055\uff69\056\uff69\063\uff69\073\uff69" +
    "\074\uff69\075\uff69\104\uff69\127\uff69\001\002\000\004\077" +
    "\u01cd\001\002\000\004\102\u01cb\001\002\000\006\077\u01c8" +
    "\102\u01c9\001\002\000\040\021\uff67\023\uff67\024\uff67\043" +
    "\uff67\045\uff67\052\uff67\053\uff67\055\uff67\056\uff67\063\uff67" +
    "\073\uff67\074\uff67\075\uff67\104\uff67\127\uff67\001\002\000" +
    "\004\077\u01ca\001\002\000\040\021\uff6e\023\uff6e\024\uff6e" +
    "\043\uff6e\045\uff6e\052\uff6e\053\uff6e\055\uff6e\056\uff6e\063" +
    "\uff6e\073\uff6e\074\uff6e\075\uff6e\104\uff6e\127\uff6e\001\002" +
    "\000\004\077\u01cc\001\002\000\040\021\uff65\023\uff65\024" +
    "\uff65\043\uff65\045\uff65\052\uff65\053\uff65\055\uff65\056\uff65" +
    "\063\uff65\073\uff65\074\uff65\075\uff65\104\uff65\127\uff65\001" +
    "\002\000\040\021\uff68\023\uff68\024\uff68\043\uff68\045\uff68" +
    "\052\uff68\053\uff68\055\uff68\056\uff68\063\uff68\073\uff68\074" +
    "\uff68\075\uff68\104\uff68\127\uff68\001\002\000\012\045\177" +
    "\073\162\074\176\075\365\001\002\000\004\102\u01d0\001" +
    "\002\000\004\077\u01d1\001\002\000\040\021\uff66\023\uff66" +
    "\024\uff66\043\uff66\045\uff66\052\uff66\053\uff66\055\uff66\056" +
    "\uff66\063\uff66\073\uff66\074\uff66\075\uff66\104\uff66\127\uff66" +
    "\001\002\000\004\102\u01d3\001\002\000\004\077\u01d4\001" +
    "\002\000\040\021\uff6a\023\uff6a\024\uff6a\043\uff6a\045\uff6a" +
    "\052\uff6a\053\uff6a\055\uff6a\056\uff6a\063\uff6a\073\uff6a\074" +
    "\uff6a\075\uff6a\104\uff6a\127\uff6a\001\002\000\046\021\uffa9" +
    "\023\uffa9\024\uffa9\043\uffa9\045\uffa9\052\uffa9\053\uffa9\055" +
    "\uffa9\056\uffa9\063\uffa9\073\uffa9\074\uffa9\075\uffa9\077\uffa9" +
    "\102\uffa9\104\uffa9\125\uffa9\127\uffa9\001\002\000\040\021" +
    "\uff8d\023\uff8d\024\uff8d\043\uff8d\045\uff8d\052\uff8d\053\uff8d" +
    "\055\uff8d\056\uff8d\063\uff8d\073\uff8d\074\uff8d\075\uff8d\104" +
    "\uff8d\127\uff8d\001\002\000\040\021\uff91\023\uff91\024\uff91" +
    "\043\uff91\045\uff91\052\uff91\053\uff91\055\uff91\056\uff91\063" +
    "\uff91\073\uff91\074\uff91\075\uff91\104\uff91\127\uff91\001\002" +
    "\000\022\004\220\005\205\006\206\025\215\062\214\071" +
    "\222\075\216\101\243\001\002\000\006\072\224\125\u01da" +
    "\001\002\000\012\045\177\073\162\074\176\075\365\001" +
    "\002\000\004\102\u01dc\001\002\000\004\077\u01dd\001\002" +
    "\000\040\021\uff6d\023\uff6d\024\uff6d\043\uff6d\045\uff6d\052" +
    "\uff6d\053\uff6d\055\uff6d\056\uff6d\063\uff6d\073\uff6d\074\uff6d" +
    "\075\uff6d\104\uff6d\127\uff6d\001\002\000\024\004\220\005" +
    "\205\006\206\025\215\062\214\071\222\075\216\101\243" +
    "\102\u01e6\001\002\000\004\104\u01e5\001\002\000\006\072" +
    "\224\102\u01e1\001\002\000\004\103\u01e2\001\002\000\034" +
    "\003\170\021\174\023\164\024\165\043\151\045\177\052" +
    "\146\055\171\056\175\073\162\074\176\075\156\127\145" +
    "\001\002\000\034\021\174\023\164\024\165\043\151\045" +
    "\177\052\146\055\171\056\175\073\162\074\176\075\156" +
    "\104\u01e4\127\145\001\002\000\040\021\uff48\023\uff48\024" +
    "\uff48\043\uff48\045\uff48\052\uff48\053\uff48\055\uff48\056\uff48" +
    "\063\uff48\073\uff48\074\uff48\075\uff48\104\uff48\127\uff48\001" +
    "\002\000\040\021\uff43\023\uff43\024\uff43\043\uff43\045\uff43" +
    "\052\uff43\053\uff43\055\uff43\056\uff43\063\uff43\073\uff43\074" +
    "\uff43\075\uff43\104\uff43\127\uff43\001\002\000\004\103\u01f2" +
    "\001\002\000\010\072\224\102\u01e9\103\u01e8\001\002\000" +
    "\034\003\170\021\174\023\164\024\165\043\151\045\177" +
    "\052\146\055\171\056\175\073\162\074\176\075\156\127" +
    "\145\001\002\000\060\003\170\021\174\023\164\024\165" +
    "\043\151\045\177\052\146\055\171\056\175\070\uffb5\072" +
    "\uffb5\073\162\074\176\075\156\102\uffb5\103\u01eb\107\uffb5" +
    "\115\uffb5\116\uffb5\117\uffb5\120\uffb5\121\uffb5\127\145\001" +
    "\002\000\034\021\174\023\164\024\165\043\151\045\177" +
    "\052\146\055\171\056\175\073\162\074\176\075\156\104" +
    "\u01ef\127\145\001\002\000\036\003\170\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\104\u01ed\127\145\001\002\000\034" +
    "\021\174\023\164\024\165\043\151\045\177\052\146\055" +
    "\171\056\175\073\162\074\176\075\156\104\u01ee\127\145" +
    "\001\002\000\040\021\uff44\023\uff44\024\uff44\043\uff44\045" +
    "\uff44\052\uff44\053\uff44\055\uff44\056\uff44\063\uff44\073\uff44" +
    "\074\uff44\075\uff44\104\uff44\127\uff44\001\002\000\040\021" +
    "\uff49\023\uff49\024\uff49\043\uff49\045\uff49\052\uff49\053\uff49" +
    "\055\uff49\056\uff49\063\uff49\073\uff49\074\uff49\075\uff49\104" +
    "\uff49\127\uff49\001\002\000\040\021\uff45\023\uff45\024\uff45" +
    "\043\uff45\045\uff45\052\uff45\053\uff45\055\uff45\056\uff45\063" +
    "\uff45\073\uff45\074\uff45\075\uff45\104\uff45\127\uff45\001\002" +
    "\000\034\021\174\023\164\024\165\043\151\045\177\052" +
    "\146\055\171\056\175\073\162\074\176\075\156\104\u01f1" +
    "\127\145\001\002\000\040\021\uff46\023\uff46\024\uff46\043" +
    "\uff46\045\uff46\052\uff46\053\uff46\055\uff46\056\uff46\063\uff46" +
    "\073\uff46\074\uff46\075\uff46\104\uff46\127\uff46\001\002\000" +
    "\034\003\170\021\174\023\164\024\165\043\151\045\177" +
    "\052\146\055\171\056\175\073\162\074\176\075\156\127" +
    "\145\001\002\000\034\021\174\023\164\024\165\043\151" +
    "\045\177\052\146\055\171\056\175\073\162\074\176\075" +
    "\156\104\u01f4\127\145\001\002\000\040\021\uff47\023\uff47" +
    "\024\uff47\043\uff47\045\uff47\052\uff47\053\uff47\055\uff47\056" +
    "\uff47\063\uff47\073\uff47\074\uff47\075\uff47\104\uff47\127\uff47" +
    "\001\002\000\006\002\ufff2\026\ufff2\001\002\000\004\103" +
    "\u0206\001\002\000\004\103\u0203\001\002\000\006\061\u01fa" +
    "\103\u01f9\001\002\000\034\003\170\021\174\023\164\024" +
    "\165\043\151\045\177\052\146\055\171\056\175\073\162" +
    "\074\176\075\156\127\145\001\002\000\036\003\170\021" +
    "\174\023\164\024\165\043\151\045\177\052\146\055\171" +
    "\056\175\073\162\074\176\075\156\103\u01fc\127\145\001" +
    "\002\000\034\021\174\023\164\024\165\043\151\045\177" +
    "\052\146\055\171\056\175\073\162\074\176\075\156\104" +
    "\u0200\127\145\001\002\000\036\003\170\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\104\u01fe\127\145\001\002\000\034" +
    "\021\174\023\164\024\165\043\151\045\177\052\146\055" +
    "\171\056\175\073\162\074\176\075\156\104\u01ff\127\145" +
    "\001\002\000\040\021\uff54\023\uff54\024\uff54\043\uff54\045" +
    "\uff54\052\uff54\053\uff54\055\uff54\056\uff54\063\uff54\073\uff54" +
    "\074\uff54\075\uff54\104\uff54\127\uff54\001\002\000\040\021" +
    "\uff58\023\uff58\024\uff58\043\uff58\045\uff58\052\uff58\053\uff58" +
    "\055\uff58\056\uff58\063\uff58\073\uff58\074\uff58\075\uff58\104" +
    "\uff58\127\uff58\001\002\000\040\021\uff55\023\uff55\024\uff55" +
    "\043\uff55\045\uff55\052\uff55\053\uff55\055\uff55\056\uff55\063" +
    "\uff55\073\uff55\074\uff55\075\uff55\104\uff55\127\uff55\001\002" +
    "\000\034\021\174\023\164\024\165\043\151\045\177\052" +
    "\146\055\171\056\175\073\162\074\176\075\156\104\u0202" +
    "\127\145\001\002\000\040\021\uff56\023\uff56\024\uff56\043" +
    "\uff56\045\uff56\052\uff56\053\uff56\055\uff56\056\uff56\063\uff56" +
    "\073\uff56\074\uff56\075\uff56\104\uff56\127\uff56\001\002\000" +
    "\034\003\170\021\174\023\164\024\165\043\151\045\177" +
    "\052\146\055\171\056\175\073\162\074\176\075\156\127" +
    "\145\001\002\000\034\021\174\023\164\024\165\043\151" +
    "\045\177\052\146\055\171\056\175\073\162\074\176\075" +
    "\156\104\u0205\127\145\001\002\000\040\021\uff57\023\uff57" +
    "\024\uff57\043\uff57\045\uff57\052\uff57\053\uff57\055\uff57\056" +
    "\uff57\063\uff57\073\uff57\074\uff57\075\uff57\104\uff57\127\uff57" +
    "\001\002\000\034\003\170\021\174\023\164\024\165\043" +
    "\151\045\177\052\146\055\171\056\175\073\162\074\176" +
    "\075\156\127\145\001\002\000\034\021\174\023\164\024" +
    "\165\043\151\045\177\052\146\055\171\056\175\073\162" +
    "\074\176\075\156\104\u0208\127\145\001\002\000\040\021" +
    "\uff53\023\uff53\024\uff53\043\uff53\045\uff53\052\uff53\053\uff53" +
    "\055\uff53\056\uff53\063\uff53\073\uff53\074\uff53\075\uff53\104" +
    "\uff53\127\uff53\001\002\000\014\003\u0219\075\u021b\102\u021c" +
    "\110\u021a\125\u0218\001\002\000\004\110\u020b\001\002\000" +
    "\004\004\u020c\001\002\000\004\125\u020d\001\002\000\006" +
    "\073\u0210\074\u020e\001\002\000\004\075\uff19\001\002\000" +
    "\004\075\u0211\001\002\000\004\075\uff1a\001\002\000\004" +
    "\125\u0212\001\002\000\022\004\220\005\205\006\206\025" +
    "\215\062\214\071\222\075\216\101\243\001\002\000\006" +
    "\072\224\102\u0214\001\002\000\004\103\u0215\001\002\000" +
    "\034\003\170\021\174\023\164\024\165\043\151\045\177" +
    "\052\146\055\171\056\175\073\162\074\176\075\156\127" +
    "\145\001\002\000\034\021\174\023\164\024\165\043\151" +
    "\045\177\052\146\055\171\056\175\073\162\074\176\075" +
    "\156\104\u0217\127\145\001\002\000\040\021\uff41\023\uff41" +
    "\024\uff41\043\uff41\045\uff41\052\uff41\053\uff41\055\uff41\056" +
    "\uff41\063\uff41\073\uff41\074\uff41\075\uff41\104\uff41\127\uff41" +
    "\001\002\000\004\073\u0270\001\002\000\004\125\u0267\001" +
    "\002\000\004\004\u025d\001\002\000\006\004\u0224\110\u0225" +
    "\001\002\000\006\003\u021e\103\u021d\001\002\000\034\003" +
    "\170\021\174\023\164\024\165\043\151\045\177\052\146" +
    "\055\171\056\175\073\162\074\176\075\156\127\145\001" +
    "\002\000\004\103\u021f\001\002\000\034\003\170\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\055\171\056" +
    "\175\073\162\074\176\075\156\127\145\001\002\000\034" +
    "\021\174\023\164\024\165\043\151\045\177\052\146\055" +
    "\171\056\175\073\162\074\176\075\156\104\u0221\127\145" +
    "\001\002\000\040\021\uff35\023\uff35\024\uff35\043\uff35\045" +
    "\uff35\052\uff35\053\uff35\055\uff35\056\uff35\063\uff35\073\uff35" +
    "\074\uff35\075\uff35\104\uff35\127\uff35\001\002\000\034\021" +
    "\174\023\164\024\165\043\151\045\177\052\146\055\171" +
    "\056\175\073\162\074\176\075\156\104\u0223\127\145\001" +
    "\002\000\040\021\uff36\023\uff36\024\uff36\043\uff36\045\uff36" +
    "\052\uff36\053\uff36\055\uff36\056\uff36\063\uff36\073\uff36\074" +
    "\uff36\075\uff36\104\uff36\127\uff36\001\002\000\004\125\u0254" +
    "\001\002\000\006\004\u0227\125\u0226\001\002\000\006\073" +
    "\u0210\074\u020e\001\002\000\004\125\u0228\001\002\000\010" +
    "\003\u022a\073\u0210\074\u020e\001\002\000\004\075\u0231\001" +
    "\002\000\004\125\u022b\001\002\000\022\004\220\005\205" +
    "\006\206\025\215\062\214\071\222\075\216\101\243\001" +
    "\002\000\006\072\224\102\u022d\001\002\000\004\103\u022e" +
    "\001\002\000\034\003\170\021\174\023\164\024\165\043" +
    "\151\045\177\052\146\055\171\056\175\073\162\074\176" +
    "\075\156\127\145\001\002\000\034\021\174\023\164\024" +
    "\165\043\151\045\177\052\146\055\171\056\175\073\162" +
    "\074\176\075\156\104\u0230\127\145\001\002\000\040\021" +
    "\uff38\023\uff38\024\uff38\043\uff38\045\uff38\052\uff38\053\uff38" +
    "\055\uff38\056\uff38\063\uff38\073\uff38\074\uff38\075\uff38\104" +
    "\uff38\127\uff38\001\002\000\024\004\220\005\205\006\206" +
    "\025\215\062\214\071\222\075\216\101\243\125\u0232\001" +
    "\002\000\026\003\u0239\004\220\005\205\006\206\025\215" +
    "\062\214\071\222\075\216\101\243\102\u0238\001\002\000" +
    "\006\072\224\102\u0234\001\002\000\004\103\u0235\001\002" +
    "\000\034\003\170\021\174\023\164\024\165\043\151\045" +
    "\177\052\146\055\171\056\175\073\162\074\176\075\156" +
    "\127\145\001\002\000\034\021\174\023\164\024\165\043" +
    "\151\045\177\052\146\055\171\056\175\073\162\074\176" +
    "\075\156\104\u0237\127\145\001\002\000\040\021\uff3c\023" +
    "\uff3c\024\uff3c\043\uff3c\045\uff3c\052\uff3c\053\uff3c\055\uff3c" +
    "\056\uff3c\063\uff3c\073\uff3c\074\uff3c\075\uff3c\104\uff3c\127" +
    "\uff3c\001\002\000\004\103\u0249\001\002\000\004\102\u0245" +
    "\001\002\000\010\072\224\102\u023c\103\u023b\001\002\000" +
    "\034\003\170\021\174\023\164\024\165\043\151\045\177" +
    "\052\146\055\171\056\175\073\162\074\176\075\156\127" +
    "\145\001\002\000\036\003\170\021\174\023\164\024\165" +
    "\043\151\045\177\052\146\055\171\056\175\073\162\074" +
    "\176\075\156\103\u023e\127\145\001\002\000\034\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\055\171\056" +
    "\175\073\162\074\176\075\156\104\u0242\127\145\001\002" +
    "\000\036\003\170\021\174\023\164\024\165\043\151\045" +
    "\177\052\146\055\171\056\175\073\162\074\176\075\156" +
    "\104\u0240\127\145\001\002\000\034\021\174\023\164\024" +
    "\165\043\151\045\177\052\146\055\171\056\175\073\162" +
    "\074\176\075\156\104\u0241\127\145\001\002\000\040\021" +
    "\uff33\023\uff33\024\uff33\043\uff33\045\uff33\052\uff33\053\uff33" +
    "\055\uff33\056\uff33\063\uff33\073\uff33\074\uff33\075\uff33\104" +
    "\uff33\127\uff33\001\002\000\040\021\uff42\023\uff42\024\uff42" +
    "\043\uff42\045\uff42\052\uff42\053\uff42\055\uff42\056\uff42\063" +
    "\uff42\073\uff42\074\uff42\075\uff42\104\uff42\127\uff42\001\002" +
    "\000\040\021\uff34\023\uff34\024\uff34\043\uff34\045\uff34\052" +
    "\uff34\053\uff34\055\uff34\056\uff34\063\uff34\073\uff34\074\uff34" +
    "\075\uff34\104\uff34\127\uff34\001\002\000\034\021\174\023" +
    "\164\024\165\043\151\045\177\052\146\055\171\056\175" +
    "\073\162\074\176\075\156\104\u0244\127\145\001\002\000" +
    "\040\021\uff3a\023\uff3a\024\uff3a\043\uff3a\045\uff3a\052\uff3a" +
    "\053\uff3a\055\uff3a\056\uff3a\063\uff3a\073\uff3a\074\uff3a\075" +
    "\uff3a\104\uff3a\127\uff3a\001\002\000\004\103\u0246\001\002" +
    "\000\034\003\170\021\174\023\164\024\165\043\151\045" +
    "\177\052\146\055\171\056\175\073\162\074\176\075\156" +
    "\127\145\001\002\000\034\021\174\023\164\024\165\043" +
    "\151\045\177\052\146\055\171\056\175\073\162\074\176" +
    "\075\156\104\u0248\127\145\001\002\000\040\021\uff37\023" +
    "\uff37\024\uff37\043\uff37\045\uff37\052\uff37\053\uff37\055\uff37" +
    "\056\uff37\063\uff37\073\uff37\074\uff37\075\uff37\104\uff37\127" +
    "\uff37\001\002\000\034\003\170\021\174\023\164\024\165" +
    "\043\151\045\177\052\146\055\171\056\175\073\162\074" +
    "\176\075\156\127\145\001\002\000\034\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\104\u024b\127\145\001\002\000\040" +
    "\021\uff3b\023\uff3b\024\uff3b\043\uff3b\045\uff3b\052\uff3b\053" +
    "\uff3b\055\uff3b\056\uff3b\063\uff3b\073\uff3b\074\uff3b\075\uff3b" +
    "\104\uff3b\127\uff3b\001\002\000\004\075\u024d\001\002\000" +
    "\004\125\u024e\001\002\000\022\004\220\005\205\006\206" +
    "\025\215\062\214\071\222\075\216\101\243\001\002\000" +
    "\006\072\224\102\u0250\001\002\000\004\103\u0251\001\002" +
    "\000\034\003\170\021\174\023\164\024\165\043\151\045" +
    "\177\052\146\055\171\056\175\073\162\074\176\075\156" +
    "\127\145\001\002\000\034\021\174\023\164\024\165\043" +
    "\151\045\177\052\146\055\171\056\175\073\162\074\176" +
    "\075\156\104\u0253\127\145\001\002\000\040\021\uff3e\023" +
    "\uff3e\024\uff3e\043\uff3e\045\uff3e\052\uff3e\053\uff3e\055\uff3e" +
    "\056\uff3e\063\uff3e\073\uff3e\074\uff3e\075\uff3e\104\uff3e\127" +
    "\uff3e\001\002\000\006\073\u0210\074\u020e\001\002\000\004" +
    "\075\u0256\001\002\000\004\125\u0257\001\002\000\022\004" +
    "\220\005\205\006\206\025\215\062\214\071\222\075\216" +
    "\101\243\001\002\000\006\072\224\102\u0259\001\002\000" +
    "\004\103\u025a\001\002\000\034\003\170\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\127\145\001\002\000\034\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\055\171\056" +
    "\175\073\162\074\176\075\156\104\u025c\127\145\001\002" +
    "\000\040\021\uff3f\023\uff3f\024\uff3f\043\uff3f\045\uff3f\052" +
    "\uff3f\053\uff3f\055\uff3f\056\uff3f\063\uff3f\073\uff3f\074\uff3f" +
    "\075\uff3f\104\uff3f\127\uff3f\001\002\000\004\125\u025e\001" +
    "\002\000\006\073\u0210\074\u020e\001\002\000\004\075\u0260" +
    "\001\002\000\004\125\u0261\001\002\000\022\004\220\005" +
    "\205\006\206\025\215\062\214\071\222\075\216\101\243" +
    "\001\002\000\006\072\224\102\u0263\001\002\000\004\103" +
    "\u0264\001\002\000\034\003\170\021\174\023\164\024\165" +
    "\043\151\045\177\052\146\055\171\056\175\073\162\074" +
    "\176\075\156\127\145\001\002\000\034\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\104\u0266\127\145\001\002\000\040" +
    "\021\uff40\023\uff40\024\uff40\043\uff40\045\uff40\052\uff40\053" +
    "\uff40\055\uff40\056\uff40\063\uff40\073\uff40\074\uff40\075\uff40" +
    "\104\uff40\127\uff40\001\002\000\006\073\u0210\074\u020e\001" +
    "\002\000\004\075\u0269\001\002\000\004\125\u026a\001\002" +
    "\000\022\004\220\005\205\006\206\025\215\062\214\071" +
    "\222\075\216\101\243\001\002\000\006\072\224\102\u026c" +
    "\001\002\000\004\103\u026d\001\002\000\034\003\170\021" +
    "\174\023\164\024\165\043\151\045\177\052\146\055\171" +
    "\056\175\073\162\074\176\075\156\127\145\001\002\000" +
    "\034\021\174\023\164\024\165\043\151\045\177\052\146" +
    "\055\171\056\175\073\162\074\176\075\156\104\u026f\127" +
    "\145\001\002\000\040\021\uff39\023\uff39\024\uff39\043\uff39" +
    "\045\uff39\052\uff39\053\uff39\055\uff39\056\uff39\063\uff39\073" +
    "\uff39\074\uff39\075\uff39\104\uff39\127\uff39\001\002\000\004" +
    "\075\u0271\001\002\000\004\125\u0272\001\002\000\022\004" +
    "\220\005\205\006\206\025\215\062\214\071\222\075\216" +
    "\101\243\001\002\000\006\072\224\102\u0274\001\002\000" +
    "\004\103\u0275\001\002\000\034\003\170\021\174\023\164" +
    "\024\165\043\151\045\177\052\146\055\171\056\175\073" +
    "\162\074\176\075\156\127\145\001\002\000\034\021\174" +
    "\023\164\024\165\043\151\045\177\052\146\055\171\056" +
    "\175\073\162\074\176\075\156\104\u0277\127\145\001\002" +
    "\000\040\021\uff3d\023\uff3d\024\uff3d\043\uff3d\045\uff3d\052" +
    "\uff3d\053\uff3d\055\uff3d\056\uff3d\063\uff3d\073\uff3d\074\uff3d" +
    "\075\uff3d\104\uff3d\127\uff3d\001\002\000\004\026\u027a\001" +
    "\002\000\004\026\ufff1\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\000\001\002\000\012\003\u027f\013\021\027" +
    "\u027e\075\023\001\002\000\006\003\ufff8\010\ufff8\001\002" +
    "\000\006\003\ufff7\010\ufff7\001\002\000\004\027\u0280\001" +
    "\002\000\006\003\ufff6\010\ufff6\001\002\000\010\003\ufff9" +
    "\036\ufff9\075\ufff9\001\002\000\010\003\ufffb\036\ufffb\075" +
    "\ufffb\001\002\000\010\003\ufffa\036\ufffa\075\ufffa\001\002" +
    "\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0282\000\006\002\006\055\005\001\001\000\006\002" +
    "\u0283\055\005\001\001\000\002\001\001\000\004\003\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\u027b\007\016\010\021\057\015\001\001" +
    "\000\004\004\140\001\001\000\012\005\014\007\016\010" +
    "\021\057\015\001\001\000\010\007\135\010\137\057\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\045\062\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\111\001\001\000\004\061\053" +
    "\001\001\000\002\001\001\000\004\061\064\001\001\000" +
    "\004\061\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\045\062\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\045\062\103\001\001\000\006" +
    "\011\045\062\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\045\062" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\045\062\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\045\062\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u0277\001\001\000\036\012\160\030\157\031\171" +
    "\035\147\036\143\040\156\042\151\043\152\044\162\045" +
    "\172\050\166\051\154\056\146\060\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u01f7\001\001\000" +
    "\002\001\001\000\034\012\234\030\233\031\171\036\227" +
    "\040\232\042\230\043\231\044\235\045\236\050\166\051" +
    "\154\056\146\060\165\001\001\000\020\013\220\014\216" +
    "\015\211\016\u01df\017\212\020\210\021\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\377\014\216\015\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\220\014\216\015" +
    "\211\016\u01b8\017\212\020\210\021\207\001\001\000\020" +
    "\013\220\014\216\015\211\016\u0188\017\212\020\210\021" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\361\001\001\000\020\013\220\014\216" +
    "\015\211\016\222\017\212\020\210\021\207\001\001\000" +
    "\002\001\001\000\004\053\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\354\001\001\000\004\022\352" +
    "\001\001\000\020\013\264\014\216\015\211\016\314\017" +
    "\212\020\210\021\207\001\001\000\002\001\001\000\006" +
    "\022\246\041\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\220" +
    "\014\216\015\211\017\243\020\210\021\207\001\001\000" +
    "\002\001\001\000\036\012\160\030\157\031\171\035\226" +
    "\036\143\040\156\042\151\043\152\044\162\045\172\050" +
    "\166\051\154\056\146\060\165\001\001\000\034\012\234" +
    "\030\233\031\171\036\227\040\232\042\230\043\231\044" +
    "\235\045\236\050\166\051\154\056\146\060\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\264\014\216\015\211" +
    "\016\265\017\212\020\210\021\207\001\001\000\002\001" +
    "\001\000\014\013\220\014\216\015\211\020\245\021\207" +
    "\001\001\000\006\022\246\041\250\001\001\000\012\013" +
    "\220\014\216\015\211\021\263\001\001\000\002\001\001" +
    "\000\012\013\220\014\216\015\211\021\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\302\015\211\001\001\000\006" +
    "\014\273\015\211\001\001\000\002\001\001\000\010\013" +
    "\301\014\216\015\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\300\001\001\000\004\015\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\220\014\216\015\211\016" +
    "\304\017\212\020\210\021\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\220\014\216\015\211\020" +
    "\307\021\207\001\001\000\006\022\246\041\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\160\030\157" +
    "\031\171\035\335\036\143\040\156\042\151\043\152\044" +
    "\162\045\172\050\166\051\154\056\146\060\165\001\001" +
    "\000\036\012\160\030\157\031\171\035\317\036\143\040" +
    "\156\042\151\043\152\044\162\045\172\050\166\051\154" +
    "\056\146\060\165\001\001\000\034\012\234\030\233\031" +
    "\171\036\227\040\232\042\230\043\231\044\235\045\236" +
    "\050\166\051\154\056\146\060\165\001\001\000\036\012" +
    "\160\030\157\031\171\035\321\036\143\040\156\042\151" +
    "\043\152\044\162\045\172\050\166\051\154\056\146\060" +
    "\165\001\001\000\034\012\234\030\233\031\171\036\227" +
    "\040\232\042\230\043\231\044\235\045\236\050\166\051" +
    "\154\056\146\060\165\001\001\000\002\001\001\000\036" +
    "\012\160\030\157\031\171\035\332\036\143\040\156\042" +
    "\151\043\152\044\162\045\172\050\166\051\154\056\146" +
    "\060\165\001\001\000\036\012\160\030\157\031\171\035" +
    "\325\036\143\040\156\042\151\043\152\044\162\045\172" +
    "\050\166\051\154\056\146\060\165\001\001\000\034\012" +
    "\234\030\233\031\171\036\227\040\232\042\230\043\231" +
    "\044\235\045\236\050\166\051\154\056\146\060\165\001" +
    "\001\000\036\012\160\030\157\031\171\035\327\036\143" +
    "\040\156\042\151\043\152\044\162\045\172\050\166\051" +
    "\154\056\146\060\165\001\001\000\034\012\234\030\233" +
    "\031\171\036\227\040\232\042\230\043\231\044\235\045" +
    "\236\050\166\051\154\056\146\060\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\234\030\233\031" +
    "\171\036\227\040\232\042\230\043\231\044\235\045\236" +
    "\050\166\051\154\056\146\060\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\012\234\030\233\031\171" +
    "\036\227\040\232\042\230\043\231\044\235\045\236\050" +
    "\166\051\154\056\146\060\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\160\030\157\031\171\035" +
    "\341\036\143\040\156\042\151\043\152\044\162\045\172" +
    "\050\166\051\154\056\146\060\165\001\001\000\034\012" +
    "\234\030\233\031\171\036\227\040\232\042\230\043\231" +
    "\044\235\045\236\050\166\051\154\056\146\060\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\160" +
    "\030\157\031\171\035\345\036\143\040\156\042\151\043" +
    "\152\044\162\045\172\050\166\051\154\056\146\060\165" +
    "\001\001\000\034\012\234\030\233\031\171\036\227\040" +
    "\232\042\230\043\231\044\235\045\236\050\166\051\154" +
    "\056\146\060\165\001\001\000\002\001\001\000\036\012" +
    "\160\030\157\031\171\035\350\036\143\040\156\042\151" +
    "\043\152\044\162\045\172\050\166\051\154\056\146\060" +
    "\165\001\001\000\034\012\234\030\233\031\171\036\227" +
    "\040\232\042\230\043\231\044\235\045\236\050\166\051" +
    "\154\056\146\060\165\001\001\000\002\001\001\000\014" +
    "\013\220\014\216\015\211\020\353\021\207\001\001\000" +
    "\006\022\246\041\250\001\001\000\014\013\220\014\216" +
    "\015\211\020\355\021\207\001\001\000\006\022\246\041" +
    "\250\001\001\000\002\001\001\000\004\026\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\365\027\367\030\366\031\171\060\165\001\001" +
    "\000\010\013\377\014\216\015\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\u0104\014\216\015\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u011a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\365\027\u0137\030\366\031\171\060\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\365\027\u0131\030\366\031\171" +
    "\060\165\001\001\000\014\012\365\027\u012d\030\366\031" +
    "\171\060\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\160\030\157\031\171\035\u0149\036\143\040\156\042" +
    "\151\043\152\044\162\045\172\050\166\051\154\056\146" +
    "\060\165\001\001\000\034\012\234\030\233\031\171\036" +
    "\227\040\232\042\230\043\231\044\235\045\236\050\166" +
    "\051\154\056\146\060\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\012\160\030\157\031\171\035\u014d" +
    "\036\143\040\156\042\151\043\152\044\162\045\172\050" +
    "\166\051\154\056\146\060\165\001\001\000\034\012\234" +
    "\030\233\031\171\036\227\040\232\042\230\043\231\044" +
    "\235\045\236\050\166\051\154\056\146\060\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\160\030" +
    "\157\031\171\035\u0151\036\143\040\156\042\151\043\152" +
    "\044\162\045\172\050\166\051\154\056\146\060\165\001" +
    "\001\000\034\012\234\030\233\031\171\036\227\040\232" +
    "\042\230\043\231\044\235\045\236\050\166\051\154\056" +
    "\146\060\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\160\030\157\031\171\035\u0155\036\143\040" +
    "\156\042\151\043\152\044\162\045\172\050\166\051\154" +
    "\056\146\060\165\001\001\000\034\012\234\030\233\031" +
    "\171\036\227\040\232\042\230\043\231\044\235\045\236" +
    "\050\166\051\154\056\146\060\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\160\030" +
    "\157\031\171\035\u015d\036\143\040\156\042\151\043\152" +
    "\044\162\045\172\050\166\051\154\056\146\060\165\001" +
    "\001\000\034\012\234\030\233\031\171\036\227\040\232" +
    "\042\230\043\231\044\235\045\236\050\166\051\154\056" +
    "\146\060\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\160\030\157\031\171\035\u0161\036\143\040" +
    "\156\042\151\043\152\044\162\045\172\050\166\051\154" +
    "\056\146\060\165\001\001\000\034\012\234\030\233\031" +
    "\171\036\227\040\232\042\230\043\231\044\235\045\236" +
    "\050\166\051\154\056\146\060\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\160\030\157\031\171" +
    "\035\u0165\036\143\040\156\042\151\043\152\044\162\045" +
    "\172\050\166\051\154\056\146\060\165\001\001\000\034" +
    "\012\234\030\233\031\171\036\227\040\232\042\230\043" +
    "\231\044\235\045\236\050\166\051\154\056\146\060\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\160\030\157\031\171\035\u0169\036\143\040\156\042\151" +
    "\043\152\044\162\045\172\050\166\051\154\056\146\060" +
    "\165\001\001\000\034\012\234\030\233\031\171\036\227" +
    "\040\232\042\230\043\231\044\235\045\236\050\166\051" +
    "\154\056\146\060\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u0171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u0177\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\u017b\001\001\000" +
    "\004\054\u017d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\u0182\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\264\014\216\015\211\016\u0191" +
    "\017\212\020\210\021\207\001\001\000\002\001\001\000" +
    "\014\012\365\027\u018a\030\366\031\171\060\165\001\001" +
    "\000\002\001\001\000\014\012\365\027\u018c\030\366\031" +
    "\171\060\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\365\027\u01b2\030\366\031" +
    "\171\060\165\001\001\000\002\001\001\000\014\012\365" +
    "\027\u0193\030\366\031\171\060\165\001\001\000\014\012" +
    "\365\027\u019a\030\366\031\171\060\165\001\001\000\002" +
    "\001\001\000\014\012\365\027\u0195\030\366\031\171\060" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\365\027\u01aa\030\366\031\171\060" +
    "\165\001\001\000\002\001\001\000\014\012\365\027\u019c" +
    "\030\366\031\171\060\165\001\001\000\014\012\365\027" +
    "\u01a1\030\366\031\171\060\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\365\027\u01a8\030\366\031\171\060\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\365" +
    "\027\u01ae\030\366\031\171\060\165\001\001\000\002\001" +
    "\001\000\014\012\365\027\u01b0\030\366\031\171\060\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\365\027\u01b4\030\366\031\171\060\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\264\014\216\015\211\016\u01bf\017\212" +
    "\020\210\021\207\001\001\000\002\001\001\000\014\012" +
    "\365\027\u01ba\030\366\031\171\060\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\365\027\u01d1\030\366\031\171\060\165\001\001\000\002" +
    "\001\001\000\014\012\365\027\u01c1\030\366\031\171\060" +
    "\165\001\001\000\014\012\365\027\u01c6\030\366\031\171" +
    "\060\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\365\027\u01ce\030\366\031\171\060\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\264\014\216\015\211\016\u01d8\017\212\020\210\021" +
    "\207\001\001\000\002\001\001\000\014\012\365\027\u01da" +
    "\030\366\031\171\060\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\264\014\216" +
    "\015\211\016\u01e6\017\212\020\210\021\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\160\030\157\031\171\035\u01e2\036\143\040\156\042" +
    "\151\043\152\044\162\045\172\050\166\051\154\056\146" +
    "\060\165\001\001\000\034\012\234\030\233\031\171\036" +
    "\227\040\232\042\230\043\231\044\235\045\236\050\166" +
    "\051\154\056\146\060\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\160\030\157\031\171\035\u01ef\036\143\040\156\042" +
    "\151\043\152\044\162\045\172\050\166\051\154\056\146" +
    "\060\165\001\001\000\036\012\160\030\157\031\171\035" +
    "\u01e9\036\143\040\156\042\151\043\152\044\162\045\172" +
    "\050\166\051\154\056\146\060\165\001\001\000\034\012" +
    "\234\030\233\031\171\036\227\040\232\042\230\043\231" +
    "\044\235\045\236\050\166\051\154\056\146\060\165\001" +
    "\001\000\036\012\160\030\157\031\171\035\u01eb\036\143" +
    "\040\156\042\151\043\152\044\162\045\172\050\166\051" +
    "\154\056\146\060\165\001\001\000\034\012\234\030\233" +
    "\031\171\036\227\040\232\042\230\043\231\044\235\045" +
    "\236\050\166\051\154\056\146\060\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\012" +
    "\234\030\233\031\171\036\227\040\232\042\230\043\231" +
    "\044\235\045\236\050\166\051\154\056\146\060\165\001" +
    "\001\000\002\001\001\000\036\012\160\030\157\031\171" +
    "\035\u01f2\036\143\040\156\042\151\043\152\044\162\045" +
    "\172\050\166\051\154\056\146\060\165\001\001\000\034" +
    "\012\234\030\233\031\171\036\227\040\232\042\230\043" +
    "\231\044\235\045\236\050\166\051\154\056\146\060\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\160" +
    "\030\157\031\171\035\u0200\036\143\040\156\042\151\043" +
    "\152\044\162\045\172\050\166\051\154\056\146\060\165" +
    "\001\001\000\036\012\160\030\157\031\171\035\u01fa\036" +
    "\143\040\156\042\151\043\152\044\162\045\172\050\166" +
    "\051\154\056\146\060\165\001\001\000\034\012\234\030" +
    "\233\031\171\036\227\040\232\042\230\043\231\044\235" +
    "\045\236\050\166\051\154\056\146\060\165\001\001\000" +
    "\036\012\160\030\157\031\171\035\u01fc\036\143\040\156" +
    "\042\151\043\152\044\162\045\172\050\166\051\154\056" +
    "\146\060\165\001\001\000\034\012\234\030\233\031\171" +
    "\036\227\040\232\042\230\043\231\044\235\045\236\050" +
    "\166\051\154\056\146\060\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\012\234\030" +
    "\233\031\171\036\227\040\232\042\230\043\231\044\235" +
    "\045\236\050\166\051\154\056\146\060\165\001\001\000" +
    "\002\001\001\000\036\012\160\030\157\031\171\035\u0203" +
    "\036\143\040\156\042\151\043\152\044\162\045\172\050" +
    "\166\051\154\056\146\060\165\001\001\000\034\012\234" +
    "\030\233\031\171\036\227\040\232\042\230\043\231\044" +
    "\235\045\236\050\166\051\154\056\146\060\165\001\001" +
    "\000\002\001\001\000\036\012\160\030\157\031\171\035" +
    "\u0206\036\143\040\156\042\151\043\152\044\162\045\172" +
    "\050\166\051\154\056\146\060\165\001\001\000\034\012" +
    "\234\030\233\031\171\036\227\040\232\042\230\043\231" +
    "\044\235\045\236\050\166\051\154\056\146\060\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\u020e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\220\014\216\015\211\016" +
    "\u0212\017\212\020\210\021\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\160\030\157\031\171\035" +
    "\u0215\036\143\040\156\042\151\043\152\044\162\045\172" +
    "\050\166\051\154\056\146\060\165\001\001\000\034\012" +
    "\234\030\233\031\171\036\227\040\232\042\230\043\231" +
    "\044\235\045\236\050\166\051\154\056\146\060\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\160\030\157\031\171\035\u0221\036\143\040\156" +
    "\042\151\043\152\044\162\045\172\050\166\051\154\056" +
    "\146\060\165\001\001\000\002\001\001\000\036\012\160" +
    "\030\157\031\171\035\u021f\036\143\040\156\042\151\043" +
    "\152\044\162\045\172\050\166\051\154\056\146\060\165" +
    "\001\001\000\034\012\234\030\233\031\171\036\227\040" +
    "\232\042\230\043\231\044\235\045\236\050\166\051\154" +
    "\056\146\060\165\001\001\000\002\001\001\000\034\012" +
    "\234\030\233\031\171\036\227\040\232\042\230\043\231" +
    "\044\235\045\236\050\166\051\154\056\146\060\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u024b\001\001\000\002\001\001\000\004\052" +
    "\u0228\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\220\014\216\015\211\016\u022b\017\212\020\210\021" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\160\030\157\031\171\035\u022e\036\143\040\156\042" +
    "\151\043\152\044\162\045\172\050\166\051\154\056\146" +
    "\060\165\001\001\000\034\012\234\030\233\031\171\036" +
    "\227\040\232\042\230\043\231\044\235\045\236\050\166" +
    "\051\154\056\146\060\165\001\001\000\002\001\001\000" +
    "\020\013\220\014\216\015\211\016\u0232\017\212\020\210" +
    "\021\207\001\001\000\020\013\220\014\216\015\211\016" +
    "\u0239\017\212\020\210\021\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\160\030\157\031\171\035" +
    "\u0235\036\143\040\156\042\151\043\152\044\162\045\172" +
    "\050\166\051\154\056\146\060\165\001\001\000\034\012" +
    "\234\030\233\031\171\036\227\040\232\042\230\043\231" +
    "\044\235\045\236\050\166\051\154\056\146\060\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\160\030\157\031\171\035" +
    "\u0242\036\143\040\156\042\151\043\152\044\162\045\172" +
    "\050\166\051\154\056\146\060\165\001\001\000\036\012" +
    "\160\030\157\031\171\035\u023c\036\143\040\156\042\151" +
    "\043\152\044\162\045\172\050\166\051\154\056\146\060" +
    "\165\001\001\000\034\012\234\030\233\031\171\036\227" +
    "\040\232\042\230\043\231\044\235\045\236\050\166\051" +
    "\154\056\146\060\165\001\001\000\036\012\160\030\157" +
    "\031\171\035\u023e\036\143\040\156\042\151\043\152\044" +
    "\162\045\172\050\166\051\154\056\146\060\165\001\001" +
    "\000\034\012\234\030\233\031\171\036\227\040\232\042" +
    "\230\043\231\044\235\045\236\050\166\051\154\056\146" +
    "\060\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\012\234\030\233\031\171\036\227" +
    "\040\232\042\230\043\231\044\235\045\236\050\166\051" +
    "\154\056\146\060\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\160\030\157\031\171\035\u0246\036" +
    "\143\040\156\042\151\043\152\044\162\045\172\050\166" +
    "\051\154\056\146\060\165\001\001\000\034\012\234\030" +
    "\233\031\171\036\227\040\232\042\230\043\231\044\235" +
    "\045\236\050\166\051\154\056\146\060\165\001\001\000" +
    "\002\001\001\000\036\012\160\030\157\031\171\035\u0249" +
    "\036\143\040\156\042\151\043\152\044\162\045\172\050" +
    "\166\051\154\056\146\060\165\001\001\000\034\012\234" +
    "\030\233\031\171\036\227\040\232\042\230\043\231\044" +
    "\235\045\236\050\166\051\154\056\146\060\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\220\014\216\015\211\016\u024e\017\212\020\210" +
    "\021\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\160\030\157\031\171\035\u0251\036\143\040\156" +
    "\042\151\043\152\044\162\045\172\050\166\051\154\056" +
    "\146\060\165\001\001\000\034\012\234\030\233\031\171" +
    "\036\227\040\232\042\230\043\231\044\235\045\236\050" +
    "\166\051\154\056\146\060\165\001\001\000\002\001\001" +
    "\000\004\052\u0254\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\220\014\216\015\211\016\u0257\017\212" +
    "\020\210\021\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\012\160\030\157\031\171\035\u025a\036\143" +
    "\040\156\042\151\043\152\044\162\045\172\050\166\051" +
    "\154\056\146\060\165\001\001\000\034\012\234\030\233" +
    "\031\171\036\227\040\232\042\230\043\231\044\235\045" +
    "\236\050\166\051\154\056\146\060\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\u025e\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\220\014\216" +
    "\015\211\016\u0261\017\212\020\210\021\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\160\030\157" +
    "\031\171\035\u0264\036\143\040\156\042\151\043\152\044" +
    "\162\045\172\050\166\051\154\056\146\060\165\001\001" +
    "\000\034\012\234\030\233\031\171\036\227\040\232\042" +
    "\230\043\231\044\235\045\236\050\166\051\154\056\146" +
    "\060\165\001\001\000\002\001\001\000\004\052\u0267\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\220" +
    "\014\216\015\211\016\u026a\017\212\020\210\021\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\160" +
    "\030\157\031\171\035\u026d\036\143\040\156\042\151\043" +
    "\152\044\162\045\172\050\166\051\154\056\146\060\165" +
    "\001\001\000\034\012\234\030\233\031\171\036\227\040" +
    "\232\042\230\043\231\044\235\045\236\050\166\051\154" +
    "\056\146\060\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\220\014\216\015\211" +
    "\016\u0272\017\212\020\210\021\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\160\030\157\031\171" +
    "\035\u0275\036\143\040\156\042\151\043\152\044\162\045" +
    "\172\050\166\051\154\056\146\060\165\001\001\000\034" +
    "\012\234\030\233\031\171\036\227\040\232\042\230\043" +
    "\231\044\235\045\236\050\166\051\154\056\146\060\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\135" +
    "\010\137\057\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 //Codigo del usuario
    private Editor editor;
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABEZA BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		System.out.println("Programa Correcto!!!!!");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CABEZA BLOQUE_DECLARACION error BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Instrucciones fuera del área de código");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CABEZA BLOQUE_DECLARACION BLOQUE_CODIGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el final del programa");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error INICIO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Contenido no esperado antes de iniciar el programa");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Programa no válido por errores de sintáxis.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABEZA ::= inicio_programa Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),"Nombre del programa");
            System.out.println("Inicio y nombre correcto");
        }
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABEZA ::= error Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_programa.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABEZA ::= inicio_programa error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Nombre del programa no válido, este no puede ser vacío ni iniciar con dígito.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE_DECLARACION ::= inicio_var fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto vacío");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES error fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error al especificar el bloque de declaraciones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_DECLARACION ::= Identificador DECLARACIONES fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_var. Tienes " + s);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_DECLARACION ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error al especificar el bloque de declaraciones");
        System.out.println("Error al especificar el bloque de declaraciones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE_CODIGO ::= inicio_bloque fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO vacío correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE_CODIGO ::= inicio_bloque SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO correcto\n");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE_CODIGO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error al identificar el bloque de código " + sright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES ::= DECLARACIONES DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES ::= DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES ::= DECLARACIONES DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACIONES ::= DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACIONES ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal estructurada la declaración.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACIONES ::= error fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal estructurada la declaración.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= definir Identificador como TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un "  + td.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Identificador Identificador como TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"definir\" ");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= definir Identificador como TIPO_DATO_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= definir Identificador Identificador TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\" ");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= definir Identificador TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar la palabra \"como\".");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= definir Identificador como PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el tipo de dato.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_ARREGLO ::= definir Identificador como arreglo Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arreglo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_ARREGLO ::= definir como arreglo Cor_a definir Identificador como arregloBi Cor_a Numero Cor_c Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arregloBi");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un " + td.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_A ::= definir Identificador Identificador TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\".");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_A ::= Identificador Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"definir\".");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_A ::= definir como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el nombre del identificador.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_A ::= definir Identificador TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar la palabra \"como\".");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_A ::= definir Identificador como Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el tipo de dato.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el signo =.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> El valor proporcionado no es válido.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= Identificador Asignacion_s Texto 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= Identificador Asignacion_s verdadero 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= Identificador Asignacion_s falso 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= Identificador Asignacion_s EXPRESION 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= Identificador Asignacion_s 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el valor a asignar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= Identificador Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= Identificador verdadero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= Identificador falso 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= Identificador EXPRESION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= Identificador Asignacion_s error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo determinar el valor a asignar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TERMINO ::= TERMINO Mul FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TERMINO ::= TERMINO Div FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FACTOR ::= Par_a EXPRESION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTOR ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION ::= CONDICION o CONDICION_2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION ::= CONDICION_2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION_2 ::= CONDICION_2 y CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_2",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICION_2 ::= CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_2",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICION_3 ::= CONDICION_3 OP_LOGICO CONDICION_4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICION_3 ::= CONDICION_3 OP_REL CONDICION_4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICION_3 ::= Texto OP_REL CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONDICION_3 ::= Decimal OP_REL CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONDICION_3 ::= Numero OP_REL CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICION_3 ::= CONDICION_4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICION_4 ::= verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION_4 ::= falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION_4 ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICION_4 ::= Identificador PUNTO estado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICION_4 ::= Par_a CONDICION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICION_4 ::= no Par_a CONDICION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_REL ::= Mayor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_REL ::= Menor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_REL ::= Diferente 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_REL ::= Mayor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_REL ::= Menor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP_REL ::= Igual 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DIRECCION ::= izquierda 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DIRECCION ::= derecha 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FACIL_SENTENCIA ::= METODO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FACIL_SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // METODO ::= incrementar Identificador 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un incremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // METODO ::= decrementar Identificador 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un decremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // METODO ::= MOSTRAR_TEXTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // METODO ::= MANIPULAR_COMPONENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MOSTRAR_TEXTO ::= mostrar PARAMETRO_TEXTO 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado mostrar texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MOSTRAR_TEXTO ::= mostrar error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error al identificar el texto dado");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado prender");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MANIPULAR_COMPONENTE ::= Identificador PUNTO apagar 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado apagar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender PUNTO COLOR 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado prender color");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MANIPULAR_COMPONENTE ::= Identificador PUNTO detener 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado detener motor");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar direccion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a TIEMPO Par_c 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar con tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito el valor de tiempo. Recuerda que es un numero entero y ya sea seg, hr o min.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a TEXTO Par_c 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado visualizar display");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a error Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo identificar el texto a visualizar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MANIPULAR_COMPONENTE ::= Identificador PUNTO error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrita la función del componente.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIEMPO ::= Tiempo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIEMPO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TEXTO ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA ::= SENTENCIA METODO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA ::= METODO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA ::= SENTENCIA ASIGNACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA ::= ASIGNACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA ::= SENTENCIA DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA ::= DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA ::= SENTENCIA SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA ::= SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA ::= SENTENCIA SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA ::= SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA ::= SENTENCIA SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA ::= SENTENCIA SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA ::= SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA ::= SENTENCIA SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA ::= SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA ::= error fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA ::= error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECISION ::= SENTENCIA_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECISION ::= SENTENCIA_FACIL_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECISION ::= SENTENCIA_FACIL_SINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_SI ::= si Par_a error Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_SI ::= si CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_SI ::= si Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_SI ::= si Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_SI ::= si Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque si");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA_SI ::= si Par_a error Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"sino\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque sino");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado FACIL SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA_FACIL_SI ::= Identificador Par_a CONDICION COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Escribiste mal la sentencia. Tienes: " + s.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Falta el ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA_FACIL_SI ::= facil_si CONDICION COMA FACIL_SENTENCIA PUNTO_COMA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis del bloque facil_si");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIA_FACIL_SI ::= facil_si Par_a COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la coma que separa la condición de la instrucción");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la instrucción a ejecutar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó cerrar el paréntesis del bloque fácil_si");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_FACIL_SI ::= facil_si Par_a error COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error al estructurar la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ser una sola sentencia");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		System.out.println("Se ha encontrado FACIL SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el ; en el facil_sino");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA_FACIL_SINO ::= facil_sino CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te saltaste la coma que separa la condición de la instrucción");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la instrucción a realizar cuando sea verdadero");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la coma que separa las instrucciones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la instrucción a realizar cuando sea falso");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó cerrar el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a error COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error al estructurar la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA error COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ser una sola sentencia");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ser una sola sentencia");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_REPETIR ::= repetir veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el número entero de repeticiones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"veces\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque repetir");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner las sentencias");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_REPETIR ::= repetir error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia repetir esta incompleta");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		System.out.println("Se ha encontrado FACIL REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO COMA FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Falta el ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo determinar el contenido del paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_FACIL_REPETIR ::= facil_repetir PARAMETRO_ENTERO COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque facil_repetir");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el número de repeticiones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO error FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te saltaste una coma");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la instrucción a repetir");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> La instrución esta vacía");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTENCIA_FACIL_REPETIR ::= facil_repetir error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de la sentencia facil_repetir, popr favor revisalo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado MIENTRAS");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA_MIENTRAS ::= mientras CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIA_MIENTRAS ::= mientras Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condicion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque mientras");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner sentencias dentro del bloque");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_MIENTRAS ::= mientras error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintaxis del ciclo mientras, por favor revisalo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado PARA");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTENCIA_PARA ::= para Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SENTENCIA_PARA ::= para Par_a Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner un nuevo identificador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTENCIA_PARA ::= para Par_a Identificador Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el signo = ");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el valor de la variable");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCIA_PARA ::= para Par_a COMA incrementar Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner ya sea \"incrementar\" o \"decrementar\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner una coma entre el incremento y la condicion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTENCIA_PARA ::= para Par_a error COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la declaración del contador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA error COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura del incremento/decremento");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA error Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTENCIA_PARA ::= para Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> La función para esta sin atributos");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SENTENCIA_PARA ::= para Par_a Par_c error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis del contenido de la función para.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque para");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner las sentencias del bloque para");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SELECTOR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_SELECTOR ::= selector Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la sentencia selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTENCIA_SELECTOR ::= selector Par_a Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el identificador en el selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTENCIA_SELECTOR ::= selector error Identificador Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis en el selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SENTENCIA_SELECTOR ::= selector Par_a error Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ir un identificador en el atributo de selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta agregar los casos");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // BLOQUE_SELECTOR ::= caso Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // BLOQUE_SELECTOR ::= caso Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // BLOQUE_SELECTOR ::= caso verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // BLOQUE_SELECTOR ::= caso falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // BLOQUE_SELECTOR ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector.");
        System.out.println("Error en casos del selector, punto coma en " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // BLOQUE_SELECTOR ::= error caso 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector.");
        System.out.println("Error en casos del selector, ir al caso en línea " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // BLOQUE_SELECTOR ::= error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector.");
        System.out.println("Error en casos del selector, ir a llave en la línea " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // PARAMETRO_DECIMAL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DECIMAL",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // PARAMETRO_DECIMAL ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DECIMAL",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // PARAMETRO_ENTERO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_ENTERO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // PARAMETRO_ENTERO ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_ENTERO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // PARAMETRO_TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_TEXTO",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // PARAMETRO_TEXTO ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_TEXTO",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // INC_DEC ::= incrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // INC_DEC ::= decrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TIPO_DATO_DEC ::= entero 
            {
              Object RESULT =null;
		RESULT = "entero";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TIPO_DATO_DEC ::= decimal 
            {
              Object RESULT =null;
		RESULT = "decimal";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TIPO_DATO_DEC ::= logico 
            {
              Object RESULT =null;
		RESULT = "logico";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TIPO_DATO_DEC ::= texto 
            {
              Object RESULT =null;
		RESULT = "texto";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TIPO_DATO_DEC ::= display 
            {
              Object RESULT =null;
		RESULT = "display";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TIPO_DATO_DEC ::= motor 
            {
              Object RESULT =null;
		RESULT = "motor";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TIPO_DATO_DEC ::= led 
            {
              Object RESULT =null;
		RESULT = "led";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TIPO_DATO_DEC ::= ledRGB 
            {
              Object RESULT =null;
		RESULT = "ledRGB";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TIPO_DATO_DEC ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = "";
        editor.ERRORES.add("Error de sintáxis en la línea " + (sright + 1)+ " --> Se esperaba un tipo de dato.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TIPO_VALOR_DEC ::= Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TIPO_VALOR_DEC ::= Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT =s ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TIPO_VALOR_DEC ::= Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TIPO_VALOR_DEC ::= VALOR_LOGICO_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // VALOR_LOGICO_DEC ::= verdadero 
            {
              Object RESULT =null;
		RESULT = "verdadero";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO_DEC",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // VALOR_LOGICO_DEC ::= falso 
            {
              Object RESULT =null;
		RESULT = "falso";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO_DEC",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // OP_LOGICO ::= y 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // OP_LOGICO ::= o 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
