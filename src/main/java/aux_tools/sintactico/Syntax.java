
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package aux_tools.sintactico;

import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\006\000\002\052" +
    "\002\000\002\046\005\000\002\046\004\000\002\046\004" +
    "\000\002\003\005\000\002\003\005\000\002\003\006\000" +
    "\002\003\006\000\002\005\005\000\002\005\004\000\002" +
    "\005\005\000\002\005\004\000\002\005\004\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\007\011\000\002\007\014\000\002" +
    "\010\010\000\002\010\010\000\002\010\010\000\002\010" +
    "\010\000\002\010\010\000\002\010\010\000\002\012\006" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\021\003\000\002\021\003\000\002\004\005\000" +
    "\002\004\004\000\002\025\005\000\002\025\005\000\002" +
    "\025\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\025\004" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\005\000\002\047\006\000\002\047\006\000\002" +
    "\047\006\000\002\047\010\000\002\047\010\000\002\047" +
    "\013\000\002\047\013\000\002\047\011\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\004\000\002\032\003\000\002\032\004\000\002\032" +
    "\003\000\002\032\004\000\002\032\003\000\002\032\004" +
    "\000\002\032\003\000\002\032\004\000\002\032\003\000" +
    "\002\032\004\000\002\032\003\000\002\032\004\000\002" +
    "\032\003\000\002\032\004\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\043\011" +
    "\000\002\043\015\000\002\044\007\000\002\044\016\000" +
    "\002\035\010\000\002\036\010\000\002\037\011\000\002" +
    "\040\020\000\002\041\011\000\002\045\010\000\002\045" +
    "\007\000\002\045\010\000\002\045\007\000\002\045\010" +
    "\000\002\045\007\000\002\045\010\000\002\045\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\006\035\004\076\006\001\002\000\006\003" +
    "\u0127\076\u0128\001\002\000\006\036\013\076\015\001\002" +
    "\000\004\076\uffff\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\004\076\012\001\002\000\006" +
    "\036\ufffe\076\ufffe\001\002\000\006\003\020\013\021\001" +
    "\002\000\006\003\074\010\075\001\002\000\006\003\020" +
    "\013\021\001\002\000\006\013\021\027\066\001\002\000" +
    "\004\100\065\001\002\000\004\100\064\001\002\000\004" +
    "\076\024\001\002\000\004\100\023\001\002\000\006\013" +
    "\ufff4\027\ufff4\001\002\000\004\012\025\001\002\000\026" +
    "\015\033\041\037\047\027\061\036\065\031\066\034\067" +
    "\032\070\026\133\030\134\035\001\002\000\010\027\ufff0" +
    "\100\ufff0\111\061\001\002\000\006\027\uffed\100\uffed\001" +
    "\002\000\004\106\056\001\002\000\010\027\ufff1\100\ufff1" +
    "\111\054\001\002\000\010\027\uffef\100\uffef\111\052\001" +
    "\002\000\006\027\uffee\100\uffee\001\002\000\010\027\ufff2" +
    "\100\ufff2\111\050\001\002\000\004\106\042\001\002\000" +
    "\010\027\uffeb\100\uffeb\111\040\001\002\000\006\027\uffec" +
    "\100\uffec\001\002\000\004\077\041\001\002\000\006\027" +
    "\uffe3\100\uffe3\001\002\000\004\004\043\001\002\000\004" +
    "\107\044\001\002\000\004\106\045\001\002\000\004\004" +
    "\046\001\002\000\004\107\047\001\002\000\006\027\uffe9" +
    "\100\uffe9\001\002\000\004\004\051\001\002\000\006\027" +
    "\uffe8\100\uffe8\001\002\000\004\006\053\001\002\000\006" +
    "\027\uffe4\100\uffe4\001\002\000\004\005\055\001\002\000" +
    "\006\027\uffe7\100\uffe7\001\002\000\004\004\057\001\002" +
    "\000\004\107\060\001\002\000\006\027\uffea\100\uffea\001" +
    "\002\000\006\025\063\063\062\001\002\000\006\027\uffe6" +
    "\100\uffe6\001\002\000\006\027\uffe5\100\uffe5\001\002\000" +
    "\006\013\ufff3\027\ufff3\001\002\000\006\013\ufff6\027\ufff6" +
    "\001\002\000\006\003\ufffa\010\ufffa\001\002\000\004\100" +
    "\072\001\002\000\004\100\071\001\002\000\006\013\ufff5" +
    "\027\ufff5\001\002\000\006\013\ufff7\027\ufff7\001\002\000" +
    "\004\026\u0120\001\002\000\004\026\u011f\001\002\000\032" +
    "\003\116\021\123\023\114\044\102\046\126\053\100\056" +
    "\120\057\124\074\112\075\125\076\106\127\077\001\002" +
    "\000\040\003\uffa2\021\uffa2\023\uffa2\044\uffa2\046\uffa2\053" +
    "\uffa2\054\uffa2\056\uffa2\057\uffa2\064\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\105\uffa2\127\uffa2\001\002\000\004\102\u0112\001" +
    "\002\000\004\004\u010d\001\002\000\034\003\177\021\123" +
    "\023\114\044\102\046\126\053\100\056\120\057\124\064" +
    "\u010c\074\112\075\125\076\106\127\077\001\002\000\004" +
    "\102\u0106\001\002\000\040\003\uff9e\021\uff9e\023\uff9e\044" +
    "\uff9e\046\uff9e\053\uff9e\054\uff9e\056\uff9e\057\uff9e\064\uff9e" +
    "\074\uff9e\075\uff9e\076\uff9e\105\uff9e\127\uff9e\001\002\000" +
    "\040\003\uff9c\021\uff9c\023\uff9c\044\uff9c\046\uff9c\053\uff9c" +
    "\054\uff9c\056\uff9c\057\uff9c\064\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\105\uff9c\127\uff9c\001\002\000\040\003\uff95\021\uff95" +
    "\023\uff95\044\uff95\046\uff95\053\uff95\054\uff95\056\uff95\057" +
    "\uff95\064\uff95\074\uff95\075\uff95\076\uff95\105\uff95\127\uff95" +
    "\001\002\000\006\111\321\124\320\001\002\000\040\003" +
    "\uffa0\021\uffa0\023\uffa0\044\uffa0\046\uffa0\053\uffa0\054\uffa0" +
    "\056\uffa0\057\uffa0\064\uffa0\074\uffa0\075\uffa0\076\uffa0\105" +
    "\uffa0\127\uffa0\001\002\000\040\003\uffa6\021\uffa6\023\uffa6" +
    "\044\uffa6\046\uffa6\053\uffa6\054\uffa6\056\uffa6\057\uffa6\064" +
    "\uffa6\074\uffa6\075\uffa6\076\uffa6\105\uffa6\127\uffa6\001\002" +
    "\000\040\003\uffa4\021\uffa4\023\uffa4\044\uffa4\046\uffa4\053" +
    "\uffa4\054\uffa4\056\uffa4\057\uffa4\064\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\105\uffa4\127\uffa4\001\002\000\006\076\315\100" +
    "\314\001\002\000\040\003\uff9a\021\uff9a\023\uff9a\044\uff9a" +
    "\046\uff9a\053\uff9a\054\uff9a\056\uff9a\057\uff9a\064\uff9a\074" +
    "\uff9a\075\uff9a\076\uff9a\105\uff9a\127\uff9a\001\002\000\004" +
    "\102\277\001\002\000\040\003\uff96\021\uff96\023\uff96\044" +
    "\uff96\046\uff96\053\uff96\054\uff96\056\uff96\057\uff96\064\uff96" +
    "\074\uff96\075\uff96\076\uff96\105\uff96\127\uff96\001\002\000" +
    "\042\003\uff97\021\uff97\023\uff97\044\uff97\046\uff97\053\uff97" +
    "\054\uff97\056\uff97\057\uff97\064\uff97\074\uff97\075\uff97\076" +
    "\uff97\100\206\105\uff97\127\uff97\001\002\000\040\003\uffbc" +
    "\021\uffbc\023\uffbc\044\uffbc\046\uffbc\053\uffbc\054\uffbc\056" +
    "\uffbc\057\uffbc\064\uffbc\074\uffbc\075\uffbc\076\uffbc\105\uffbc" +
    "\127\uffbc\001\002\000\004\102\221\001\002\000\040\003" +
    "\uffbd\021\uffbd\023\uffbd\044\uffbd\046\uffbd\053\uffbd\054\uffbd" +
    "\056\uffbd\057\uffbd\064\uffbd\074\uffbd\075\uffbd\076\uffbd\105" +
    "\uffbd\127\uffbd\001\002\000\040\003\uff98\021\uff98\023\uff98" +
    "\044\uff98\046\uff98\053\uff98\054\uff98\056\uff98\057\uff98\064" +
    "\uff98\074\uff98\075\uff98\076\uff98\105\uff98\127\uff98\001\002" +
    "\000\004\102\214\001\002\000\004\102\142\001\002\000" +
    "\006\076\137\100\136\001\002\000\012\003\127\006\131" +
    "\076\132\100\130\001\002\000\004\100\135\001\002\000" +
    "\040\003\uffb8\021\uffb8\023\uffb8\044\uffb8\046\uffb8\053\uffb8" +
    "\054\uffb8\056\uffb8\057\uffb8\064\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\105\uffb8\127\uffb8\001\002\000\004\100\134\001\002" +
    "\000\004\100\133\001\002\000\040\003\uffb9\021\uffb9\023" +
    "\uffb9\044\uffb9\046\uffb9\053\uffb9\054\uffb9\056\uffb9\057\uffb9" +
    "\064\uffb9\074\uffb9\075\uffb9\076\uffb9\105\uffb9\127\uffb9\001" +
    "\002\000\040\003\uffba\021\uffba\023\uffba\044\uffba\046\uffba" +
    "\053\uffba\054\uffba\056\uffba\057\uffba\064\uffba\074\uffba\075" +
    "\uffba\076\uffba\105\uffba\127\uffba\001\002\000\040\003\uffb7" +
    "\021\uffb7\023\uffb7\044\uffb7\046\uffb7\053\uffb7\054\uffb7\056" +
    "\uffb7\057\uffb7\064\uffb7\074\uffb7\075\uffb7\076\uffb7\105\uffb7" +
    "\127\uffb7\001\002\000\040\003\uffbe\021\uffbe\023\uffbe\044" +
    "\uffbe\046\uffbe\053\uffbe\054\uffbe\056\uffbe\057\uffbe\064\uffbe" +
    "\074\uffbe\075\uffbe\076\uffbe\105\uffbe\127\uffbe\001\002\000" +
    "\006\003\140\100\141\001\002\000\040\003\uffbf\021\uffbf" +
    "\023\uffbf\044\uffbf\046\uffbf\053\uffbf\054\uffbf\056\uffbf\057" +
    "\uffbf\064\uffbf\074\uffbf\075\uffbf\076\uffbf\105\uffbf\127\uffbf" +
    "\001\002\000\040\003\uffc0\021\uffc0\023\uffc0\044\uffc0\046" +
    "\uffc0\053\uffc0\054\uffc0\056\uffc0\057\uffc0\064\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\105\uffc0\127\uffc0\001\002\000\012\004" +
    "\143\025\146\063\144\076\147\001\002\000\014\116\151" +
    "\117\152\120\155\121\150\122\154\001\002\000\010\103" +
    "\uffcf\110\207\125\uffcf\001\002\000\004\103\165\001\002" +
    "\000\010\103\uffce\110\163\125\uffce\001\002\000\022\103" +
    "\uffcd\110\156\116\151\117\152\120\155\121\150\122\154" +
    "\125\uffcd\001\002\000\006\004\uffcc\076\uffcc\001\002\000" +
    "\006\004\uffc8\076\uffc8\001\002\000\006\004\uffc9\076\uffc9" +
    "\001\002\000\006\004\161\076\162\001\002\000\006\004" +
    "\uffcb\076\uffcb\001\002\000\006\004\uffca\076\uffca\001\002" +
    "\000\006\025\160\063\157\001\002\000\006\103\uffd6\125" +
    "\uffd6\001\002\000\006\103\uffd7\125\uffd7\001\002\000\006" +
    "\103\uffd3\125\uffd3\001\002\000\006\103\uffd1\125\uffd1\001" +
    "\002\000\004\076\164\001\002\000\006\103\uffd4\125\uffd4" +
    "\001\002\000\004\104\166\001\002\000\032\003\116\021" +
    "\123\023\114\044\102\046\126\053\100\056\120\057\124" +
    "\074\112\075\125\076\106\127\077\001\002\000\034\003" +
    "\177\021\123\023\114\044\102\046\126\053\100\056\120" +
    "\057\124\074\112\075\125\076\106\105\201\127\077\001" +
    "\002\000\040\003\uffa3\021\uffa3\023\uffa3\044\uffa3\046\uffa3" +
    "\053\uffa3\054\uffa3\056\uffa3\057\uffa3\064\uffa3\074\uffa3\075" +
    "\uffa3\076\uffa3\105\uffa3\127\uffa3\001\002\000\040\003\uff9f" +
    "\021\uff9f\023\uff9f\044\uff9f\046\uff9f\053\uff9f\054\uff9f\056" +
    "\uff9f\057\uff9f\064\uff9f\074\uff9f\075\uff9f\076\uff9f\105\uff9f" +
    "\127\uff9f\001\002\000\040\003\uff9d\021\uff9d\023\uff9d\044" +
    "\uff9d\046\uff9d\053\uff9d\054\uff9d\056\uff9d\057\uff9d\064\uff9d" +
    "\074\uff9d\075\uff9d\076\uff9d\105\uff9d\127\uff9d\001\002\000" +
    "\040\003\uffa1\021\uffa1\023\uffa1\044\uffa1\046\uffa1\053\uffa1" +
    "\054\uffa1\056\uffa1\057\uffa1\064\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\105\uffa1\127\uffa1\001\002\000\040\003\uffa7\021\uffa7" +
    "\023\uffa7\044\uffa7\046\uffa7\053\uffa7\054\uffa7\056\uffa7\057" +
    "\uffa7\064\uffa7\074\uffa7\075\uffa7\076\uffa7\105\uffa7\127\uffa7" +
    "\001\002\000\040\003\uffa5\021\uffa5\023\uffa5\044\uffa5\046" +
    "\uffa5\053\uffa5\054\uffa5\056\uffa5\057\uffa5\064\uffa5\074\uffa5" +
    "\075\uffa5\076\uffa5\105\uffa5\127\uffa5\001\002\000\040\003" +
    "\uff9b\021\uff9b\023\uff9b\044\uff9b\046\uff9b\053\uff9b\054\uff9b" +
    "\056\uff9b\057\uff9b\064\uff9b\074\uff9b\075\uff9b\076\uff9b\105" +
    "\uff9b\127\uff9b\001\002\000\004\100\206\001\002\000\040" +
    "\003\uff99\021\uff99\023\uff99\044\uff99\046\uff99\053\uff99\054" +
    "\uff99\056\uff99\057\uff99\064\uff99\074\uff99\075\uff99\076\uff99" +
    "\105\uff99\127\uff99\001\002\000\042\003\uff94\021\uff94\023" +
    "\uff94\044\uff94\046\uff94\053\uff94\054\uff94\056\uff94\057\uff94" +
    "\060\202\064\uff94\074\uff94\075\uff94\076\uff94\105\uff94\127" +
    "\uff94\001\002\000\004\104\203\001\002\000\032\003\116" +
    "\021\123\023\114\044\102\046\126\053\100\056\120\057" +
    "\124\074\112\075\125\076\106\127\077\001\002\000\034" +
    "\003\177\021\123\023\114\044\102\046\126\053\100\056" +
    "\120\057\124\074\112\075\125\076\106\105\205\127\077" +
    "\001\002\000\040\003\uff93\021\uff93\023\uff93\044\uff93\046" +
    "\uff93\053\uff93\054\uff93\056\uff93\057\uff93\064\uff93\074\uff93" +
    "\075\uff93\076\uff93\105\uff93\127\uff93\001\002\000\040\003" +
    "\uffbb\021\uffbb\023\uffbb\044\uffbb\046\uffbb\053\uffbb\054\uffbb" +
    "\056\uffbb\057\uffbb\064\uffbb\074\uffbb\075\uffbb\076\uffbb\105" +
    "\uffbb\127\uffbb\001\002\000\004\076\210\001\002\000\006" +
    "\103\uffd5\125\uffd5\001\002\000\006\004\212\076\213\001" +
    "\002\000\006\103\uffd0\125\uffd0\001\002\000\006\103\uffd2" +
    "\125\uffd2\001\002\000\004\004\215\001\002\000\004\125" +
    "\216\001\002\000\002\001\002\000\004\103\220\001\002" +
    "\000\040\003\uff8f\021\uff8f\023\uff8f\044\uff8f\046\uff8f\053" +
    "\uff8f\054\uff8f\056\uff8f\057\uff8f\064\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\105\uff8f\127\uff8f\001\002\000\004\076\222\001" +
    "\002\000\004\103\223\001\002\000\004\104\224\001\002" +
    "\000\012\004\225\006\227\025\231\063\226\001\002\000" +
    "\004\101\273\001\002\000\004\101\267\001\002\000\004" +
    "\101\263\001\002\000\014\004\236\006\240\025\241\063" +
    "\237\105\242\001\002\000\004\101\232\001\002\000\032" +
    "\003\116\021\123\023\114\044\102\046\126\053\100\056" +
    "\120\057\124\074\112\075\125\076\106\127\077\001\002" +
    "\000\034\003\177\021\123\023\114\044\102\046\126\053" +
    "\100\054\234\056\120\057\124\074\112\075\125\076\106" +
    "\127\077\001\002\000\004\100\235\001\002\000\014\004" +
    "\uff84\006\uff84\025\uff84\063\uff84\105\uff84\001\002\000\004" +
    "\101\257\001\002\000\004\101\253\001\002\000\004\101" +
    "\247\001\002\000\004\101\243\001\002\000\040\003\uff8c" +
    "\021\uff8c\023\uff8c\044\uff8c\046\uff8c\053\uff8c\054\uff8c\056" +
    "\uff8c\057\uff8c\064\uff8c\074\uff8c\075\uff8c\076\uff8c\105\uff8c" +
    "\127\uff8c\001\002\000\032\003\116\021\123\023\114\044" +
    "\102\046\126\053\100\056\120\057\124\074\112\075\125" +
    "\076\106\127\077\001\002\000\034\003\177\021\123\023" +
    "\114\044\102\046\126\053\100\054\245\056\120\057\124" +
    "\074\112\075\125\076\106\127\077\001\002\000\004\100" +
    "\246\001\002\000\014\004\uff85\006\uff85\025\uff85\063\uff85" +
    "\105\uff85\001\002\000\032\003\116\021\123\023\114\044" +
    "\102\046\126\053\100\056\120\057\124\074\112\075\125" +
    "\076\106\127\077\001\002\000\034\003\177\021\123\023" +
    "\114\044\102\046\126\053\100\054\251\056\120\057\124" +
    "\074\112\075\125\076\106\127\077\001\002\000\004\100" +
    "\252\001\002\000\014\004\uff89\006\uff89\025\uff89\063\uff89" +
    "\105\uff89\001\002\000\032\003\116\021\123\023\114\044" +
    "\102\046\126\053\100\056\120\057\124\074\112\075\125" +
    "\076\106\127\077\001\002\000\034\003\177\021\123\023" +
    "\114\044\102\046\126\053\100\054\255\056\120\057\124" +
    "\074\112\075\125\076\106\127\077\001\002\000\004\100" +
    "\256\001\002\000\014\004\uff87\006\uff87\025\uff87\063\uff87" +
    "\105\uff87\001\002\000\032\003\116\021\123\023\114\044" +
    "\102\046\126\053\100\056\120\057\124\074\112\075\125" +
    "\076\106\127\077\001\002\000\034\003\177\021\123\023" +
    "\114\044\102\046\126\053\100\054\261\056\120\057\124" +
    "\074\112\075\125\076\106\127\077\001\002\000\004\100" +
    "\262\001\002\000\014\004\uff8b\006\uff8b\025\uff8b\063\uff8b" +
    "\105\uff8b\001\002\000\032\003\116\021\123\023\114\044" +
    "\102\046\126\053\100\056\120\057\124\074\112\075\125" +
    "\076\106\127\077\001\002\000\034\003\177\021\123\023" +
    "\114\044\102\046\126\053\100\054\265\056\120\057\124" +
    "\074\112\075\125\076\106\127\077\001\002\000\004\100" +
    "\266\001\002\000\014\004\uff88\006\uff88\025\uff88\063\uff88" +
    "\105\uff88\001\002\000\032\003\116\021\123\023\114\044" +
    "\102\046\126\053\100\056\120\057\124\074\112\075\125" +
    "\076\106\127\077\001\002\000\034\003\177\021\123\023" +
    "\114\044\102\046\126\053\100\054\271\056\120\057\124" +
    "\074\112\075\125\076\106\127\077\001\002\000\004\100" +
    "\272\001\002\000\014\004\uff86\006\uff86\025\uff86\063\uff86" +
    "\105\uff86\001\002\000\032\003\116\021\123\023\114\044" +
    "\102\046\126\053\100\056\120\057\124\074\112\075\125" +
    "\076\106\127\077\001\002\000\034\003\177\021\123\023" +
    "\114\044\102\046\126\053\100\054\275\056\120\057\124" +
    "\074\112\075\125\076\106\127\077\001\002\000\004\100" +
    "\276\001\002\000\014\004\uff8a\006\uff8a\025\uff8a\063\uff8a" +
    "\105\uff8a\001\002\000\012\004\143\025\146\063\144\076" +
    "\147\001\002\000\006\103\302\125\301\001\002\000\002" +
    "\001\002\000\002\001\002\000\040\003\uff92\021\uff92\023" +
    "\uff92\044\uff92\046\uff92\053\uff92\054\uff92\056\uff92\057\uff92" +
    "\064\uff92\074\uff92\075\uff92\076\uff92\105\uff92\127\uff92\001" +
    "\002\000\004\103\305\001\002\000\004\104\306\001\002" +
    "\000\004\024\307\001\002\000\004\102\310\001\002\000" +
    "\002\001\002\000\004\103\312\001\002\000\004\105\313" +
    "\001\002\000\040\003\uff91\021\uff91\023\uff91\044\uff91\046" +
    "\uff91\053\uff91\054\uff91\056\uff91\057\uff91\064\uff91\074\uff91" +
    "\075\uff91\076\uff91\105\uff91\127\uff91\001\002\000\040\003" +
    "\uffc1\021\uffc1\023\uffc1\044\uffc1\046\uffc1\053\uffc1\054\uffc1" +
    "\056\uffc1\057\uffc1\064\uffc1\074\uffc1\075\uffc1\076\uffc1\105" +
    "\uffc1\127\uffc1\001\002\000\006\003\316\100\317\001\002" +
    "\000\040\003\uffc2\021\uffc2\023\uffc2\044\uffc2\046\uffc2\053" +
    "\uffc2\054\uffc2\056\uffc2\057\uffc2\064\uffc2\074\uffc2\075\uffc2" +
    "\076\uffc2\105\uffc2\127\uffc2\001\002\000\040\003\uffc3\021" +
    "\uffc3\023\uffc3\044\uffc3\046\uffc3\053\uffc3\054\uffc3\056\uffc3" +
    "\057\uffc3\064\uffc3\074\uffc3\075\uffc3\076\uffc3\105\uffc3\127" +
    "\uffc3\001\002\000\014\003\345\007\350\030\346\052\344" +
    "\126\347\001\002\000\012\004\322\005\330\076\327\102" +
    "\323\001\002\000\016\100\uffda\103\uffda\112\uffda\113\uffda" +
    "\114\uffda\115\uffda\001\002\000\012\004\322\005\330\076" +
    "\327\102\323\001\002\000\016\100\uffdc\103\uffdc\112\uffdc" +
    "\113\uffdc\114\uffdc\115\uffdc\001\002\000\016\100\uffdf\103" +
    "\uffdf\112\uffdf\113\uffdf\114\335\115\336\001\002\000\010" +
    "\100\331\112\333\113\332\001\002\000\016\100\uffd8\103" +
    "\uffd8\112\uffd8\113\uffd8\114\uffd8\115\uffd8\001\002\000\016" +
    "\100\uffd9\103\uffd9\112\uffd9\113\uffd9\114\uffd9\115\uffd9\001" +
    "\002\000\040\003\uffe2\021\uffe2\023\uffe2\044\uffe2\046\uffe2" +
    "\053\uffe2\054\uffe2\056\uffe2\057\uffe2\064\uffe2\074\uffe2\075" +
    "\uffe2\076\uffe2\105\uffe2\127\uffe2\001\002\000\012\004\322" +
    "\005\330\076\327\102\323\001\002\000\012\004\322\005" +
    "\330\076\327\102\323\001\002\000\016\100\uffe1\103\uffe1" +
    "\112\uffe1\113\uffe1\114\335\115\336\001\002\000\012\004" +
    "\322\005\330\076\327\102\323\001\002\000\012\004\322" +
    "\005\330\076\327\102\323\001\002\000\016\100\uffdd\103" +
    "\uffdd\112\uffdd\113\uffdd\114\uffdd\115\uffdd\001\002\000\016" +
    "\100\uffde\103\uffde\112\uffde\113\uffde\114\uffde\115\uffde\001" +
    "\002\000\016\100\uffe0\103\uffe0\112\uffe0\113\uffe0\114\335" +
    "\115\336\001\002\000\010\103\343\112\333\113\332\001" +
    "\002\000\016\100\uffdb\103\uffdb\112\uffdb\113\uffdb\114\uffdb" +
    "\115\uffdb\001\002\000\006\100\u0100\124\377\001\002\000" +
    "\004\100\376\001\002\000\004\124\360\001\002\000\004" +
    "\102\352\001\002\000\004\100\351\001\002\000\040\003" +
    "\uffb4\021\uffb4\023\uffb4\044\uffb4\046\uffb4\053\uffb4\054\uffb4" +
    "\056\uffb4\057\uffb4\064\uffb4\074\uffb4\075\uffb4\076\uffb4\105" +
    "\uffb4\127\uffb4\001\002\000\006\006\354\076\355\001\002" +
    "\000\004\103\356\001\002\000\004\103\uffa9\001\002\000" +
    "\004\103\uffa8\001\002\000\004\100\357\001\002\000\040" +
    "\003\uffaf\021\uffaf\023\uffaf\044\uffaf\046\uffaf\053\uffaf\054" +
    "\uffaf\056\uffaf\057\uffaf\064\uffaf\074\uffaf\075\uffaf\076\uffaf" +
    "\105\uffaf\127\uffaf\001\002\000\006\014\362\040\363\001" +
    "\002\000\006\100\365\102\364\001\002\000\006\100\uffc6" +
    "\102\uffc6\001\002\000\006\100\uffc7\102\uffc7\001\002\000" +
    "\010\003\366\076\367\077\370\001\002\000\040\003\uffb2" +
    "\021\uffb2\023\uffb2\044\uffb2\046\uffb2\053\uffb2\054\uffb2\056" +
    "\uffb2\057\uffb2\064\uffb2\074\uffb2\075\uffb2\076\uffb2\105\uffb2" +
    "\127\uffb2\001\002\000\004\103\374\001\002\000\004\103" +
    "\uffaa\001\002\000\004\103\uffab\001\002\000\004\103\372" +
    "\001\002\000\004\100\373\001\002\000\040\003\uffb1\021" +
    "\uffb1\023\uffb1\044\uffb1\046\uffb1\053\uffb1\054\uffb1\056\uffb1" +
    "\057\uffb1\064\uffb1\074\uffb1\075\uffb1\076\uffb1\105\uffb1\127" +
    "\uffb1\001\002\000\004\100\375\001\002\000\040\003\uffb0" +
    "\021\uffb0\023\uffb0\044\uffb0\046\uffb0\053\uffb0\054\uffb0\056" +
    "\uffb0\057\uffb0\064\uffb0\074\uffb0\075\uffb0\076\uffb0\105\uffb0" +
    "\127\uffb0\001\002\000\040\003\uffb6\021\uffb6\023\uffb6\044" +
    "\uffb6\046\uffb6\053\uffb6\054\uffb6\056\uffb6\057\uffb6\064\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\105\uffb6\127\uffb6\001\002\000" +
    "\010\130\u0104\131\u0102\132\u0103\001\002\000\040\003\uffb5" +
    "\021\uffb5\023\uffb5\044\uffb5\046\uffb5\053\uffb5\054\uffb5\056" +
    "\uffb5\057\uffb5\064\uffb5\074\uffb5\075\uffb5\076\uffb5\105\uffb5" +
    "\127\uffb5\001\002\000\004\100\u0105\001\002\000\004\100" +
    "\uffad\001\002\000\004\100\uffac\001\002\000\004\100\uffae" +
    "\001\002\000\040\003\uffb3\021\uffb3\023\uffb3\044\uffb3\046" +
    "\uffb3\053\uffb3\054\uffb3\056\uffb3\057\uffb3\064\uffb3\074\uffb3" +
    "\075\uffb3\076\uffb3\105\uffb3\127\uffb3\001\002\000\012\004" +
    "\143\025\146\063\144\076\147\001\002\000\004\103\u0108" +
    "\001\002\000\004\104\u0109\001\002\000\032\003\116\021" +
    "\123\023\114\044\102\046\126\053\100\056\120\057\124" +
    "\074\112\075\125\076\106\127\077\001\002\000\034\003" +
    "\177\021\123\023\114\044\102\046\126\053\100\056\120" +
    "\057\124\074\112\075\125\076\106\105\u010b\127\077\001" +
    "\002\000\040\003\uff8e\021\uff8e\023\uff8e\044\uff8e\046\uff8e" +
    "\053\uff8e\054\uff8e\056\uff8e\057\uff8e\064\uff8e\074\uff8e\075" +
    "\uff8e\076\uff8e\105\uff8e\127\uff8e\001\002\000\004\026\uffc5" +
    "\001\002\000\004\062\u010e\001\002\000\004\104\u010f\001" +
    "\002\000\032\003\116\021\123\023\114\044\102\046\126" +
    "\053\100\056\120\057\124\074\112\075\125\076\106\127" +
    "\077\001\002\000\034\003\177\021\123\023\114\044\102" +
    "\046\126\053\100\056\120\057\124\074\112\075\125\076" +
    "\106\105\u0111\127\077\001\002\000\040\003\uff90\021\uff90" +
    "\023\uff90\044\uff90\046\uff90\053\uff90\054\uff90\056\uff90\057" +
    "\uff90\064\uff90\074\uff90\075\uff90\076\uff90\105\uff90\127\uff90" +
    "\001\002\000\004\076\u0113\001\002\000\004\111\u0114\001" +
    "\002\000\004\004\u0115\001\002\000\004\125\u0116\001\002" +
    "\000\004\074\u0117\001\002\000\004\076\u0118\001\002\000" +
    "\004\125\u0119\001\002\000\012\004\143\025\146\063\144" +
    "\076\147\001\002\000\004\103\u011b\001\002\000\004\104" +
    "\u011c\001\002\000\032\003\116\021\123\023\114\044\102" +
    "\046\126\053\100\056\120\057\124\074\112\075\125\076" +
    "\106\127\077\001\002\000\034\003\177\021\123\023\114" +
    "\044\102\046\126\053\100\056\120\057\124\074\112\075" +
    "\125\076\106\105\u011e\127\077\001\002\000\040\003\uff8d" +
    "\021\uff8d\023\uff8d\044\uff8d\046\uff8d\053\uff8d\054\uff8d\056" +
    "\uff8d\057\uff8d\064\uff8d\074\uff8d\075\uff8d\076\uff8d\105\uff8d" +
    "\127\uff8d\001\002\000\004\026\uffc4\001\002\000\004\002" +
    "\000\001\002\000\006\013\021\027\u0122\001\002\000\006" +
    "\003\ufffb\010\ufffb\001\002\000\006\027\u0126\100\072\001" +
    "\002\000\006\027\u0125\100\071\001\002\000\006\003\ufff8" +
    "\010\ufff8\001\002\000\006\003\ufff9\010\ufff9\001\002\000" +
    "\006\036\ufffc\076\ufffc\001\002\000\006\036\ufffd\076\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\006\002\006\046\004\001\001\000\002\001" +
    "\001\000\004\003\013\001\001\000\004\052\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u0120\007\016\010\021\001\001" +
    "\000\004\004\072\001\001\000\010\005\015\007\016\010" +
    "\021\001\001\000\006\007\066\010\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\012\110\025\107\026\120\032\100\033\075\035" +
    "\106\036\102\037\103\040\112\041\121\043\114\044\104" +
    "\047\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\174\025\173\026\120\033\167" +
    "\035\172\036\170\037\171\040\175\041\177\043\114\044" +
    "\104\047\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\144\001\001\000\004\017\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\110\025\107\026\120\032\166\033\075\035\106\036" +
    "\102\037\103\040\112\041\121\043\114\044\104\047\116" +
    "\001\001\000\032\012\174\025\173\026\120\033\167\035" +
    "\172\036\170\037\171\040\175\041\177\043\114\044\104" +
    "\047\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\012\110" +
    "\025\107\026\120\032\203\033\075\035\106\036\102\037" +
    "\103\040\112\041\121\043\114\044\104\047\116\001\001" +
    "\000\032\012\174\025\173\026\120\033\167\035\172\036" +
    "\170\037\171\040\175\041\177\043\114\044\104\047\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\012\110\025\107\026\120\032\232\033\075\035\106" +
    "\036\102\037\103\040\112\041\121\043\114\044\104\047" +
    "\116\001\001\000\032\012\174\025\173\026\120\033\167" +
    "\035\172\036\170\037\171\040\175\041\177\043\114\044" +
    "\104\047\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\012\110\025\107" +
    "\026\120\032\243\033\075\035\106\036\102\037\103\040" +
    "\112\041\121\043\114\044\104\047\116\001\001\000\032" +
    "\012\174\025\173\026\120\033\167\035\172\036\170\037" +
    "\171\040\175\041\177\043\114\044\104\047\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\012\110\025" +
    "\107\026\120\032\247\033\075\035\106\036\102\037\103" +
    "\040\112\041\121\043\114\044\104\047\116\001\001\000" +
    "\032\012\174\025\173\026\120\033\167\035\172\036\170" +
    "\037\171\040\175\041\177\043\114\044\104\047\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\012\110" +
    "\025\107\026\120\032\253\033\075\035\106\036\102\037" +
    "\103\040\112\041\121\043\114\044\104\047\116\001\001" +
    "\000\032\012\174\025\173\026\120\033\167\035\172\036" +
    "\170\037\171\040\175\041\177\043\114\044\104\047\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\012" +
    "\110\025\107\026\120\032\257\033\075\035\106\036\102" +
    "\037\103\040\112\041\121\043\114\044\104\047\116\001" +
    "\001\000\032\012\174\025\173\026\120\033\167\035\172" +
    "\036\170\037\171\040\175\041\177\043\114\044\104\047" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\110\025\107\026\120\032\263\033\075\035\106\036" +
    "\102\037\103\040\112\041\121\043\114\044\104\047\116" +
    "\001\001\000\032\012\174\025\173\026\120\033\167\035" +
    "\172\036\170\037\171\040\175\041\177\043\114\044\104" +
    "\047\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\012\110\025\107\026\120\032\267\033\075\035\106" +
    "\036\102\037\103\040\112\041\121\043\114\044\104\047" +
    "\116\001\001\000\032\012\174\025\173\026\120\033\167" +
    "\035\172\036\170\037\171\040\175\041\177\043\114\044" +
    "\104\047\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\012\110\025\107\026\120\032\273\033\075\035" +
    "\106\036\102\037\103\040\112\041\121\043\114\044\104" +
    "\047\116\001\001\000\032\012\174\025\173\026\120\033" +
    "\167\035\172\036\170\037\171\040\175\041\177\043\114" +
    "\044\104\047\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\277\001\001\000\002\001\001\000\004" +
    "\024\303\001\001\000\004\024\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\325\014\324\015\323\001\001" +
    "\000\002\001\001\000\010\013\341\014\324\015\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\340\015\323\001\001\000\006\014\333\015\323" +
    "\001\001\000\002\001\001\000\004\015\337\001\001\000" +
    "\004\015\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\360\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\012\110\025\107\026\120\032\u0109\033\075" +
    "\035\106\036\102\037\103\040\112\041\121\043\114\044" +
    "\104\047\116\001\001\000\032\012\174\025\173\026\120" +
    "\033\167\035\172\036\170\037\171\040\175\041\177\043" +
    "\114\044\104\047\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\012" +
    "\110\025\107\026\120\032\u010f\033\075\035\106\036\102" +
    "\037\103\040\112\041\121\043\114\044\104\047\116\001" +
    "\001\000\032\012\174\025\173\026\120\033\167\035\172" +
    "\036\170\037\171\040\175\041\177\043\114\044\104\047" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u0119" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\012" +
    "\110\025\107\026\120\032\u011c\033\075\035\106\036\102" +
    "\037\103\040\112\041\121\043\114\044\104\047\116\001" +
    "\001\000\032\012\174\025\173\026\120\033\167\035\172" +
    "\036\170\037\171\040\175\041\177\043\114\044\104\047" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\u0122\010\u0123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 //Codigo del usuario
    private Editor editor;
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABEZA BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		System.out.println("Programa Correcto!!!!!");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_programa. Tienes " + s);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABEZA ::= Identificador NT$0 Identificador 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABEZA ::= inicio_programa Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),"Nombre del programa");
            System.out.println("Inicio y nombre correcto");
        }
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABEZA ::= inicio_programa error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta añadirle un nombre al programa");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE_DECLARACION ::= Identificador DECLARACIONES fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_var. Tienes " + s);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES DECLARACION fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al detectar el fin_var.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES DECLARACION_A fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al detectar el fin_var.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= DECLARACIONES DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES ::= DECLARACIONES DECLARACION_A PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES ::= DECLARACION_A PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal estructurada la declaración\n---->¿Revisaste si le pusiste el ;?\n---->¿Revisaste si estan bien escritas las palabras reservadas?");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= definir Identificador como entero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un entero");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= definir Identificador como decimal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un decimal");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= definir Identificador como logico 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un logico");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= definir Identificador como texto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= definir Identificador como display 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un display");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= definir Identificador como motor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un motor");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= definir Identificador como led 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un led");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= definir Identificador como tiempo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= definir Identificador como arreglo Cor_a Numero Cor_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arreglo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= definir Identificador como arregloBi Cor_a Numero Cor_c Cor_a Numero Cor_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arregloBi");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_A ::= definir Identificador como entero Asignacion_s Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un entero");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_A ::= definir Identificador como decimal Asignacion_s Decimal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un decimal");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_A ::= definir Identificador como logico Asignacion_s verdadero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un logico");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_A ::= definir Identificador como logico Asignacion_s falso 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un logico");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_A ::= definir Identificador como texto Asignacion_s Texto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_A ::= definir Identificador como tiempo Asignacion_s Tiempo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val.toString());
        }System.out.println("Se encontro una declaracion con asignacion de un tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= Identificador Asignacion_s EXPRESION PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERMINO ::= TERMINO Mul FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TERMINO ::= TERMINO Div FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= Par_a EXPRESION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICION ::= Identificador Igual falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICION ::= Identificador Igual verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICION ::= verdadero Igual Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICION ::= falso Igual Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= Identificador OP_REL Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= Numero OP_REL Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= Identificador OP_REL Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= Numero OP_REL Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_REL ::= Mayor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_REL ::= Menor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_REL ::= Diferente 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_REL ::= Mayor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_REL ::= Menor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DIRECCION ::= izquierda 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DIRECCION ::= derecha 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE_CODIGO ::= inicio_bloque SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE_CODIGO ::= error fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_programa.\n---->¿Revisaste si le pusiste el ;?\n---->¿Revisaste si estan bien escritas las palabras reservadas?");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METODO ::= incrementar Identificador PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un incremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METODO ::= incrementar Identificador error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta el ;");
        System.out.println("\nEncontrado un decremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // METODO ::= incrementar PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner el identificador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METODO ::= decrementar Identificador PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un decremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODO ::= decrementar Identificador error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta el ;");
        System.out.println("\nEncontrado un decremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // METODO ::= decrementar PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner el identificador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // METODO ::= MOSTRAR_TEXTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODO ::= MANIPULAR_COMPONENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODO ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_programa.\n---->¿Revisaste si le pusiste el ;?\n---->¿Revisaste si estan bien escritas las palabras reservadas?");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MOSTRAR_TEXTO ::= mostrar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado mostrar texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MOSTRAR_TEXTO ::= mostrar Identificador PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado mostrar texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MOSTRAR_TEXTO ::= mostrar PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner el identificador o al menos una cadena");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MOSTRAR_TEXTO ::= mostrar error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal estructurada la instrucción. ¿Pusiste el ;? ¿No te saltaste el identificador?");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MANIPULAR_COMPONENTE ::= Identificador PUNTO error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal escrita la función del componente.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado prender");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MANIPULAR_COMPONENTE ::= Identificador PUNTO apagar PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado apagar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender PUNTO COLOR PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado prender color");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar direccion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a TIEMPO Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar con tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
        editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal escrito el valor de tiempo. Recuerda que es un numero entero y ya sea seg, hr o min.");
    System.out.println("\nEncontrado girar con tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a TEXTO Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado visualizar display");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIEMPO ::= Tiempo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIEMPO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TEXTO ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA ::= SENTENCIA DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA ::= DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA ::= SENTENCIA SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA ::= SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA ::= SENTENCIA SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA ::= SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA ::= SENTENCIA SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA ::= SENTENCIA SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA ::= SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA ::= SENTENCIA SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA ::= SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECISION ::= SENTENCIA_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECISION ::= SENTENCIA_FACIL_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION Par_c FACIL_SENTENCIA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado FACIL SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado FACIL SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_REPETIR ::= repetir Numero veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a Numero COMA FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado FACIL REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado MIENTRAS");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA incrementar Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado PARA");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SELECTOR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BLOQUE_SELECTOR ::= Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BLOQUE_SELECTOR ::= Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BLOQUE_SELECTOR ::= verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BLOQUE_SELECTOR ::= falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
