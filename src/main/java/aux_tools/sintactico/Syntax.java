
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package aux_tools.sintactico;

import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;
import aux_tools.sintactico.ErroresSintacticos;
import aux_tools.Simbolo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\366\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\002\006\000\002\002\005\000\002\002\006" +
    "\000\002\002\004\000\002\002\003\000\002\053\007\000" +
    "\002\053\007\000\002\053\006\000\002\053\006\000\002" +
    "\053\006\000\002\053\006\000\002\053\004\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\004\000\002\003\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\005\004\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\005\000" +
    "\002\007\007\000\002\007\007\000\002\007\007\000\002" +
    "\007\006\000\002\007\006\000\002\010\011\000\002\010" +
    "\011\000\002\010\010\000\002\010\011\000\002\010\010" +
    "\000\002\010\010\000\002\010\010\000\002\010\010\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\017\005\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\022\003" +
    "\000\002\022\003\000\002\045\005\000\002\045\003\000" +
    "\002\025\004\000\002\025\004\000\002\025\003\000\002" +
    "\025\003\000\002\026\004\000\002\026\004\000\002\056" +
    "\005\000\002\056\005\000\002\056\010\000\002\056\007" +
    "\000\002\056\007\000\002\056\010\000\002\056\007\000" +
    "\002\056\005\000\002\056\007\000\002\056\012\000\002" +
    "\056\013\000\002\056\010\000\002\056\010\000\002\056" +
    "\010\000\002\056\005\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\032\005\000\002\032\004\000\002\032\004\000\002" +
    "\032\003\000\002\032\005\000\002\032\004\000\002\032" +
    "\004\000\002\032\003\000\002\032\004\000\002\032\003" +
    "\000\002\032\004\000\002\032\003\000\002\032\004\000" +
    "\002\032\003\000\002\032\004\000\002\032\003\000\002" +
    "\032\004\000\002\032\003\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\033\003\000\002\046\011" +
    "\000\002\046\010\000\002\046\011\000\002\046\010\000" +
    "\002\046\010\000\002\046\010\000\002\046\010\000\002" +
    "\046\015\000\002\046\015\000\002\046\014\000\002\046" +
    "\014\000\002\035\010\000\002\035\010\000\002\035\010" +
    "\000\002\035\007\000\002\035\007\000\002\035\010\000" +
    "\002\035\007\000\002\035\007\000\002\035\010\000\002" +
    "\035\007\000\002\035\007\000\002\040\011\000\002\040" +
    "\010\000\002\040\010\000\002\040\010\000\002\040\010" +
    "\000\002\040\010\000\002\040\005\000\002\041\020\000" +
    "\002\041\017\000\002\041\017\000\002\041\017\000\002" +
    "\041\017\000\002\041\015\000\002\041\017\000\002\041" +
    "\017\000\002\041\017\000\002\041\016\000\002\041\017" +
    "\000\002\041\020\000\002\041\010\000\002\041\011\000" +
    "\002\041\017\000\002\041\017\000\002\042\011\000\002" +
    "\042\010\000\002\042\010\000\002\042\010\000\002\042" +
    "\011\000\002\042\010\000\002\042\010\000\002\052\011" +
    "\000\002\052\010\000\002\052\011\000\002\052\010\000" +
    "\002\052\011\000\002\052\010\000\002\052\011\000\002" +
    "\052\010\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\051\003\000\002\051\003\000\002\050\003" +
    "\000\002\050\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\011\003\000" +
    "\002\011\003\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u023f\000\010\003\004\035\005\074\007\001\002\000" +
    "\016\002\ufffa\003\u023c\013\022\035\005\036\021\074\007" +
    "\001\002\000\006\074\u0232\122\u0231\001\002\000\014\003" +
    "\026\010\017\013\022\036\021\074\025\001\002\000\004" +
    "\074\012\001\002\000\004\002\011\001\002\000\004\002" +
    "\001\001\002\000\004\122\013\001\002\000\004\006\014" +
    "\001\002\000\004\076\015\001\002\000\014\003\ufff8\010" +
    "\ufff8\013\ufff8\036\ufff8\074\ufff8\001\002\000\012\003\uffe3" +
    "\013\uffe3\027\uffe3\074\uffe3\001\002\000\030\003\051\043" +
    "\037\045\061\051\035\054\054\055\057\062\u022f\072\047" +
    "\073\060\074\042\127\034\001\002\000\012\003\uffe5\013" +
    "\uffe5\027\uffe5\074\uffe5\001\002\000\010\003\u022b\013\022" +
    "\027\u022a\001\002\000\006\012\u0200\074\u0201\001\002\000" +
    "\010\003\u01f8\013\022\074\u01ff\001\002\000\004\026\u01fe" +
    "\001\002\000\026\003\051\043\037\045\061\051\035\054" +
    "\054\055\057\072\047\073\060\074\042\127\034\001\002" +
    "\000\040\003\u01f1\010\017\013\022\026\u01ef\027\u01ed\043" +
    "\037\045\061\051\035\054\054\055\057\062\041\072\047" +
    "\073\060\074\u01ee\127\034\001\002\000\012\003\uffe1\013" +
    "\uffe1\027\uffe1\074\uffe1\001\002\000\010\003\032\010\017" +
    "\074\025\001\002\000\004\026\u01ec\001\002\000\032\003" +
    "\051\026\043\043\037\045\061\051\035\054\054\055\057" +
    "\062\041\072\047\073\060\074\042\127\034\001\002\000" +
    "\032\043\uff6d\045\uff6d\051\uff6d\052\uff6d\054\uff6d\055\uff6d" +
    "\062\uff6d\072\uff6d\073\uff6d\074\uff6d\103\uff6d\127\uff6d\001" +
    "\002\000\006\074\u017e\100\u017d\001\002\000\012\003\u015a" +
    "\004\u0159\060\u015b\074\u015c\001\002\000\026\043\037\045" +
    "\061\051\035\054\054\055\057\062\u0158\072\047\073\060" +
    "\074\042\127\034\001\002\000\022\003\u0142\004\100\005" +
    "\070\006\071\025\074\061\073\074\076\100\u0141\001\002" +
    "\000\032\043\uff69\045\uff69\051\uff69\052\uff69\054\uff69\055" +
    "\uff69\062\uff69\072\uff69\073\uff69\074\uff69\103\uff69\127\uff69" +
    "\001\002\000\004\026\uffe8\001\002\000\022\004\331\005" +
    "\322\006\325\025\326\061\327\074\330\107\324\124\323" +
    "\001\002\000\006\002\ufffc\026\uffe7\001\002\000\032\043" +
    "\uff6b\045\uff6b\051\uff6b\052\uff6b\054\uff6b\055\uff6b\062\uff6b" +
    "\072\uff6b\073\uff6b\074\uff6b\103\uff6b\127\uff6b\001\002\000" +
    "\034\043\uff6f\045\uff6f\051\uff6f\052\uff6f\054\uff6f\055\uff6f" +
    "\062\uff6f\072\uff6f\073\uff6f\074\uff6f\076\321\103\uff6f\127" +
    "\uff6f\001\002\000\034\043\uff73\045\uff73\051\uff73\052\uff73" +
    "\054\uff73\055\uff73\062\uff73\072\uff73\073\uff73\074\uff73\076" +
    "\320\103\uff73\127\uff73\001\002\000\004\074\317\001\002" +
    "\000\032\043\uff67\045\uff67\051\uff67\052\uff67\054\uff67\055" +
    "\uff67\062\uff67\072\uff67\073\uff67\074\uff67\103\uff67\127\uff67" +
    "\001\002\000\010\062\315\076\314\103\316\001\002\000" +
    "\032\043\uff61\045\uff61\051\uff61\052\uff61\054\uff61\055\uff61" +
    "\062\uff61\072\uff61\073\uff61\074\uff61\103\uff61\127\uff61\001" +
    "\002\000\034\043\uff8d\045\uff8d\051\uff8d\052\uff8d\054\uff8d" +
    "\055\uff8d\062\uff8d\072\uff8d\073\uff8d\074\uff8d\076\uff8d\103" +
    "\uff8d\127\uff8d\001\002\000\010\003\203\074\204\100\202" +
    "\001\002\000\034\043\uff8e\045\uff8e\051\uff8e\052\uff8e\054" +
    "\uff8e\055\uff8e\062\uff8e\072\uff8e\073\uff8e\074\uff8e\076\uff8e" +
    "\103\uff8e\127\uff8e\001\002\000\032\043\uff65\045\uff65\051" +
    "\uff65\052\uff65\054\uff65\055\uff65\062\uff65\072\uff65\073\uff65" +
    "\074\uff65\103\uff65\127\uff65\001\002\000\022\003\077\004" +
    "\100\005\070\006\071\025\074\061\073\074\076\100\072" +
    "\001\002\000\004\074\066\001\002\000\010\003\062\006" +
    "\063\074\064\001\002\000\034\043\uff8b\045\uff8b\051\uff8b" +
    "\052\uff8b\054\uff8b\055\uff8b\062\uff8b\072\uff8b\073\uff8b\074" +
    "\uff8b\076\uff8b\103\uff8b\127\uff8b\001\002\000\034\043\uff20" +
    "\045\uff20\051\uff20\052\uff20\054\uff20\055\uff20\062\uff20\072" +
    "\uff20\073\uff20\074\uff20\076\uff20\103\uff20\127\uff20\001\002" +
    "\000\034\043\uff21\045\uff21\051\uff21\052\uff21\054\uff21\055" +
    "\uff21\062\uff21\072\uff21\073\uff21\074\uff21\076\uff21\103\uff21" +
    "\127\uff21\001\002\000\034\043\uff8c\045\uff8c\051\uff8c\052" +
    "\uff8c\054\uff8c\055\uff8c\062\uff8c\072\uff8c\073\uff8c\074\uff8c" +
    "\076\uff8c\103\uff8c\127\uff8c\001\002\000\034\043\uff8f\045" +
    "\uff8f\051\uff8f\052\uff8f\054\uff8f\055\uff8f\062\uff8f\072\uff8f" +
    "\073\uff8f\074\uff8f\076\uff8f\103\uff8f\127\uff8f\001\002\000" +
    "\032\003\077\004\100\005\070\006\071\025\074\061\073" +
    "\106\126\114\121\115\125\116\127\117\122\120\123\001" +
    "\002\000\046\003\uff13\004\uff13\005\uff13\006\uff13\013\uff13" +
    "\025\uff13\027\uff13\061\uff13\074\uff13\076\uff13\101\uff13\102" +
    "\uff13\106\uff13\114\uff13\115\uff13\116\uff13\117\uff13\120\uff13" +
    "\001\002\000\046\003\uff12\004\uff12\005\uff12\006\uff12\013" +
    "\uff12\025\uff12\027\uff12\061\uff12\074\uff12\076\uff12\101\uff12" +
    "\102\uff12\106\uff12\114\uff12\115\uff12\116\uff12\117\uff12\120" +
    "\uff12\001\002\000\022\003\136\004\100\005\070\006\071" +
    "\025\074\061\073\074\076\101\135\001\002\000\052\003" +
    "\uff0f\004\uff0f\005\uff0f\006\uff0f\013\uff0f\025\uff0f\027\uff0f" +
    "\061\uff0f\067\uff0f\071\uff0f\074\uff0f\076\uff0f\101\uff0f\102" +
    "\uff0f\106\uff0f\114\uff0f\115\uff0f\116\uff0f\117\uff0f\120\uff0f" +
    "\001\002\000\052\003\uff0e\004\uff0e\005\uff0e\006\uff0e\013" +
    "\uff0e\025\uff0e\027\uff0e\061\uff0e\067\uff0e\071\uff0e\074\uff0e" +
    "\076\uff0e\101\uff0e\102\uff0e\106\uff0e\114\uff0e\115\uff0e\116" +
    "\uff0e\117\uff0e\120\uff0e\001\002\000\042\003\uff11\004\uff11" +
    "\005\uff11\006\uff11\025\uff11\061\uff11\067\133\071\132\101" +
    "\uff9b\102\uff9b\106\uff11\114\uff11\115\uff11\116\uff11\117\uff11" +
    "\120\uff11\001\002\000\032\003\077\004\100\005\070\006" +
    "\071\025\074\061\073\106\126\114\121\115\125\116\127" +
    "\117\122\120\123\001\002\000\046\003\uff10\004\uff10\005" +
    "\uff10\006\uff10\013\uff10\025\uff10\027\uff10\061\uff10\074\uff10" +
    "\076\uff10\101\uff10\102\uff10\106\uff10\114\uff10\115\uff10\116" +
    "\uff10\117\uff10\120\uff10\001\002\000\046\003\uff14\004\uff14" +
    "\005\uff14\006\uff14\013\uff14\025\uff14\027\uff14\061\uff14\074" +
    "\uff14\076\uff14\101\uff14\102\uff14\106\uff14\114\uff14\115\uff14" +
    "\116\uff14\117\uff14\120\uff14\001\002\000\004\101\102\001" +
    "\002\000\004\102\103\001\002\000\026\003\051\043\037" +
    "\045\061\051\035\054\054\055\057\072\047\073\060\074" +
    "\042\127\034\001\002\000\026\043\037\045\061\051\035" +
    "\054\054\055\057\072\047\073\060\074\042\103\114\127" +
    "\034\001\002\000\032\043\uff6e\045\uff6e\051\uff6e\052\uff6e" +
    "\054\uff6e\055\uff6e\062\uff6e\072\uff6e\073\uff6e\074\uff6e\103" +
    "\uff6e\127\uff6e\001\002\000\032\043\uff6a\045\uff6a\051\uff6a" +
    "\052\uff6a\054\uff6a\055\uff6a\062\uff6a\072\uff6a\073\uff6a\074" +
    "\uff6a\103\uff6a\127\uff6a\001\002\000\032\043\uff6c\045\uff6c" +
    "\051\uff6c\052\uff6c\054\uff6c\055\uff6c\062\uff6c\072\uff6c\073" +
    "\uff6c\074\uff6c\103\uff6c\127\uff6c\001\002\000\034\043\uff74" +
    "\045\uff74\051\uff74\052\uff74\054\uff74\055\uff74\062\uff74\072" +
    "\uff74\073\uff74\074\uff74\076\116\103\uff74\127\uff74\001\002" +
    "\000\034\043\uff70\045\uff70\051\uff70\052\uff70\054\uff70\055" +
    "\uff70\062\uff70\072\uff70\073\uff70\074\uff70\076\115\103\uff70" +
    "\127\uff70\001\002\000\032\043\uff68\045\uff68\051\uff68\052" +
    "\uff68\054\uff68\055\uff68\062\uff68\072\uff68\073\uff68\074\uff68" +
    "\103\uff68\127\uff68\001\002\000\032\043\uff66\045\uff66\051" +
    "\uff66\052\uff66\054\uff66\055\uff66\062\uff66\072\uff66\073\uff66" +
    "\074\uff66\103\uff66\127\uff66\001\002\000\032\043\uff5d\045" +
    "\uff5d\051\uff5d\052\uff5d\054\uff5d\055\uff5d\062\uff5d\072\uff5d" +
    "\073\uff5d\074\uff5d\103\uff5d\127\uff5d\001\002\000\032\043" +
    "\uff72\045\uff72\051\uff72\052\uff72\054\uff72\055\uff72\062\uff72" +
    "\072\uff72\073\uff72\074\uff72\103\uff72\127\uff72\001\002\000" +
    "\032\043\uff76\045\uff76\051\uff76\052\uff76\054\uff76\055\uff76" +
    "\062\uff76\072\uff76\073\uff76\074\uff76\103\uff76\127\uff76\001" +
    "\002\000\016\003\077\004\100\005\070\006\071\025\074" +
    "\061\073\001\002\000\006\101\uff9d\102\uff9d\001\002\000" +
    "\020\003\uff96\004\uff96\005\uff96\006\uff96\025\uff96\061\uff96" +
    "\074\uff96\001\002\000\020\003\uff9a\004\uff9a\005\uff9a\006" +
    "\uff9a\025\uff9a\061\uff9a\074\uff9a\001\002\000\020\003\uff99" +
    "\004\uff99\005\uff99\006\uff99\025\uff99\061\uff99\074\uff99\001" +
    "\002\000\020\003\uff11\013\uff11\027\uff11\074\uff11\076\uff11" +
    "\101\uff11\102\uff11\001\002\000\020\003\uff97\004\uff97\005" +
    "\uff97\006\uff97\025\uff97\061\uff97\074\uff97\001\002\000\020" +
    "\003\uff95\004\uff95\005\uff95\006\uff95\025\uff95\061\uff95\074" +
    "\uff95\001\002\000\020\003\uff98\004\uff98\005\uff98\006\uff98" +
    "\025\uff98\061\uff98\074\uff98\001\002\000\006\101\uffa1\102" +
    "\uffa1\001\002\000\006\025\074\061\073\001\002\000\006" +
    "\025\uff0c\061\uff0c\001\002\000\006\025\uff0d\061\uff0d\001" +
    "\002\000\006\101\uff9c\102\uff9c\001\002\000\004\102\173" +
    "\001\002\000\034\003\uff10\004\uff10\005\uff10\006\uff10\025" +
    "\uff10\061\uff10\101\163\106\uff10\114\uff10\115\uff10\116\uff10" +
    "\117\uff10\120\uff10\001\002\000\006\101\141\102\140\001" +
    "\002\000\026\003\051\043\037\045\061\051\035\054\054" +
    "\055\057\072\047\073\060\074\042\127\034\001\002\000" +
    "\030\003\051\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\102\143\127\034\001\002\000" +
    "\026\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\103\160\127\034\001\002\000\030\003" +
    "\051\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\103\145\127\034\001\002\000\026\043" +
    "\037\045\061\051\035\054\054\055\057\072\047\073\060" +
    "\074\042\103\146\127\034\001\002\000\032\043\uff5f\045" +
    "\uff5f\051\uff5f\052\uff5f\054\uff5f\055\uff5f\062\uff5f\072\uff5f" +
    "\073\uff5f\074\uff5f\103\uff5f\127\uff5f\001\002\000\036\043" +
    "\uff60\045\uff60\051\uff60\052\uff60\054\uff60\055\uff60\056\150" +
    "\062\uff60\072\uff60\073\uff60\074\uff60\102\147\103\uff60\127" +
    "\uff60\001\002\000\026\003\051\043\037\045\061\051\035" +
    "\054\054\055\057\072\047\073\060\074\042\127\034\001" +
    "\002\000\030\003\051\043\037\045\061\051\035\054\054" +
    "\055\057\072\047\073\060\074\042\102\152\127\034\001" +
    "\002\000\026\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\103\155\127\034\001\002\000" +
    "\026\003\051\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\127\034\001\002\000\026\043" +
    "\037\045\061\051\035\054\054\055\057\072\047\073\060" +
    "\074\042\103\154\127\034\001\002\000\032\043\uff59\045" +
    "\uff59\051\uff59\052\uff59\054\uff59\055\uff59\062\uff59\072\uff59" +
    "\073\uff59\074\uff59\103\uff59\127\uff59\001\002\000\032\043" +
    "\uff56\045\uff56\051\uff56\052\uff56\054\uff56\055\uff56\062\uff56" +
    "\072\uff56\073\uff56\074\uff56\103\uff56\127\uff56\001\002\000" +
    "\026\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\103\157\127\034\001\002\000\032\043" +
    "\uff57\045\uff57\051\uff57\052\uff57\054\uff57\055\uff57\062\uff57" +
    "\072\uff57\073\uff57\074\uff57\103\uff57\127\uff57\001\002\000" +
    "\032\043\uff5a\045\uff5a\051\uff5a\052\uff5a\054\uff5a\055\uff5a" +
    "\062\uff5a\072\uff5a\073\uff5a\074\uff5a\103\uff5a\127\uff5a\001" +
    "\002\000\026\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\103\162\127\034\001\002\000" +
    "\032\043\uff5b\045\uff5b\051\uff5b\052\uff5b\054\uff5b\055\uff5b" +
    "\062\uff5b\072\uff5b\073\uff5b\074\uff5b\103\uff5b\127\uff5b\001" +
    "\002\000\004\102\164\001\002\000\026\003\051\043\037" +
    "\045\061\051\035\054\054\055\057\072\047\073\060\074" +
    "\042\127\034\001\002\000\026\043\037\045\061\051\035" +
    "\054\054\055\057\072\047\073\060\074\042\103\166\127" +
    "\034\001\002\000\034\043\uff5e\045\uff5e\051\uff5e\052\uff5e" +
    "\054\uff5e\055\uff5e\056\167\062\uff5e\072\uff5e\073\uff5e\074" +
    "\uff5e\103\uff5e\127\uff5e\001\002\000\004\102\170\001\002" +
    "\000\026\003\051\043\037\045\061\051\035\054\054\055" +
    "\057\072\047\073\060\074\042\127\034\001\002\000\026" +
    "\043\037\045\061\051\035\054\054\055\057\072\047\073" +
    "\060\074\042\103\172\127\034\001\002\000\032\043\uff58" +
    "\045\uff58\051\uff58\052\uff58\054\uff58\055\uff58\062\uff58\072" +
    "\uff58\073\uff58\074\uff58\103\uff58\127\uff58\001\002\000\026" +
    "\003\051\043\037\045\061\051\035\054\054\055\057\072" +
    "\047\073\060\074\042\127\034\001\002\000\026\043\037" +
    "\045\061\051\035\054\054\055\057\072\047\073\060\074" +
    "\042\103\175\127\034\001\002\000\032\043\uff5c\045\uff5c" +
    "\051\uff5c\052\uff5c\054\uff5c\055\uff5c\062\uff5c\072\uff5c\073" +
    "\uff5c\074\uff5c\103\uff5c\127\uff5c\001\002\000\006\101\uff9e" +
    "\102\uff9e\001\002\000\020\003\077\004\100\005\070\006" +
    "\071\025\074\061\073\074\201\001\002\000\006\101\uff9f" +
    "\102\uff9f\001\002\000\006\101\uffa0\102\uffa0\001\002\000" +
    "\010\003\273\074\274\101\275\001\002\000\004\074\267" +
    "\001\002\000\004\101\205\001\002\000\004\102\206\001" +
    "\002\000\006\003\207\011\210\001\002\000\010\011\265" +
    "\076\264\103\266\001\002\000\012\004\240\006\242\025" +
    "\243\061\241\001\002\000\006\011\212\103\213\001\002" +
    "\000\012\004\214\006\216\025\217\061\215\001\002\000" +
    "\032\043\uff32\045\uff32\051\uff32\052\uff32\054\uff32\055\uff32" +
    "\062\uff32\072\uff32\073\uff32\074\uff32\103\uff32\127\uff32\001" +
    "\002\000\004\077\234\001\002\000\004\077\230\001\002" +
    "\000\004\077\224\001\002\000\004\077\220\001\002\000" +
    "\026\003\051\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\127\034\001\002\000\026\043" +
    "\037\045\061\051\035\052\222\054\054\055\057\072\047" +
    "\073\060\074\042\127\034\001\002\000\004\076\223\001" +
    "\002\000\006\011\uff26\103\uff26\001\002\000\026\003\051" +
    "\043\037\045\061\051\035\054\054\055\057\072\047\073" +
    "\060\074\042\127\034\001\002\000\026\043\037\045\061" +
    "\051\035\052\226\054\054\055\057\072\047\073\060\074" +
    "\042\127\034\001\002\000\004\076\227\001\002\000\006" +
    "\011\uff2a\103\uff2a\001\002\000\026\003\051\043\037\045" +
    "\061\051\035\054\054\055\057\072\047\073\060\074\042" +
    "\127\034\001\002\000\026\043\037\045\061\051\035\052" +
    "\232\054\054\055\057\072\047\073\060\074\042\127\034" +
    "\001\002\000\004\076\233\001\002\000\006\011\uff28\103" +
    "\uff28\001\002\000\026\003\051\043\037\045\061\051\035" +
    "\054\054\055\057\072\047\073\060\074\042\127\034\001" +
    "\002\000\026\043\037\045\061\051\035\052\236\054\054" +
    "\055\057\072\047\073\060\074\042\127\034\001\002\000" +
    "\004\076\237\001\002\000\006\011\uff2c\103\uff2c\001\002" +
    "\000\004\077\260\001\002\000\004\077\254\001\002\000" +
    "\004\077\250\001\002\000\004\077\244\001\002\000\026" +
    "\003\051\043\037\045\061\051\035\054\054\055\057\072" +
    "\047\073\060\074\042\127\034\001\002\000\026\043\037" +
    "\045\061\051\035\052\246\054\054\055\057\072\047\073" +
    "\060\074\042\127\034\001\002\000\004\076\247\001\002" +
    "\000\006\011\uff25\103\uff25\001\002\000\026\003\051\043" +
    "\037\045\061\051\035\054\054\055\057\072\047\073\060" +
    "\074\042\127\034\001\002\000\026\043\037\045\061\051" +
    "\035\052\252\054\054\055\057\072\047\073\060\074\042" +
    "\127\034\001\002\000\004\076\253\001\002\000\006\011" +
    "\uff29\103\uff29\001\002\000\026\003\051\043\037\045\061" +
    "\051\035\054\054\055\057\072\047\073\060\074\042\127" +
    "\034\001\002\000\026\043\037\045\061\051\035\052\256" +
    "\054\054\055\057\072\047\073\060\074\042\127\034\001" +
    "\002\000\004\076\257\001\002\000\006\011\uff27\103\uff27" +
    "\001\002\000\026\003\051\043\037\045\061\051\035\054" +
    "\054\055\057\072\047\073\060\074\042\127\034\001\002" +
    "\000\026\043\037\045\061\051\035\052\262\054\054\055" +
    "\057\072\047\073\060\074\042\127\034\001\002\000\004" +
    "\076\263\001\002\000\006\011\uff2b\103\uff2b\001\002\000" +
    "\006\011\uff24\103\uff24\001\002\000\006\011\uff23\103\uff23" +
    "\001\002\000\006\011\uff22\103\uff22\001\002\000\004\102" +
    "\270\001\002\000\006\003\207\011\210\001\002\000\006" +
    "\011\212\103\272\001\002\000\032\043\uff30\045\uff30\051" +
    "\uff30\052\uff30\054\uff30\055\uff30\062\uff30\072\uff30\073\uff30" +
    "\074\uff30\103\uff30\127\uff30\001\002\000\004\101\310\001" +
    "\002\000\004\101\301\001\002\000\004\102\276\001\002" +
    "\000\006\003\207\011\210\001\002\000\006\011\212\103" +
    "\300\001\002\000\032\043\uff31\045\uff31\051\uff31\052\uff31" +
    "\054\uff31\055\uff31\062\uff31\072\uff31\073\uff31\074\uff31\103" +
    "\uff31\127\uff31\001\002\000\010\003\207\011\210\102\302" +
    "\001\002\000\010\003\207\011\210\103\306\001\002\000" +
    "\006\011\212\103\304\001\002\000\032\043\uff2e\045\uff2e" +
    "\051\uff2e\052\uff2e\054\uff2e\055\uff2e\062\uff2e\072\uff2e\073" +
    "\uff2e\074\uff2e\103\uff2e\127\uff2e\001\002\000\006\011\212" +
    "\103\307\001\002\000\032\043\uff2d\045\uff2d\051\uff2d\052" +
    "\uff2d\054\uff2d\055\uff2d\062\uff2d\072\uff2d\073\uff2d\074\uff2d" +
    "\103\uff2d\127\uff2d\001\002\000\032\043\uff33\045\uff33\051" +
    "\uff33\052\uff33\054\uff33\055\uff33\062\uff33\072\uff33\073\uff33" +
    "\074\uff33\103\uff33\127\uff33\001\002\000\004\102\311\001" +
    "\002\000\006\003\207\011\210\001\002\000\006\011\212" +
    "\103\313\001\002\000\032\043\uff2f\045\uff2f\051\uff2f\052" +
    "\uff2f\054\uff2f\055\uff2f\062\uff2f\072\uff2f\073\uff2f\074\uff2f" +
    "\103\uff2f\127\uff2f\001\002\000\032\043\uff64\045\uff64\051" +
    "\uff64\052\uff64\054\uff64\055\uff64\062\uff64\072\uff64\073\uff64" +
    "\074\uff64\103\uff64\127\uff64\001\002\000\032\043\uff63\045" +
    "\uff63\051\uff63\052\uff63\054\uff63\055\uff63\062\uff63\072\uff63" +
    "\073\uff63\074\uff63\103\uff63\127\uff63\001\002\000\032\043" +
    "\uff62\045\uff62\051\uff62\052\uff62\054\uff62\055\uff62\062\uff62" +
    "\072\uff62\073\uff62\074\uff62\103\uff62\127\uff62\001\002\000" +
    "\034\043\uff90\045\uff90\051\uff90\052\uff90\054\uff90\055\uff90" +
    "\062\uff90\072\uff90\073\uff90\074\uff90\076\uff90\103\uff90\127" +
    "\uff90\001\002\000\032\043\uff75\045\uff75\051\uff75\052\uff75" +
    "\054\uff75\055\uff75\062\uff75\072\uff75\073\uff75\074\uff75\103" +
    "\uff75\127\uff75\001\002\000\032\043\uff71\045\uff71\051\uff71" +
    "\052\uff71\054\uff71\055\uff71\062\uff71\072\uff71\073\uff71\074" +
    "\uff71\103\uff71\127\uff71\001\002\000\012\110\u010a\111\u0108" +
    "\112\u0107\113\u0109\001\002\000\020\003\u0119\007\u011d\020" +
    "\u0117\030\u011b\050\u0118\121\u011a\126\u011c\001\002\000\020" +
    "\003\u0101\004\377\005\u0106\006\u0103\025\u0104\061\u0100\074" +
    "\u0105\001\002\000\034\043\uffca\045\uffca\051\uffca\052\uffca" +
    "\054\uffca\055\uffca\062\uffca\072\uffca\073\uffca\074\uffca\076" +
    "\uffca\103\uffca\127\uffca\001\002\000\034\043\uffc8\045\uffc8" +
    "\051\uffc8\052\uffc8\054\uffc8\055\uffc8\062\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\076\uffc8\103\uffc8\127\uffc8\001\002\000\034" +
    "\043\uffc9\045\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9\062" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\076\uffc9\103\uffc9\127\uffc9" +
    "\001\002\000\014\060\356\110\357\111\355\112\353\113" +
    "\354\001\002\000\012\110\336\111\334\112\333\113\335" +
    "\001\002\000\034\043\uffc7\045\uffc7\051\uffc7\052\uffc7\054" +
    "\uffc7\055\uffc7\062\uffc7\072\uffc7\073\uffc7\074\uffc7\076\uffc7" +
    "\103\uffc7\127\uffc7\001\002\000\010\004\350\005\352\074" +
    "\351\001\002\000\010\004\345\005\347\074\346\001\002" +
    "\000\010\004\342\005\344\074\343\001\002\000\010\004" +
    "\337\005\341\074\340\001\002\000\034\043\uffb9\045\uffb9" +
    "\051\uffb9\052\uffb9\054\uffb9\055\uffb9\062\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\076\uffb9\103\uffb9\127\uffb9\001\002\000\034" +
    "\043\uffb7\045\uffb7\051\uffb7\052\uffb7\054\uffb7\055\uffb7\062" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\076\uffb7\103\uffb7\127\uffb7" +
    "\001\002\000\034\043\uffb8\045\uffb8\051\uffb8\052\uffb8\054" +
    "\uffb8\055\uffb8\062\uffb8\072\uffb8\073\uffb8\074\uffb8\076\uffb8" +
    "\103\uffb8\127\uffb8\001\002\000\034\043\uffb0\045\uffb0\051" +
    "\uffb0\052\uffb0\054\uffb0\055\uffb0\062\uffb0\072\uffb0\073\uffb0" +
    "\074\uffb0\076\uffb0\103\uffb0\127\uffb0\001\002\000\034\043" +
    "\uffae\045\uffae\051\uffae\052\uffae\054\uffae\055\uffae\062\uffae" +
    "\072\uffae\073\uffae\074\uffae\076\uffae\103\uffae\127\uffae\001" +
    "\002\000\034\043\uffaf\045\uffaf\051\uffaf\052\uffaf\054\uffaf" +
    "\055\uffaf\062\uffaf\072\uffaf\073\uffaf\074\uffaf\076\uffaf\103" +
    "\uffaf\127\uffaf\001\002\000\034\043\uffb6\045\uffb6\051\uffb6" +
    "\052\uffb6\054\uffb6\055\uffb6\062\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\076\uffb6\103\uffb6\127\uffb6\001\002\000\034\043\uffb4" +
    "\045\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\062\uffb4\072" +
    "\uffb4\073\uffb4\074\uffb4\076\uffb4\103\uffb4\127\uffb4\001\002" +
    "\000\034\043\uffb5\045\uffb5\051\uffb5\052\uffb5\054\uffb5\055" +
    "\uffb5\062\uffb5\072\uffb5\073\uffb5\074\uffb5\076\uffb5\103\uffb5" +
    "\127\uffb5\001\002\000\034\043\uffb3\045\uffb3\051\uffb3\052" +
    "\uffb3\054\uffb3\055\uffb3\062\uffb3\072\uffb3\073\uffb3\074\uffb3" +
    "\076\uffb3\103\uffb3\127\uffb3\001\002\000\034\043\uffb1\045" +
    "\uffb1\051\uffb1\052\uffb1\054\uffb1\055\uffb1\062\uffb1\072\uffb1" +
    "\073\uffb1\074\uffb1\076\uffb1\103\uffb1\127\uffb1\001\002\000" +
    "\034\043\uffb2\045\uffb2\051\uffb2\052\uffb2\054\uffb2\055\uffb2" +
    "\062\uffb2\072\uffb2\073\uffb2\074\uffb2\076\uffb2\103\uffb2\127" +
    "\uffb2\001\002\000\010\004\374\005\376\074\375\001\002" +
    "\000\010\004\371\005\373\074\372\001\002\000\010\004" +
    "\366\005\370\074\367\001\002\000\004\102\363\001\002" +
    "\000\010\004\360\005\362\074\361\001\002\000\034\043" +
    "\uffc5\045\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5\062\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\076\uffc5\103\uffc5\127\uffc5\001" +
    "\002\000\034\043\uffc3\045\uffc3\051\uffc3\052\uffc3\054\uffc3" +
    "\055\uffc3\062\uffc3\072\uffc3\073\uffc3\074\uffc3\076\uffc3\103" +
    "\uffc3\127\uffc3\001\002\000\034\043\uffc4\045\uffc4\051\uffc4" +
    "\052\uffc4\054\uffc4\055\uffc4\062\uffc4\072\uffc4\073\uffc4\074" +
    "\uffc4\076\uffc4\103\uffc4\127\uffc4\001\002\000\026\003\051" +
    "\043\037\045\061\051\035\054\054\055\057\072\047\073" +
    "\060\074\042\127\034\001\002\000\026\043\037\045\061" +
    "\051\035\054\054\055\057\072\047\073\060\074\042\103" +
    "\365\127\034\001\002\000\032\043\uff53\045\uff53\051\uff53" +
    "\052\uff53\054\uff53\055\uff53\062\uff53\072\uff53\073\uff53\074" +
    "\uff53\103\uff53\127\uff53\001\002\000\034\043\uffc2\045\uffc2" +
    "\051\uffc2\052\uffc2\054\uffc2\055\uffc2\062\uffc2\072\uffc2\073" +
    "\uffc2\074\uffc2\076\uffc2\103\uffc2\127\uffc2\001\002\000\034" +
    "\043\uffc0\045\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0\062" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\076\uffc0\103\uffc0\127\uffc0" +
    "\001\002\000\034\043\uffc1\045\uffc1\051\uffc1\052\uffc1\054" +
    "\uffc1\055\uffc1\062\uffc1\072\uffc1\073\uffc1\074\uffc1\076\uffc1" +
    "\103\uffc1\127\uffc1\001\002\000\034\043\uffbc\045\uffbc\051" +
    "\uffbc\052\uffbc\054\uffbc\055\uffbc\062\uffbc\072\uffbc\073\uffbc" +
    "\074\uffbc\076\uffbc\103\uffbc\127\uffbc\001\002\000\034\043" +
    "\uffba\045\uffba\051\uffba\052\uffba\054\uffba\055\uffba\062\uffba" +
    "\072\uffba\073\uffba\074\uffba\076\uffba\103\uffba\127\uffba\001" +
    "\002\000\034\043\uffbb\045\uffbb\051\uffbb\052\uffbb\054\uffbb" +
    "\055\uffbb\062\uffbb\072\uffbb\073\uffbb\074\uffbb\076\uffbb\103" +
    "\uffbb\127\uffbb\001\002\000\034\043\uffbf\045\uffbf\051\uffbf" +
    "\052\uffbf\054\uffbf\055\uffbf\062\uffbf\072\uffbf\073\uffbf\074" +
    "\uffbf\076\uffbf\103\uffbf\127\uffbf\001\002\000\034\043\uffbd" +
    "\045\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\062\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\076\uffbd\103\uffbd\127\uffbd\001\002" +
    "\000\034\043\uffbe\045\uffbe\051\uffbe\052\uffbe\054\uffbe\055" +
    "\uffbe\062\uffbe\072\uffbe\073\uffbe\074\uffbe\076\uffbe\103\uffbe" +
    "\127\uffbe\001\002\000\044\043\uffcd\045\uffcd\051\uffcd\052" +
    "\uffcd\054\uffcd\055\uffcd\062\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\076\uffcd\103\uffcd\110\336\111\334\112\333\113\335\127" +
    "\uffcd\001\002\000\034\043\uffcf\045\uffcf\051\uffcf\052\uffcf" +
    "\054\uffcf\055\uffcf\062\uffcf\072\uffcf\073\uffcf\074\uffcf\076" +
    "\uffcf\103\uffcf\127\uffcf\001\002\000\034\043\uffc6\045\uffc6" +
    "\051\uffc6\052\uffc6\054\uffc6\055\uffc6\062\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\076\uffc6\103\uffc6\127\uffc6\001\002\000\034" +
    "\043\uffcb\045\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb\062" +
    "\uffcb\072\uffcb\073\uffcb\074\uffcb\076\uffcb\103\uffcb\127\uffcb" +
    "\001\002\000\034\043\uffd1\045\uffd1\051\uffd1\052\uffd1\054" +
    "\uffd1\055\uffd1\062\uffd1\072\uffd1\073\uffd1\074\uffd1\076\uffd1" +
    "\103\uffd1\127\uffd1\001\002\000\034\043\uffcc\045\uffcc\051" +
    "\uffcc\052\uffcc\054\uffcc\055\uffcc\062\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\076\uffcc\103\uffcc\127\uffcc\001\002\000\044\043" +
    "\uffce\045\uffce\051\uffce\052\uffce\054\uffce\055\uffce\062\uffce" +
    "\072\uffce\073\uffce\074\uffce\076\uffce\103\uffce\110\357\111" +
    "\355\112\353\113\354\127\uffce\001\002\000\044\043\uffd0" +
    "\045\uffd0\051\uffd0\052\uffd0\054\uffd0\055\uffd0\062\uffd0\072" +
    "\uffd0\073\uffd0\074\uffd0\076\uffd0\103\uffd0\110\u010a\111\u0108" +
    "\112\u0107\113\u0109\127\uffd0\001\002\000\010\004\u0114\005" +
    "\u0116\074\u0115\001\002\000\010\004\u0111\005\u0113\074\u0112" +
    "\001\002\000\010\004\u010e\005\u0110\074\u010f\001\002\000" +
    "\010\004\u010b\005\u010d\074\u010c\001\002\000\034\043\uffad" +
    "\045\uffad\051\uffad\052\uffad\054\uffad\055\uffad\062\uffad\072" +
    "\uffad\073\uffad\074\uffad\076\uffad\103\uffad\127\uffad\001\002" +
    "\000\034\043\uffab\045\uffab\051\uffab\052\uffab\054\uffab\055" +
    "\uffab\062\uffab\072\uffab\073\uffab\074\uffab\076\uffab\103\uffab" +
    "\127\uffab\001\002\000\034\043\uffac\045\uffac\051\uffac\052" +
    "\uffac\054\uffac\055\uffac\062\uffac\072\uffac\073\uffac\074\uffac" +
    "\076\uffac\103\uffac\127\uffac\001\002\000\034\043\uffa4\045" +
    "\uffa4\051\uffa4\052\uffa4\054\uffa4\055\uffa4\062\uffa4\072\uffa4" +
    "\073\uffa4\074\uffa4\076\uffa4\103\uffa4\127\uffa4\001\002\000" +
    "\034\043\uffa2\045\uffa2\051\uffa2\052\uffa2\054\uffa2\055\uffa2" +
    "\062\uffa2\072\uffa2\073\uffa2\074\uffa2\076\uffa2\103\uffa2\127" +
    "\uffa2\001\002\000\034\043\uffa3\045\uffa3\051\uffa3\052\uffa3" +
    "\054\uffa3\055\uffa3\062\uffa3\072\uffa3\073\uffa3\074\uffa3\076" +
    "\uffa3\103\uffa3\127\uffa3\001\002\000\034\043\uffaa\045\uffaa" +
    "\051\uffaa\052\uffaa\054\uffaa\055\uffaa\062\uffaa\072\uffaa\073" +
    "\uffaa\074\uffaa\076\uffaa\103\uffaa\127\uffaa\001\002\000\034" +
    "\043\uffa8\045\uffa8\051\uffa8\052\uffa8\054\uffa8\055\uffa8\062" +
    "\uffa8\072\uffa8\073\uffa8\074\uffa8\076\uffa8\103\uffa8\127\uffa8" +
    "\001\002\000\034\043\uffa9\045\uffa9\051\uffa9\052\uffa9\054" +
    "\uffa9\055\uffa9\062\uffa9\072\uffa9\073\uffa9\074\uffa9\076\uffa9" +
    "\103\uffa9\127\uffa9\001\002\000\034\043\uffa7\045\uffa7\051" +
    "\uffa7\052\uffa7\054\uffa7\055\uffa7\062\uffa7\072\uffa7\073\uffa7" +
    "\074\uffa7\076\uffa7\103\uffa7\127\uffa7\001\002\000\034\043" +
    "\uffa5\045\uffa5\051\uffa5\052\uffa5\054\uffa5\055\uffa5\062\uffa5" +
    "\072\uffa5\073\uffa5\074\uffa5\076\uffa5\103\uffa5\127\uffa5\001" +
    "\002\000\034\043\uffa6\045\uffa6\051\uffa6\052\uffa6\054\uffa6" +
    "\055\uffa6\062\uffa6\072\uffa6\073\uffa6\074\uffa6\076\uffa6\103" +
    "\uffa6\127\uffa6\001\002\000\006\004\u0136\100\u0137\001\002" +
    "\000\036\043\uff8a\045\uff8a\051\uff8a\052\uff8a\054\uff8a\055" +
    "\uff8a\062\uff8a\072\uff8a\073\uff8a\074\uff8a\076\uff8a\103\uff8a" +
    "\124\u0131\127\uff8a\001\002\000\034\043\uff7c\045\uff7c\051" +
    "\uff7c\052\uff7c\054\uff7c\055\uff7c\062\uff7c\072\uff7c\073\uff7c" +
    "\074\uff7c\076\uff7c\103\uff7c\127\uff7c\001\002\000\034\043" +
    "\uff83\045\uff83\051\uff83\052\uff83\054\uff83\055\uff83\062\uff83" +
    "\072\uff83\073\uff83\074\uff83\076\uff83\103\uff83\127\uff83\001" +
    "\002\000\004\124\u0125\001\002\000\004\100\u011e\001\002" +
    "\000\034\043\uff89\045\uff89\051\uff89\052\uff89\054\uff89\055" +
    "\uff89\062\uff89\072\uff89\073\uff89\074\uff89\076\uff89\103\uff89" +
    "\127\uff89\001\002\000\010\003\u011f\006\u0120\074\u0121\001" +
    "\002\000\004\101\u0124\001\002\000\004\101\u0123\001\002" +
    "\000\004\101\u0122\001\002\000\034\043\uff7e\045\uff7e\051" +
    "\uff7e\052\uff7e\054\uff7e\055\uff7e\062\uff7e\072\uff7e\073\uff7e" +
    "\074\uff7e\076\uff7e\103\uff7e\127\uff7e\001\002\000\034\043" +
    "\uff7f\045\uff7f\051\uff7f\052\uff7f\054\uff7f\055\uff7f\062\uff7f" +
    "\072\uff7f\073\uff7f\074\uff7f\076\uff7f\103\uff7f\127\uff7f\001" +
    "\002\000\034\043\uff7d\045\uff7d\051\uff7d\052\uff7d\054\uff7d" +
    "\055\uff7d\062\uff7d\072\uff7d\073\uff7d\074\uff7d\076\uff7d\103" +
    "\uff7d\127\uff7d\001\002\000\006\014\u0127\040\u0128\001\002" +
    "\000\036\043\uff82\045\uff82\051\uff82\052\uff82\054\uff82\055" +
    "\uff82\062\uff82\072\uff82\073\uff82\074\uff82\076\uff82\100\u0129" +
    "\103\uff82\127\uff82\001\002\000\036\043\uff93\045\uff93\051" +
    "\uff93\052\uff93\054\uff93\055\uff93\062\uff93\072\uff93\073\uff93" +
    "\074\uff93\076\uff93\100\uff93\103\uff93\127\uff93\001\002\000" +
    "\036\043\uff94\045\uff94\051\uff94\052\uff94\054\uff94\055\uff94" +
    "\062\uff94\072\uff94\073\uff94\074\uff94\076\uff94\100\uff94\103" +
    "\uff94\127\uff94\001\002\000\010\003\u012a\074\u012b\075\u012d" +
    "\001\002\000\004\101\u012f\001\002\000\004\101\uff77\001" +
    "\002\000\004\101\u012e\001\002\000\004\101\uff78\001\002" +
    "\000\034\043\uff81\045\uff81\051\uff81\052\uff81\054\uff81\055" +
    "\uff81\062\uff81\072\uff81\073\uff81\074\uff81\076\uff81\103\uff81" +
    "\127\uff81\001\002\000\004\076\u0130\001\002\000\034\043" +
    "\uff80\045\uff80\051\uff80\052\uff80\054\uff80\055\uff80\062\uff80" +
    "\072\uff80\073\uff80\074\uff80\076\uff80\103\uff80\127\uff80\001" +
    "\002\000\010\133\u0135\134\u0133\135\u0134\001\002\000\034" +
    "\043\uff84\045\uff84\051\uff84\052\uff84\054\uff84\055\uff84\062" +
    "\uff84\072\uff84\073\uff84\074\uff84\076\uff84\103\uff84\127\uff84" +
    "\001\002\000\034\043\uff7a\045\uff7a\051\uff7a\052\uff7a\054" +
    "\uff7a\055\uff7a\062\uff7a\072\uff7a\073\uff7a\074\uff7a\076\uff7a" +
    "\103\uff7a\127\uff7a\001\002\000\034\043\uff79\045\uff79\051" +
    "\uff79\052\uff79\054\uff79\055\uff79\062\uff79\072\uff79\073\uff79" +
    "\074\uff79\076\uff79\103\uff79\127\uff79\001\002\000\034\043" +
    "\uff7b\045\uff7b\051\uff7b\052\uff7b\054\uff7b\055\uff7b\062\uff7b" +
    "\072\uff7b\073\uff7b\074\uff7b\076\uff7b\103\uff7b\127\uff7b\001" +
    "\002\000\006\101\uff91\125\uff91\001\002\000\010\003\u013d" +
    "\004\u0136\101\u013e\001\002\000\006\101\u013a\125\u0139\001" +
    "\002\000\004\004\u013b\001\002\000\034\043\uff86\045\uff86" +
    "\051\uff86\052\uff86\054\uff86\055\uff86\062\uff86\072\uff86\073" +
    "\uff86\074\uff86\076\uff86\103\uff86\127\uff86\001\002\000\006" +
    "\101\uff92\125\uff92\001\002\000\006\101\u0140\125\u0139\001" +
    "\002\000\004\101\u013f\001\002\000\034\043\uff87\045\uff87" +
    "\051\uff87\052\uff87\054\uff87\055\uff87\062\uff87\072\uff87\073" +
    "\uff87\074\uff87\076\uff87\103\uff87\127\uff87\001\002\000\034" +
    "\043\uff85\045\uff85\051\uff85\052\uff85\054\uff85\055\uff85\062" +
    "\uff85\072\uff85\073\uff85\074\uff85\076\uff85\103\uff85\127\uff85" +
    "\001\002\000\034\043\uff88\045\uff88\051\uff88\052\uff88\054" +
    "\uff88\055\uff88\062\uff88\072\uff88\073\uff88\074\uff88\076\uff88" +
    "\103\uff88\127\uff88\001\002\000\022\003\077\004\100\005" +
    "\070\006\071\025\074\061\073\074\076\101\u0149\001\002" +
    "\000\034\003\uff10\004\uff10\005\uff10\006\uff10\025\uff10\061" +
    "\uff10\103\u0148\106\uff10\114\uff10\115\uff10\116\uff10\117\uff10" +
    "\120\uff10\001\002\000\004\101\u0144\001\002\000\004\102" +
    "\u0145\001\002\000\026\003\051\043\037\045\061\051\035" +
    "\054\054\055\057\072\047\073\060\074\042\127\034\001" +
    "\002\000\026\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\103\u0147\127\034\001\002\000" +
    "\032\043\uff48\045\uff48\051\uff48\052\uff48\054\uff48\055\uff48" +
    "\062\uff48\072\uff48\073\uff48\074\uff48\103\uff48\127\uff48\001" +
    "\002\000\032\043\uff44\045\uff44\051\uff44\052\uff44\054\uff44" +
    "\055\uff44\062\uff44\072\uff44\073\uff44\074\uff44\103\uff44\127" +
    "\uff44\001\002\000\004\102\u0155\001\002\000\006\101\u014c" +
    "\102\u014b\001\002\000\026\003\051\043\037\045\061\051" +
    "\035\054\054\055\057\072\047\073\060\074\042\127\034" +
    "\001\002\000\030\003\051\043\037\045\061\051\035\054" +
    "\054\055\057\072\047\073\060\074\042\102\u014e\127\034" +
    "\001\002\000\026\043\037\045\061\051\035\054\054\055" +
    "\057\072\047\073\060\074\042\103\u0152\127\034\001\002" +
    "\000\030\003\051\043\037\045\061\051\035\054\054\055" +
    "\057\072\047\073\060\074\042\103\u0150\127\034\001\002" +
    "\000\026\043\037\045\061\051\035\054\054\055\057\072" +
    "\047\073\060\074\042\103\u0151\127\034\001\002\000\032" +
    "\043\uff49\045\uff49\051\uff49\052\uff49\054\uff49\055\uff49\062" +
    "\uff49\072\uff49\073\uff49\074\uff49\103\uff49\127\uff49\001\002" +
    "\000\032\043\uff4a\045\uff4a\051\uff4a\052\uff4a\054\uff4a\055" +
    "\uff4a\062\uff4a\072\uff4a\073\uff4a\074\uff4a\103\uff4a\127\uff4a" +
    "\001\002\000\032\043\uff45\045\uff45\051\uff45\052\uff45\054" +
    "\uff45\055\uff45\062\uff45\072\uff45\073\uff45\074\uff45\103\uff45" +
    "\127\uff45\001\002\000\026\043\037\045\061\051\035\054" +
    "\054\055\057\072\047\073\060\074\042\103\u0154\127\034" +
    "\001\002\000\032\043\uff46\045\uff46\051\uff46\052\uff46\054" +
    "\uff46\055\uff46\062\uff46\072\uff46\073\uff46\074\uff46\103\uff46" +
    "\127\uff46\001\002\000\026\003\051\043\037\045\061\051" +
    "\035\054\054\055\057\072\047\073\060\074\042\127\034" +
    "\001\002\000\026\043\037\045\061\051\035\054\054\055" +
    "\057\072\047\073\060\074\042\103\u0157\127\034\001\002" +
    "\000\032\043\uff47\045\uff47\051\uff47\052\uff47\054\uff47\055" +
    "\uff47\062\uff47\072\uff47\073\uff47\074\uff47\103\uff47\127\uff47" +
    "\001\002\000\004\026\uffea\001\002\000\010\060\u0171\074" +
    "\u0172\102\u0170\001\002\000\004\102\u016d\001\002\000\004" +
    "\102\u016a\001\002\000\010\060\u015e\074\u015f\102\u015d\001" +
    "\002\000\026\003\051\043\037\045\061\051\035\054\054" +
    "\055\057\072\047\073\060\074\042\127\034\001\002\000" +
    "\030\003\051\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\102\u0164\127\034\001\002\000" +
    "\004\102\u0160\001\002\000\026\003\051\043\037\045\061" +
    "\051\035\054\054\055\057\072\047\073\060\074\042\127" +
    "\034\001\002\000\026\043\037\045\061\051\035\054\054" +
    "\055\057\072\047\073\060\074\042\103\u0162\127\034\001" +
    "\002\000\032\043\uff50\045\uff50\051\uff50\052\uff50\054\uff50" +
    "\055\uff50\062\uff50\072\uff50\073\uff50\074\uff50\103\uff50\127" +
    "\uff50\001\002\000\026\043\037\045\061\051\035\054\054" +
    "\055\057\072\047\073\060\074\042\103\u0167\127\034\001" +
    "\002\000\026\003\051\043\037\045\061\051\035\054\054" +
    "\055\057\072\047\073\060\074\042\127\034\001\002\000" +
    "\026\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\103\u0166\127\034\001\002\000\032\043" +
    "\uff55\045\uff55\051\uff55\052\uff55\054\uff55\055\uff55\062\uff55" +
    "\072\uff55\073\uff55\074\uff55\103\uff55\127\uff55\001\002\000" +
    "\032\043\uff4f\045\uff4f\051\uff4f\052\uff4f\054\uff4f\055\uff4f" +
    "\062\uff4f\072\uff4f\073\uff4f\074\uff4f\103\uff4f\127\uff4f\001" +
    "\002\000\026\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\103\u0169\127\034\001\002\000" +
    "\032\043\uff51\045\uff51\051\uff51\052\uff51\054\uff51\055\uff51" +
    "\062\uff51\072\uff51\073\uff51\074\uff51\103\uff51\127\uff51\001" +
    "\002\000\026\003\051\043\037\045\061\051\035\054\054" +
    "\055\057\072\047\073\060\074\042\127\034\001\002\000" +
    "\026\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\103\u016c\127\034\001\002\000\032\043" +
    "\uff52\045\uff52\051\uff52\052\uff52\054\uff52\055\uff52\062\uff52" +
    "\072\uff52\073\uff52\074\uff52\103\uff52\127\uff52\001\002\000" +
    "\026\003\051\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\127\034\001\002\000\026\043" +
    "\037\045\061\051\035\054\054\055\057\072\047\073\060" +
    "\074\042\103\u016f\127\034\001\002\000\032\043\uff4b\045" +
    "\uff4b\051\uff4b\052\uff4b\054\uff4b\055\uff4b\062\uff4b\072\uff4b" +
    "\073\uff4b\074\uff4b\103\uff4b\127\uff4b\001\002\000\026\003" +
    "\051\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\127\034\001\002\000\030\003\051\043" +
    "\037\045\061\051\035\054\054\055\057\072\047\073\060" +
    "\074\042\102\u0177\127\034\001\002\000\004\102\u0173\001" +
    "\002\000\026\003\051\043\037\045\061\051\035\054\054" +
    "\055\057\072\047\073\060\074\042\127\034\001\002\000" +
    "\026\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\103\u0175\127\034\001\002\000\032\043" +
    "\uff4d\045\uff4d\051\uff4d\052\uff4d\054\uff4d\055\uff4d\062\uff4d" +
    "\072\uff4d\073\uff4d\074\uff4d\103\uff4d\127\uff4d\001\002\000" +
    "\026\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\103\u017a\127\034\001\002\000\026\003" +
    "\051\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\127\034\001\002\000\026\043\037\045" +
    "\061\051\035\054\054\055\057\072\047\073\060\074\042" +
    "\103\u0179\127\034\001\002\000\032\043\uff54\045\uff54\051" +
    "\uff54\052\uff54\054\uff54\055\uff54\062\uff54\072\uff54\073\uff54" +
    "\074\uff54\103\uff54\127\uff54\001\002\000\032\043\uff4c\045" +
    "\uff4c\051\uff4c\052\uff4c\054\uff4c\055\uff4c\062\uff4c\072\uff4c" +
    "\073\uff4c\074\uff4c\103\uff4c\127\uff4c\001\002\000\026\043" +
    "\037\045\061\051\035\054\054\055\057\072\047\073\060" +
    "\074\042\103\u017c\127\034\001\002\000\032\043\uff4e\045" +
    "\uff4e\051\uff4e\052\uff4e\054\uff4e\055\uff4e\062\uff4e\072\uff4e" +
    "\073\uff4e\074\uff4e\103\uff4e\127\uff4e\001\002\000\014\003" +
    "\u018d\074\u018f\101\u0190\107\u018e\125\u018c\001\002\000\004" +
    "\107\u017f\001\002\000\004\004\u0180\001\002\000\004\125" +
    "\u0181\001\002\000\006\072\u0184\073\u0182\001\002\000\004" +
    "\074\uff1e\001\002\000\004\074\u0185\001\002\000\004\074" +
    "\uff1f\001\002\000\004\125\u0186\001\002\000\020\003\077" +
    "\004\100\005\070\006\071\025\074\061\073\074\076\001" +
    "\002\000\004\101\u0188\001\002\000\004\102\u0189\001\002" +
    "\000\026\003\051\043\037\045\061\051\035\054\054\055" +
    "\057\072\047\073\060\074\042\127\034\001\002\000\026" +
    "\043\037\045\061\051\035\054\054\055\057\072\047\073" +
    "\060\074\042\103\u018b\127\034\001\002\000\032\043\uff42" +
    "\045\uff42\051\uff42\052\uff42\054\uff42\055\uff42\062\uff42\072" +
    "\uff42\073\uff42\074\uff42\103\uff42\127\uff42\001\002\000\004" +
    "\072\u01e4\001\002\000\004\125\u01db\001\002\000\004\004" +
    "\u01d1\001\002\000\006\004\u0198\107\u0199\001\002\000\006" +
    "\003\u0192\102\u0191\001\002\000\026\003\051\043\037\045" +
    "\061\051\035\054\054\055\057\072\047\073\060\074\042" +
    "\127\034\001\002\000\004\102\u0193\001\002\000\026\003" +
    "\051\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\127\034\001\002\000\026\043\037\045" +
    "\061\051\035\054\054\055\057\072\047\073\060\074\042" +
    "\103\u0195\127\034\001\002\000\032\043\uff36\045\uff36\051" +
    "\uff36\052\uff36\054\uff36\055\uff36\062\uff36\072\uff36\073\uff36" +
    "\074\uff36\103\uff36\127\uff36\001\002\000\026\043\037\045" +
    "\061\051\035\054\054\055\057\072\047\073\060\074\042" +
    "\103\u0197\127\034\001\002\000\032\043\uff37\045\uff37\051" +
    "\uff37\052\uff37\054\uff37\055\uff37\062\uff37\072\uff37\073\uff37" +
    "\074\uff37\103\uff37\127\uff37\001\002\000\004\125\u01c8\001" +
    "\002\000\006\004\u019b\125\u019a\001\002\000\006\072\u0184" +
    "\073\u0182\001\002\000\004\125\u019c\001\002\000\010\003" +
    "\u019e\072\u0184\073\u0182\001\002\000\004\074\u01a5\001\002" +
    "\000\004\125\u019f\001\002\000\020\003\077\004\100\005" +
    "\070\006\071\025\074\061\073\074\076\001\002\000\004" +
    "\101\u01a1\001\002\000\004\102\u01a2\001\002\000\026\003" +
    "\051\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\127\034\001\002\000\026\043\037\045" +
    "\061\051\035\054\054\055\057\072\047\073\060\074\042" +
    "\103\u01a4\127\034\001\002\000\032\043\uff39\045\uff39\051" +
    "\uff39\052\uff39\054\uff39\055\uff39\062\uff39\072\uff39\073\uff39" +
    "\074\uff39\103\uff39\127\uff39\001\002\000\022\003\077\004" +
    "\100\005\070\006\071\025\074\061\073\074\076\125\u01a6" +
    "\001\002\000\022\003\u01ad\004\100\005\070\006\071\025" +
    "\074\061\073\074\076\101\u01ac\001\002\000\004\101\u01a8" +
    "\001\002\000\004\102\u01a9\001\002\000\026\003\051\043" +
    "\037\045\061\051\035\054\054\055\057\072\047\073\060" +
    "\074\042\127\034\001\002\000\026\043\037\045\061\051" +
    "\035\054\054\055\057\072\047\073\060\074\042\103\u01ab" +
    "\127\034\001\002\000\032\043\uff3d\045\uff3d\051\uff3d\052" +
    "\uff3d\054\uff3d\055\uff3d\062\uff3d\072\uff3d\073\uff3d\074\uff3d" +
    "\103\uff3d\127\uff3d\001\002\000\004\102\u01bd\001\002\000" +
    "\034\003\uff10\004\uff10\005\uff10\006\uff10\025\uff10\061\uff10" +
    "\101\u01b9\106\uff10\114\uff10\115\uff10\116\uff10\117\uff10\120" +
    "\uff10\001\002\000\006\101\u01b0\102\u01af\001\002\000\026" +
    "\003\051\043\037\045\061\051\035\054\054\055\057\072" +
    "\047\073\060\074\042\127\034\001\002\000\030\003\051" +
    "\043\037\045\061\051\035\054\054\055\057\072\047\073" +
    "\060\074\042\102\u01b2\127\034\001\002\000\026\043\037" +
    "\045\061\051\035\054\054\055\057\072\047\073\060\074" +
    "\042\103\u01b6\127\034\001\002\000\030\003\051\043\037" +
    "\045\061\051\035\054\054\055\057\072\047\073\060\074" +
    "\042\103\u01b4\127\034\001\002\000\026\043\037\045\061" +
    "\051\035\054\054\055\057\072\047\073\060\074\042\103" +
    "\u01b5\127\034\001\002\000\032\043\uff34\045\uff34\051\uff34" +
    "\052\uff34\054\uff34\055\uff34\062\uff34\072\uff34\073\uff34\074" +
    "\uff34\103\uff34\127\uff34\001\002\000\032\043\uff43\045\uff43" +
    "\051\uff43\052\uff43\054\uff43\055\uff43\062\uff43\072\uff43\073" +
    "\uff43\074\uff43\103\uff43\127\uff43\001\002\000\032\043\uff35" +
    "\045\uff35\051\uff35\052\uff35\054\uff35\055\uff35\062\uff35\072" +
    "\uff35\073\uff35\074\uff35\103\uff35\127\uff35\001\002\000\026" +
    "\043\037\045\061\051\035\054\054\055\057\072\047\073" +
    "\060\074\042\103\u01b8\127\034\001\002\000\032\043\uff3b" +
    "\045\uff3b\051\uff3b\052\uff3b\054\uff3b\055\uff3b\062\uff3b\072" +
    "\uff3b\073\uff3b\074\uff3b\103\uff3b\127\uff3b\001\002\000\004" +
    "\102\u01ba\001\002\000\026\003\051\043\037\045\061\051" +
    "\035\054\054\055\057\072\047\073\060\074\042\127\034" +
    "\001\002\000\026\043\037\045\061\051\035\054\054\055" +
    "\057\072\047\073\060\074\042\103\u01bc\127\034\001\002" +
    "\000\032\043\uff38\045\uff38\051\uff38\052\uff38\054\uff38\055" +
    "\uff38\062\uff38\072\uff38\073\uff38\074\uff38\103\uff38\127\uff38" +
    "\001\002\000\026\003\051\043\037\045\061\051\035\054" +
    "\054\055\057\072\047\073\060\074\042\127\034\001\002" +
    "\000\026\043\037\045\061\051\035\054\054\055\057\072" +
    "\047\073\060\074\042\103\u01bf\127\034\001\002\000\032" +
    "\043\uff3c\045\uff3c\051\uff3c\052\uff3c\054\uff3c\055\uff3c\062" +
    "\uff3c\072\uff3c\073\uff3c\074\uff3c\103\uff3c\127\uff3c\001\002" +
    "\000\004\074\u01c1\001\002\000\004\125\u01c2\001\002\000" +
    "\020\003\077\004\100\005\070\006\071\025\074\061\073" +
    "\074\076\001\002\000\004\101\u01c4\001\002\000\004\102" +
    "\u01c5\001\002\000\026\003\051\043\037\045\061\051\035" +
    "\054\054\055\057\072\047\073\060\074\042\127\034\001" +
    "\002\000\026\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\103\u01c7\127\034\001\002\000" +
    "\032\043\uff3f\045\uff3f\051\uff3f\052\uff3f\054\uff3f\055\uff3f" +
    "\062\uff3f\072\uff3f\073\uff3f\074\uff3f\103\uff3f\127\uff3f\001" +
    "\002\000\006\072\u0184\073\u0182\001\002\000\004\074\u01ca" +
    "\001\002\000\004\125\u01cb\001\002\000\020\003\077\004" +
    "\100\005\070\006\071\025\074\061\073\074\076\001\002" +
    "\000\004\101\u01cd\001\002\000\004\102\u01ce\001\002\000" +
    "\026\003\051\043\037\045\061\051\035\054\054\055\057" +
    "\072\047\073\060\074\042\127\034\001\002\000\026\043" +
    "\037\045\061\051\035\054\054\055\057\072\047\073\060" +
    "\074\042\103\u01d0\127\034\001\002\000\032\043\uff40\045" +
    "\uff40\051\uff40\052\uff40\054\uff40\055\uff40\062\uff40\072\uff40" +
    "\073\uff40\074\uff40\103\uff40\127\uff40\001\002\000\004\125" +
    "\u01d2\001\002\000\006\072\u0184\073\u0182\001\002\000\004" +
    "\074\u01d4\001\002\000\004\125\u01d5\001\002\000\020\003" +
    "\077\004\100\005\070\006\071\025\074\061\073\074\076" +
    "\001\002\000\004\101\u01d7\001\002\000\004\102\u01d8\001" +
    "\002\000\026\003\051\043\037\045\061\051\035\054\054" +
    "\055\057\072\047\073\060\074\042\127\034\001\002\000" +
    "\026\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\103\u01da\127\034\001\002\000\032\043" +
    "\uff41\045\uff41\051\uff41\052\uff41\054\uff41\055\uff41\062\uff41" +
    "\072\uff41\073\uff41\074\uff41\103\uff41\127\uff41\001\002\000" +
    "\006\072\u0184\073\u0182\001\002\000\004\074\u01dd\001\002" +
    "\000\004\125\u01de\001\002\000\020\003\077\004\100\005" +
    "\070\006\071\025\074\061\073\074\076\001\002\000\004" +
    "\101\u01e0\001\002\000\004\102\u01e1\001\002\000\026\003" +
    "\051\043\037\045\061\051\035\054\054\055\057\072\047" +
    "\073\060\074\042\127\034\001\002\000\026\043\037\045" +
    "\061\051\035\054\054\055\057\072\047\073\060\074\042" +
    "\103\u01e3\127\034\001\002\000\032\043\uff3a\045\uff3a\051" +
    "\uff3a\052\uff3a\054\uff3a\055\uff3a\062\uff3a\072\uff3a\073\uff3a" +
    "\074\uff3a\103\uff3a\127\uff3a\001\002\000\004\074\u01e5\001" +
    "\002\000\004\125\u01e6\001\002\000\020\003\077\004\100" +
    "\005\070\006\071\025\074\061\073\074\076\001\002\000" +
    "\004\101\u01e8\001\002\000\004\102\u01e9\001\002\000\026" +
    "\003\051\043\037\045\061\051\035\054\054\055\057\072" +
    "\047\073\060\074\042\127\034\001\002\000\026\043\037" +
    "\045\061\051\035\054\054\055\057\072\047\073\060\074" +
    "\042\103\u01eb\127\034\001\002\000\032\043\uff3e\045\uff3e" +
    "\051\uff3e\052\uff3e\054\uff3e\055\uff3e\062\uff3e\072\uff3e\073" +
    "\uff3e\074\uff3e\103\uff3e\127\uff3e\001\002\000\004\002\000" +
    "\001\002\000\012\003\uffe0\013\uffe0\027\uffe0\074\uffe0\001" +
    "\002\000\044\003\051\004\331\005\322\006\325\025\326" +
    "\043\037\045\061\051\035\054\054\055\057\061\327\072" +
    "\047\073\060\074\u01fc\107\324\124\323\127\034\001\002" +
    "\000\004\026\uffe7\001\002\000\010\003\u01f8\013\022\027" +
    "\u01f7\001\002\000\040\003\051\026\u01ef\027\u01ed\043\037" +
    "\045\061\051\035\054\054\055\057\062\u01f4\072\047\073" +
    "\060\074\042\076\314\103\316\127\034\001\002\000\004" +
    "\026\u01f3\001\002\000\004\002\ufffe\001\002\000\030\026" +
    "\uffe8\043\uff63\045\uff63\051\uff63\054\uff63\055\uff63\062\uff63" +
    "\072\uff63\073\uff63\074\uff63\127\uff63\001\002\000\012\003" +
    "\uffe2\013\uffe2\027\uffe2\074\uffe2\001\002\000\012\003\uffe6" +
    "\013\uffe6\027\uffe6\074\uffe6\001\002\000\010\003\uffed\010" +
    "\uffed\074\uffed\001\002\000\004\076\u01fa\001\002\000\012" +
    "\003\uffe4\013\uffe4\027\uffe4\074\uffe4\001\002\000\012\003" +
    "\uffdf\013\uffdf\027\uffdf\074\uffdf\001\002\000\026\043\037" +
    "\045\061\051\035\054\054\055\057\062\u01fd\072\047\073" +
    "\060\074\042\127\034\001\002\000\034\004\331\005\322" +
    "\006\325\025\326\060\356\061\327\074\330\107\324\110" +
    "\357\111\355\112\353\113\354\124\323\001\002\000\004" +
    "\026\uffe9\001\002\000\004\002\ufffd\001\002\000\010\003" +
    "\uffee\010\uffee\074\uffee\001\002\000\024\003\u020c\015\u0209" +
    "\041\u020d\042\u0207\046\u0203\063\u0205\064\u020a\065\u0206\066" +
    "\u0202\001\002\000\030\003\u020c\012\u0208\015\u0209\041\u020d" +
    "\042\u0207\046\u0203\063\u0205\064\u020a\065\u0206\066\u0202\074" +
    "\u020b\001\002\000\022\003\uff1b\004\uff1b\005\uff1b\006\uff1b" +
    "\025\uff1b\061\uff1b\076\uff1b\107\uff1b\001\002\000\022\003" +
    "\uff18\004\uff18\005\uff18\006\uff18\025\uff18\061\uff18\076\uff18" +
    "\107\uff18\001\002\000\006\076\u0221\107\u0222\001\002\000" +
    "\022\003\uff1c\004\uff1c\005\uff1c\006\uff1c\025\uff1c\061\uff1c" +
    "\076\uff1c\107\uff1c\001\002\000\022\003\uff1a\004\uff1a\005" +
    "\uff1a\006\uff1a\025\uff1a\061\uff1a\076\uff1a\107\uff1a\001\002" +
    "\000\022\003\uff16\004\uff16\005\uff16\006\uff16\025\uff16\061" +
    "\uff16\076\uff16\107\uff16\001\002\000\030\003\u020c\015\u0209" +
    "\041\u020d\042\u0207\046\u0203\063\u0205\064\u020a\065\u0206\066" +
    "\u0202\076\u0215\107\u0213\001\002\000\022\003\uff19\004\uff19" +
    "\005\uff19\006\uff19\025\uff19\061\uff19\076\uff19\107\uff19\001" +
    "\002\000\022\003\uff1d\004\uff1d\005\uff1d\006\uff1d\025\uff1d" +
    "\061\uff1d\076\uff1d\107\uff1d\001\002\000\024\003\u020c\015" +
    "\u0209\041\u020d\042\u0207\046\u0203\063\u0205\064\u020a\065\u0206" +
    "\066\u0202\001\002\000\022\003\uff15\004\uff15\005\uff15\006" +
    "\uff15\025\uff15\061\uff15\076\uff15\107\uff15\001\002\000\022" +
    "\003\uff17\004\uff17\005\uff17\006\uff17\025\uff17\061\uff17\076" +
    "\uff17\107\uff17\001\002\000\006\076\u020f\107\u0210\001\002" +
    "\000\012\003\uffdc\013\uffdc\027\uffdc\074\uffdc\001\002\000" +
    "\016\003\077\004\100\005\070\006\071\025\074\061\073" +
    "\001\002\000\004\076\u0212\001\002\000\012\003\uffd6\013" +
    "\uffd6\027\uffd6\074\uffd6\001\002\000\016\003\077\004\100" +
    "\005\070\006\071\025\074\061\073\001\002\000\022\003" +
    "\u0219\004\100\005\070\006\071\025\074\061\073\076\u0218" +
    "\107\u0217\001\002\000\012\003\uffda\013\uffda\027\uffda\074" +
    "\uffda\001\002\000\004\076\u021e\001\002\000\020\003\077" +
    "\004\100\005\070\006\071\025\074\061\073\074\u021b\001" +
    "\002\000\012\003\uffde\013\uffde\027\uffde\074\uffde\001\002" +
    "\000\014\003\uffdd\013\uffdd\027\uffdd\074\uffdd\076\uff10\001" +
    "\002\000\014\003\uffd7\013\uffd7\027\uffd7\074\uffd7\076\u021d" +
    "\001\002\000\004\076\u021c\001\002\000\012\003\uffd8\013" +
    "\uffd8\027\uffd8\074\uffd8\001\002\000\012\003\uffd9\013\uffd9" +
    "\027\uffd9\074\uffd9\001\002\000\012\003\uffd2\013\uffd2\027" +
    "\uffd2\074\uffd2\001\002\000\004\076\u0220\001\002\000\012" +
    "\003\uffd3\013\uffd3\027\uffd3\074\uffd3\001\002\000\012\003" +
    "\uffdb\013\uffdb\027\uffdb\074\uffdb\001\002\000\016\003\077" +
    "\004\100\005\070\006\071\025\074\061\073\001\002\000" +
    "\004\076\u0224\001\002\000\012\003\uffd4\013\uffd4\027\uffd4" +
    "\074\uffd4\001\002\000\004\107\u0226\001\002\000\016\003" +
    "\077\004\100\005\070\006\071\025\074\061\073\001\002" +
    "\000\004\076\u0228\001\002\000\012\003\uffd5\013\uffd5\027" +
    "\uffd5\074\uffd5\001\002\000\012\003\u01f8\013\022\027\u022c" +
    "\074\u022d\001\002\000\010\003\ufff1\010\ufff1\074\ufff1\001" +
    "\002\000\012\003\ufff0\010\ufff0\027\u01ed\074\ufff0\001\002" +
    "\000\010\003\ufff2\010\ufff2\074\ufff2\001\002\000\010\003" +
    "\uffef\010\uffef\074\uffef\001\002\000\026\043\037\045\061" +
    "\051\035\054\054\055\057\062\u0230\072\047\073\060\074" +
    "\042\127\034\001\002\000\004\026\uffec\001\002\000\004" +
    "\026\uffeb\001\002\000\004\006\u0239\001\002\000\020\003" +
    "\ufff3\006\u0234\010\ufff3\013\ufff3\036\ufff3\074\ufff3\122\u0233" +
    "\001\002\000\006\006\u0237\076\u0236\001\002\000\004\076" +
    "\u0235\001\002\000\014\003\ufff6\010\ufff6\013\ufff6\036\ufff6" +
    "\074\ufff6\001\002\000\014\003\ufff5\010\ufff5\013\ufff5\036" +
    "\ufff5\074\ufff5\001\002\000\016\003\ufff4\010\ufff4\013\ufff4" +
    "\036\ufff4\074\ufff4\076\u0238\001\002\000\014\003\ufff9\010" +
    "\ufff9\013\ufff9\036\ufff9\074\ufff9\001\002\000\004\076\u023a" +
    "\001\002\000\014\003\ufff7\010\ufff7\013\ufff7\036\ufff7\074" +
    "\ufff7\001\002\000\004\002\ufffb\001\002\000\020\002\ufffa" +
    "\003\u023c\013\022\027\u01ed\035\005\036\021\074\007\001" +
    "\002\000\010\003\u023f\010\017\074\025\001\002\000\004" +
    "\026\u0240\001\002\000\032\003\051\026\u01ef\043\037\045" +
    "\061\051\035\054\054\055\057\062\041\072\047\073\060" +
    "\074\042\127\034\001\002\000\004\002\uffff\001\002\000" +
    "\012\003\u01f8\013\022\027\u01f7\074\u01ff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u023f\000\006\002\007\053\005\001\001\000\020\002" +
    "\u023a\003\u023c\005\022\007\017\010\015\053\005\055\026" +
    "\001\001\000\002\001\001\000\016\003\027\004\023\005" +
    "\022\007\017\010\015\055\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\044\025\045\026\054\032\u022d\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\002\001\001\000\012\005\u0228\007\017\010" +
    "\015\055\026\001\001\000\002\001\001\000\010\007\u01f5" +
    "\010\u01f8\055\u01f4\001\001\000\002\001\001\000\030\012" +
    "\044\025\045\026\054\032\u01fa\033\032\035\043\040\037" +
    "\041\047\042\055\046\051\056\052\001\001\000\042\004" +
    "\u01f1\005\u01ef\007\017\010\015\012\044\025\045\026\054" +
    "\032\035\033\032\035\043\040\037\041\047\042\055\046" +
    "\051\055\026\056\052\001\001\000\002\001\001\000\004" +
    "\004\030\001\001\000\002\001\001\000\030\012\044\025" +
    "\045\026\054\032\035\033\032\035\043\040\037\041\047" +
    "\042\055\046\051\056\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\110\025\107" +
    "\026\054\033\104\035\106\040\105\041\111\042\112\046" +
    "\051\056\052\001\001\000\010\011\074\017\u0142\060\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\074\017\100\060\066\001\001\000\002\001\001" +
    "\000\004\051\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\123\020\176\060\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\074\017\136\060\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\130\001\001\000\010\011\123\020\116\060\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\012\044\025\045\026\054\032\103" +
    "\033\032\035\043\040\037\041\047\042\055\046\051\056" +
    "\052\001\001\000\026\012\110\025\107\026\054\033\104" +
    "\035\106\040\105\041\111\042\112\046\051\056\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\123\060\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\044\025\045\026\054\032\160\033\032\035\043\040" +
    "\037\041\047\042\055\046\051\056\052\001\001\000\030" +
    "\012\044\025\045\026\054\032\141\033\032\035\043\040" +
    "\037\041\047\042\055\046\051\056\052\001\001\000\026" +
    "\012\110\025\107\026\054\033\104\035\106\040\105\041" +
    "\111\042\112\046\051\056\052\001\001\000\030\012\044" +
    "\025\045\026\054\032\143\033\032\035\043\040\037\041" +
    "\047\042\055\046\051\056\052\001\001\000\026\012\110" +
    "\025\107\026\054\033\104\035\106\040\105\041\111\042" +
    "\112\046\051\056\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\044\025\045\026\054\032\155\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\030\012\044\025\045\026\054\032\150\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\026\012\110\025\107\026\054\033\104\035" +
    "\106\040\105\041\111\042\112\046\051\056\052\001\001" +
    "\000\030\012\044\025\045\026\054\032\152\033\032\035" +
    "\043\040\037\041\047\042\055\046\051\056\052\001\001" +
    "\000\026\012\110\025\107\026\054\033\104\035\106\040" +
    "\105\041\111\042\112\046\051\056\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\110\025\107\026" +
    "\054\033\104\035\106\040\105\041\111\042\112\046\051" +
    "\056\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\012\110\025\107\026\054\033\104\035\106\040\105" +
    "\041\111\042\112\046\051\056\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\044\025\045\026\054" +
    "\032\164\033\032\035\043\040\037\041\047\042\055\046" +
    "\051\056\052\001\001\000\026\012\110\025\107\026\054" +
    "\033\104\035\106\040\105\041\111\042\112\046\051\056" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\044\025\045\026\054\032\170\033\032\035\043\040" +
    "\037\041\047\042\055\046\051\056\052\001\001\000\026" +
    "\012\110\025\107\026\054\033\104\035\106\040\105\041" +
    "\111\042\112\046\051\056\052\001\001\000\002\001\001" +
    "\000\030\012\044\025\045\026\054\032\173\033\032\035" +
    "\043\040\037\041\047\042\055\046\051\056\052\001\001" +
    "\000\026\012\110\025\107\026\054\033\104\035\106\040" +
    "\105\041\111\042\112\046\051\056\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\123\060\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\044\025\045\026\054\032\220\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\026\012\110\025\107\026\054\033\104\035" +
    "\106\040\105\041\111\042\112\046\051\056\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\044\025" +
    "\045\026\054\032\224\033\032\035\043\040\037\041\047" +
    "\042\055\046\051\056\052\001\001\000\026\012\110\025" +
    "\107\026\054\033\104\035\106\040\105\041\111\042\112" +
    "\046\051\056\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\044\025\045\026\054\032\230\033\032" +
    "\035\043\040\037\041\047\042\055\046\051\056\052\001" +
    "\001\000\026\012\110\025\107\026\054\033\104\035\106" +
    "\040\105\041\111\042\112\046\051\056\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\044\025\045" +
    "\026\054\032\234\033\032\035\043\040\037\041\047\042" +
    "\055\046\051\056\052\001\001\000\026\012\110\025\107" +
    "\026\054\033\104\035\106\040\105\041\111\042\112\046" +
    "\051\056\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\012\044\025\045\026\054\032\244" +
    "\033\032\035\043\040\037\041\047\042\055\046\051\056" +
    "\052\001\001\000\026\012\110\025\107\026\054\033\104" +
    "\035\106\040\105\041\111\042\112\046\051\056\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\044" +
    "\025\045\026\054\032\250\033\032\035\043\040\037\041" +
    "\047\042\055\046\051\056\052\001\001\000\026\012\110" +
    "\025\107\026\054\033\104\035\106\040\105\041\111\042" +
    "\112\046\051\056\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\044\025\045\026\054\032\254\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\026\012\110\025\107\026\054\033\104\035" +
    "\106\040\105\041\111\042\112\046\051\056\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\044\025" +
    "\045\026\054\032\260\033\032\035\043\040\037\041\047" +
    "\042\055\046\051\056\052\001\001\000\026\012\110\025" +
    "\107\026\054\033\104\035\106\040\105\041\111\042\112" +
    "\046\051\056\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\302\001\001\000\004" +
    "\052\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\044\025\045\026\054" +
    "\032\363\033\032\035\043\040\037\041\047\042\055\046" +
    "\051\056\052\001\001\000\026\012\110\025\107\026\054" +
    "\033\104\035\106\040\105\041\111\042\112\046\051\056" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\u0137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u0125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u012b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\u0131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u013b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\074\017\u0149\060\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\044\025\045\026\054\032\u0145\033\032" +
    "\035\043\040\037\041\047\042\055\046\051\056\052\001" +
    "\001\000\026\012\110\025\107\026\054\033\104\035\106" +
    "\040\105\041\111\042\112\046\051\056\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\044\025\045\026\054\032\u0152\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\030\012\044\025\045\026\054\032\u014c\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\026\012\110\025\107\026\054\033\104\035" +
    "\106\040\105\041\111\042\112\046\051\056\052\001\001" +
    "\000\030\012\044\025\045\026\054\032\u014e\033\032\035" +
    "\043\040\037\041\047\042\055\046\051\056\052\001\001" +
    "\000\026\012\110\025\107\026\054\033\104\035\106\040" +
    "\105\041\111\042\112\046\051\056\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\110\025\107\026\054\033\104\035\106\040\105\041\111" +
    "\042\112\046\051\056\052\001\001\000\002\001\001\000" +
    "\030\012\044\025\045\026\054\032\u0155\033\032\035\043" +
    "\040\037\041\047\042\055\046\051\056\052\001\001\000" +
    "\026\012\110\025\107\026\054\033\104\035\106\040\105" +
    "\041\111\042\112\046\051\056\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\044\025" +
    "\045\026\054\032\u0167\033\032\035\043\040\037\041\047" +
    "\042\055\046\051\056\052\001\001\000\030\012\044\025" +
    "\045\026\054\032\u0162\033\032\035\043\040\037\041\047" +
    "\042\055\046\051\056\052\001\001\000\002\001\001\000" +
    "\030\012\044\025\045\026\054\032\u0160\033\032\035\043" +
    "\040\037\041\047\042\055\046\051\056\052\001\001\000" +
    "\026\012\110\025\107\026\054\033\104\035\106\040\105" +
    "\041\111\042\112\046\051\056\052\001\001\000\002\001" +
    "\001\000\026\012\110\025\107\026\054\033\104\035\106" +
    "\040\105\041\111\042\112\046\051\056\052\001\001\000" +
    "\030\012\044\025\045\026\054\032\u0164\033\032\035\043" +
    "\040\037\041\047\042\055\046\051\056\052\001\001\000" +
    "\026\012\110\025\107\026\054\033\104\035\106\040\105" +
    "\041\111\042\112\046\051\056\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\110\025\107\026\054" +
    "\033\104\035\106\040\105\041\111\042\112\046\051\056" +
    "\052\001\001\000\002\001\001\000\030\012\044\025\045" +
    "\026\054\032\u016a\033\032\035\043\040\037\041\047\042" +
    "\055\046\051\056\052\001\001\000\026\012\110\025\107" +
    "\026\054\033\104\035\106\040\105\041\111\042\112\046" +
    "\051\056\052\001\001\000\002\001\001\000\030\012\044" +
    "\025\045\026\054\032\u016d\033\032\035\043\040\037\041" +
    "\047\042\055\046\051\056\052\001\001\000\026\012\110" +
    "\025\107\026\054\033\104\035\106\040\105\041\111\042" +
    "\112\046\051\056\052\001\001\000\002\001\001\000\030" +
    "\012\044\025\045\026\054\032\u017a\033\032\035\043\040" +
    "\037\041\047\042\055\046\051\056\052\001\001\000\030" +
    "\012\044\025\045\026\054\032\u0175\033\032\035\043\040" +
    "\037\041\047\042\055\046\051\056\052\001\001\000\002" +
    "\001\001\000\030\012\044\025\045\026\054\032\u0173\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\026\012\110\025\107\026\054\033\104\035" +
    "\106\040\105\041\111\042\112\046\051\056\052\001\001" +
    "\000\002\001\001\000\026\012\110\025\107\026\054\033" +
    "\104\035\106\040\105\041\111\042\112\046\051\056\052" +
    "\001\001\000\030\012\044\025\045\026\054\032\u0177\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\026\012\110\025\107\026\054\033\104\035" +
    "\106\040\105\041\111\042\112\046\051\056\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\110\025" +
    "\107\026\054\033\104\035\106\040\105\041\111\042\112" +
    "\046\051\056\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0182\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\074" +
    "\017\u0186\060\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\044\025\045\026\054\032\u0189\033\032" +
    "\035\043\040\037\041\047\042\055\046\051\056\052\001" +
    "\001\000\026\012\110\025\107\026\054\033\104\035\106" +
    "\040\105\041\111\042\112\046\051\056\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\044\025\045\026\054\032\u0195\033\032\035\043\040\037" +
    "\041\047\042\055\046\051\056\052\001\001\000\002\001" +
    "\001\000\030\012\044\025\045\026\054\032\u0193\033\032" +
    "\035\043\040\037\041\047\042\055\046\051\056\052\001" +
    "\001\000\026\012\110\025\107\026\054\033\104\035\106" +
    "\040\105\041\111\042\112\046\051\056\052\001\001\000" +
    "\002\001\001\000\026\012\110\025\107\026\054\033\104" +
    "\035\106\040\105\041\111\042\112\046\051\056\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u01bf\001\001\000\002\001\001\000\004\050" +
    "\u019c\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\074\017\u019f\060\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\012\044\025\045\026\054\032\u01a2" +
    "\033\032\035\043\040\037\041\047\042\055\046\051\056" +
    "\052\001\001\000\026\012\110\025\107\026\054\033\104" +
    "\035\106\040\105\041\111\042\112\046\051\056\052\001" +
    "\001\000\002\001\001\000\010\011\074\017\u01a6\060\066" +
    "\001\001\000\010\011\074\017\u01ad\060\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\044\025\045" +
    "\026\054\032\u01a9\033\032\035\043\040\037\041\047\042" +
    "\055\046\051\056\052\001\001\000\026\012\110\025\107" +
    "\026\054\033\104\035\106\040\105\041\111\042\112\046" +
    "\051\056\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\044\025" +
    "\045\026\054\032\u01b6\033\032\035\043\040\037\041\047" +
    "\042\055\046\051\056\052\001\001\000\030\012\044\025" +
    "\045\026\054\032\u01b0\033\032\035\043\040\037\041\047" +
    "\042\055\046\051\056\052\001\001\000\026\012\110\025" +
    "\107\026\054\033\104\035\106\040\105\041\111\042\112" +
    "\046\051\056\052\001\001\000\030\012\044\025\045\026" +
    "\054\032\u01b2\033\032\035\043\040\037\041\047\042\055" +
    "\046\051\056\052\001\001\000\026\012\110\025\107\026" +
    "\054\033\104\035\106\040\105\041\111\042\112\046\051" +
    "\056\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\110\025\107\026\054\033\104" +
    "\035\106\040\105\041\111\042\112\046\051\056\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\044" +
    "\025\045\026\054\032\u01ba\033\032\035\043\040\037\041" +
    "\047\042\055\046\051\056\052\001\001\000\026\012\110" +
    "\025\107\026\054\033\104\035\106\040\105\041\111\042" +
    "\112\046\051\056\052\001\001\000\002\001\001\000\030" +
    "\012\044\025\045\026\054\032\u01bd\033\032\035\043\040" +
    "\037\041\047\042\055\046\051\056\052\001\001\000\026" +
    "\012\110\025\107\026\054\033\104\035\106\040\105\041" +
    "\111\042\112\046\051\056\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\074\017" +
    "\u01c2\060\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\044\025\045\026\054\032\u01c5\033\032\035" +
    "\043\040\037\041\047\042\055\046\051\056\052\001\001" +
    "\000\026\012\110\025\107\026\054\033\104\035\106\040" +
    "\105\041\111\042\112\046\051\056\052\001\001\000\002" +
    "\001\001\000\004\050\u01c8\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\074\017\u01cb\060\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\044\025" +
    "\045\026\054\032\u01ce\033\032\035\043\040\037\041\047" +
    "\042\055\046\051\056\052\001\001\000\026\012\110\025" +
    "\107\026\054\033\104\035\106\040\105\041\111\042\112" +
    "\046\051\056\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u01d2\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\074\017\u01d5\060\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\044\025\045" +
    "\026\054\032\u01d8\033\032\035\043\040\037\041\047\042" +
    "\055\046\051\056\052\001\001\000\026\012\110\025\107" +
    "\026\054\033\104\035\106\040\105\041\111\042\112\046" +
    "\051\056\052\001\001\000\002\001\001\000\004\050\u01db" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\074\017\u01de\060\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\044\025\045\026\054\032\u01e1\033" +
    "\032\035\043\040\037\041\047\042\055\046\051\056\052" +
    "\001\001\000\026\012\110\025\107\026\054\033\104\035" +
    "\106\040\105\041\111\042\112\046\051\056\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\074\017\u01e6\060\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\044\025\045\026\054\032" +
    "\u01e9\033\032\035\043\040\037\041\047\042\055\046\051" +
    "\056\052\001\001\000\026\012\110\025\107\026\054\033" +
    "\104\035\106\040\105\041\111\042\112\046\051\056\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\012\044\013\331\025\045\026\054\032\u01fa" +
    "\033\032\035\043\040\037\041\047\042\055\046\051\056" +
    "\052\001\001\000\002\001\001\000\010\007\u01f5\010\u01f8" +
    "\055\u01f4\001\001\000\030\012\044\025\045\026\054\032" +
    "\035\033\032\035\043\040\037\041\047\042\055\046\051" +
    "\056\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\012\110\025\107\026\054\033\104\035\106" +
    "\040\105\041\111\042\112\046\051\056\052\001\001\000" +
    "\004\013\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\u0224\001\001\000\004\057" +
    "\u0203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\u0213\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u020d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\123\060\u0210\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\123\060\u021e\001\001\000\006\011\123" +
    "\060\u0215\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\123\060\u0219\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\123\060" +
    "\u0222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\123\060\u0226\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\u01f5\010\u01f8\055\u01f4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\110\025\107\026\054" +
    "\033\104\035\106\040\105\041\111\042\112\046\051\056" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\u023a\003\u023c\005\u0240\007\017" +
    "\010\015\053\005\055\026\001\001\000\004\004\u023d\001" +
    "\001\000\002\001\001\000\030\012\044\025\045\026\054" +
    "\032\035\033\032\035\043\040\037\041\047\042\055\046" +
    "\051\056\052\001\001\000\002\001\001\000\010\007\u01f5" +
    "\010\u01f8\055\u01f4\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 //Codigo del usuario
    private String[] componentes = {"motor","led","display"};
    private Editor editor;
    private int conTemp = 0;
    private int conEti = 0;
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }
    private void addErrores(int linea, String mensaje){
        editor.ERRORES.add(new ErroresSintacticos(linea,mensaje));
    }
    private void addIntermedio(String linea){
        editor.codIntermedio.add(linea);
    }
    private void mensaje(String msg){
        System.out.println(msg);
    }
    private boolean esComponente(String tipo){
        return (tipo == "motor" || tipo == "led" || tipo == "display" || tipo == "ledRGB")? true : false;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABEZA BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		System.out.println("Programa Correcto!!!!!");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright+1,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del programa");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CABEZA error BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright+1,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de declaración");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CABEZA BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright+1,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de declaración");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= CABEZA BLOQUE_DECLARACION error fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright+1,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de código");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error INICIO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Contenido no esperado antes de iniciar el programa");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Programa no reconocido");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABEZA ::= inicio_programa Identificador usar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),"Nombre del programa");
            System.out.println("Inicio y nombre correcto, junto con la condiguracion usar");
        }
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABEZA ::= Identificador Identificador usar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_programa. Tienes: " + s.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CABEZA ::= inicio_programa usar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó ponerle nombre al programa.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CABEZA ::= inicio_programa Identificador Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la palabra \"usar\".");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CABEZA ::= inicio_programa Identificador usar PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la configuración de USAR.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CABEZA ::= inicio_programa Identificador usar Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner el ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CABEZA ::= inicio_programa Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la configuración usar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE_DECLARACION ::= inicio_var fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto vacío");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE_DECLARACION ::= inicio_var error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Bloque de declaraciones no completo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir fin_var. Tienes "+ s.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUE_DECLARACION ::= DECLARACIONES Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del bloque de declaraciones.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE_DECLARACION ::= error DECLARACIONES fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_var.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE_CODIGO ::= inicio_bloque fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO vacío correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE_CODIGO ::= inicio_bloque SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO correcto\n");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUE_CODIGO ::= error SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del bloque de código");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOQUE_CODIGO ::= Identificador SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribiste mal inicio_bloque. Tienes: " + s.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOQUE_CODIGO ::= error fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error al identificar el bloque de código " + sright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOQUE_CODIGO ::= error fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error al identificar el bloque de código " + sright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONES ::= DECLARACIONES DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONES ::= DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONES ::= DECLARACIONES DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONES ::= DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONES ::= error fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Declaración no válida.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONES ::= DECLARACIONES error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Declaración no válida.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= definir Identificador como TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " ya ha sido declarada.");
        }else{
            editor.tablaSimbolos_id.addToken(new Simbolo(id.toString(), sright));
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
            if(td.toString() == "entero" || td.toString()=="decimal"){
                addIntermedio(id.toString() + " = 0;");
            }else if(td.toString() == "texto"){
                addIntermedio(id.toString() + " = ' ';");
            }else if(td.toString() == "logico"){
                addIntermedio(id.toString() + " = false;");
            }else{
                addIntermedio(id.toString() + " = null;");
            }
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= definir Identificador como TIPO_DATO_DEC error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= definir Identificador Identificador TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\" ");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= definir Identificador TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar la palabra \"como\".");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= definir Identificador como PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el tipo de dato.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " ya ha sido declarada.");
        }else{
            editor.tablaSimbolos_id.addToken(new Simbolo(id.toString(), sright));
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(), val);
        } 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s Identificador PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un " + td.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_A ::= definir Identificador Identificador TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\".");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_A ::= definir como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el nombre del identificador.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_A ::= definir Identificador TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar la palabra \"como\".");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_A ::= definir Identificador como Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el tipo de dato.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el signo =.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= Identificador Asignacion_s Texto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "texto"){
                editor.tablaSimbolos_id.updateToken(new Simbolo(id.toString(),"texto",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val));
                addIntermedio(id.toString() + " = '" + val.toString() + "';");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo texto.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= Identificador Asignacion_s Decimal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "decimal"){
                editor.tablaSimbolos_id.updateToken(new Simbolo(id.toString(),"decimal",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val));
                addIntermedio(id.toString() + " = " + val.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= Identificador Asignacion_s verdadero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "logico"){
                editor.tablaSimbolos_id.updateToken(new Simbolo(id.toString(),"logico",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val));
                addIntermedio(id.toString() + " = true;");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo logico.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= Identificador Asignacion_s Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            Simbolo temp2 = (editor.tablaSimbolos_id.getToken(val.toString()));
            if(temp.getTipo().equals(temp2.getTipo())){
                editor.tablaSimbolos_id.updateToken(new Simbolo(id.toString(),"entero",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),editor.tablaSimbolos_id.getToken(val.toString()).getValor()));
                addIntermedio(id.toString() + " = " + val.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo " + temp.getTipo() + ".");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        System.out.println("Se ha encontrado ASIGNACION" + val);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= Identificador Asignacion_s Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "entero"){
                editor.tablaSimbolos_id.updateToken(new Simbolo(id.toString(),"entero",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val));
                addIntermedio(id.toString() + " = " + val.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo logico.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        System.out.println("Se ha encontrado ASIGNACION" + val);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= Identificador Asignacion_s falso 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "logico"){
                editor.tablaSimbolos_id.updateToken(new Simbolo(id.toString(),"logico",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val));
                addIntermedio(id.toString() + " = false;");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo logico.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= Identificador Asignacion_s EXPRESION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),temp.getTipo(),s.toString());
            addIntermedio(id.toString() + " = T" + conTemp  + ";");
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= Identificador Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION ::= Identificador verdadero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION ::= Identificador falso 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION ::= Identificador EXPRESION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= Identificador Asignacion_s error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo determinar el valor a asignar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= Identificador Suma Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) + Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) + Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= Identificador Suma Decimal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) + Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) + Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= Identificador Suma Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            Simbolo temp2 = (editor.tablaSimbolos_id.getToken(s.toString()));
            if(temp.getTipo().equals("decimal") || temp2.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) + Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero") && temp2.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) + Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= Identificador Resta Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) - Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) - Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= Identificador Resta Decimal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) - Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) - Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= Identificador Resta Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            Simbolo temp2 = (editor.tablaSimbolos_id.getToken(s.toString()));
            if(temp.getTipo().equals("decimal") || temp2.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) - Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero") && temp2.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) - Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= Identificador Mul Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) * Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) * Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= Identificador Mul Decimal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) * Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) * Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= Identificador Mul Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            Simbolo temp2 = (editor.tablaSimbolos_id.getToken(s.toString()));
            if(temp.getTipo().equals("decimal") || temp2.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) * Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero") && temp2.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) * Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= Identificador Div Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) / Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) / Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= Identificador Div Decimal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) / Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) / Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= Identificador Div Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            Simbolo temp2 = (editor.tablaSimbolos_id.getToken(s.toString()));
            if(temp.getTipo().equals("decimal") || temp2.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) / Double.parseDouble(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero") && temp2.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) / Integer.parseInt(s.toString());
                addIntermedio("T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= Numero Suma Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Integer.parseInt(s.toString()) + Integer.parseInt(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= Numero Suma Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= Numero Suma Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) + Integer.parseInt(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= Numero Resta Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Integer.parseInt(s.toString()) - Integer.parseInt(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= Numero Resta Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= Numero Resta Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) - Integer.parseInt(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= Numero Mul Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Integer.parseInt(s.toString()) * Integer.parseInt(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= Numero Mul Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= Numero Mul Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) * Integer.parseInt(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= Numero Div Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Integer.parseInt(s.toString()) / Integer.parseInt(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= Numero Div Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= Numero Div Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) / Integer.parseInt(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= Decimal Suma Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= Decimal Suma Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= Decimal Suma Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) + Integer.parseInt(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= Decimal Resta Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= Decimal Resta Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= Decimal Resta Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) - Integer.parseInt(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= Decimal Mul Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= Decimal Mul Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= Decimal Mul Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) * Integer.parseInt(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= Decimal Div Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= Decimal Div Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(id.toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= Decimal Div Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) / Integer.parseInt(temp.getValor().toString());
                addIntermedio("T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICION ::= Identificador OP_REL TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));            
            RESULT = id.toString() + " " + op.toString() + " " +val.toString() + "";
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION ::= TIPO_VALOR_DEC OP_REL Identificador 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));            
            RESULT = val.toString() + " " + op.toString() + " " +id.toString() + "";
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION ::= TIPO_VALOR_DEC OP_REL TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = id.toString() + " " + op.toString() + " " +val.toString() + "";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= TIPO_VALOR_DEC TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se necesita un operador relacional.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= Identificador TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se necesita un operador relacional.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICION ::= VALOR_LOGICO_DEC OP_LOGICO VALOR_LOGICO_DEC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICION ::= VALOR_LOGICO_DEC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_REL ::= Mayor_i 
            {
              Object RESULT =null;
		RESULT = ">=";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_REL ::= Menor_i 
            {
              Object RESULT =null;
		RESULT = "<=";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_REL ::= Diferente 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_REL ::= Mayor 
            {
              Object RESULT =null;
		RESULT = ">";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_REL ::= Menor 
            {
              Object RESULT =null;
		RESULT = "<";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_REL ::= Igual 
            {
              Object RESULT =null;
		RESULT = "==";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DIRECCION ::= izquierda 
            {
              Object RESULT =null;
		RESULT = "izquierda";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DIRECCION ::= derecha 
            {
              Object RESULT =null;
		RESULT = "derecha";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PINES ::= PINES COMA Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT += ","+s.toString();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PINES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PINES ::= Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = "" + s.toString();
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PINES",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // METODO ::= incrementar Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo() == "entero"){
                editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),"entero",Integer.parseInt(temp.getValor().toString())+1);
                addIntermedio(id.toString()+"++;");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo entero.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // METODO ::= decrementar Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo() == "entero"){
                editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),"entero",Integer.parseInt(temp.getValor().toString())-1);
                addIntermedio(id.toString()+"--;");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo entero.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // METODO ::= MOSTRAR_TEXTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // METODO ::= MANIPULAR_COMPONENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MOSTRAR_TEXTO ::= mostrar PARAMETRO_TEXTO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addIntermedio("mostrar(" + s.toString() + ");");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MOSTRAR_TEXTO ::= mostrar error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al identificar el texto dado"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("led")){
                addIntermedio("prender(" + id.toString() + ");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo led.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MANIPULAR_COMPONENTE ::= Identificador PUNTO apagar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("led")){
                addIntermedio("apagar(" + id.toString() + ");"); 
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo led.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a PINES Par_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(esComponente(temp.getTipo())){
                editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),temp.getTipo(),"("+p.toString()+")");
                addIntermedio("asignar(" + id.toString() + ", " + "("+p.toString()+")"  +" );");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como algún componente.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó ingresar la lista de pines.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar PINES Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó abrir el paréntesis.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a error Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Lista de pines no válida.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender PUNTO COLOR 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado prender color");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MANIPULAR_COMPONENTE ::= Identificador PUNTO detener 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("motor")){
                addIntermedio("detener(" + id.toString() + ");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como motor.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("motor")){
                addIntermedio("girar_" + d.toString() + "(" + id.toString() + ");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como motor.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a TIEMPO Par_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object dir = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("motor")){
                addIntermedio("girar_" + dir.toString() + "(" + id.toString() + ", " + t.toString() + ");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como motor.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito el valor de tiempo. Recuerda que es un numero entero y ya sea seg, hr o min.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a Texto Par_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("display")){
                addIntermedio("visualizar(" + id.toString() + ", " + t.toString() +");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como display.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a Identificador Par_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("display")){
                if(editor.tablaSimbolos_id.existeToken(id2.toString())){
                    Simbolo temp2 = (editor.tablaSimbolos_id.getToken(id2.toString()));
                    if(temp2.getTipo().equals("texto")){
                addIntermedio("visualizar(" + id.toString() + ", " + temp2.getValor().toString() +");");
                    }else{
                        addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo texto.");
                    }
                }else{
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
                }
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como display.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a error Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo identificar el texto a visualizar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MANIPULAR_COMPONENTE ::= Identificador PUNTO error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrita la función del componente.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIEMPO ::= Tiempo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = t.toString() ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIEMPO ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("display")){
                RESULT = temp.getValor().toString();
            }else{
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo tiempo.");
            }
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA ::= SENTENCIA METODO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA ::= METODO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA ::= SENTENCIA ASIGNACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA ::= ASIGNACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA ::= SENTENCIA DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA ::= DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA ::= SENTENCIA SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA ::= SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIA ::= SENTENCIA SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIA ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA ::= SENTENCIA SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA ::= SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA ::= SENTENCIA SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA ::= SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA ::= error fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA ::= error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECISION ::= SENTENCIA_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		System.out.println("Se ha encontrado SENTENCIA SI");
                addIntermedio("ifElse " + c.toString()  +" goto + L" + ++conEti);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIA_SI ::= si Par_a error Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA_SI ::= si CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_SI ::= si Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_SI ::= si Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_SI ::= si Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque si");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_SI ::= si Par_a error Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"sino\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque sino");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_REPETIR ::= repetir Identificador veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("entero")){
                
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo entero.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_REPETIR ::= repetir Numero veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		System.out.println("Se ha encontrado REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_REPETIR ::= Identificador Identificador veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"repetir\". Tienes "+s.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_REPETIR ::= repetir veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el número entero de repeticiones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_REPETIR ::= repetir Identificador Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"veces\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_REPETIR ::= repetir Identificador Identificador Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"veces\". Tienes: " +s.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_REPETIR ::= repetir Identificador veces SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque repetir");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIA_REPETIR ::= repetir Numero Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"veces\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTENCIA_REPETIR ::= repetir Numero Identificador Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"veces\". Tienes: " +s.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTENCIA_REPETIR ::= repetir Numero veces SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque repetir");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTENCIA_REPETIR ::= repetir error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia repetir esta incompleta");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado MIENTRAS");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado MIENTRAS");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA_MIENTRAS ::= mientras CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIA_MIENTRAS ::= mientras Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condicion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque mientras");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_MIENTRAS ::= mientras error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintaxis del ciclo mientras, por favor revisalo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("entero")){
                if(!temp.getLexema().equals(id2.toString())){
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id2.toString() + "\" no corresponde a la especificada.");
                }
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo entero.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTENCIA_PARA ::= para Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTENCIA_PARA ::= para Par_a Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner un nuevo identificador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SENTENCIA_PARA ::= para Par_a Identificador Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el signo = ");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el valor de la variable");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTENCIA_PARA ::= para Par_a COMA incrementar Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner ya sea \"incrementar\" o \"decrementar\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner una coma entre el incremento y la condicion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTENCIA_PARA ::= para Par_a error COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la declaración del contador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA error COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura del incremento/decremento");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA error Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTENCIA_PARA ::= para Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La función para esta sin atributos");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTENCIA_PARA ::= para Par_a Par_c error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis del contenido de la función para.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque para");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner las sentencias del bloque para");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SELECTOR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SENTENCIA_SELECTOR ::= selector Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la sentencia selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_SELECTOR ::= selector Par_a Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el identificador en el selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTENCIA_SELECTOR ::= selector error Identificador Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis en el selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTENCIA_SELECTOR ::= selector Par_a error Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ir un identificador en el atributo de selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta agregar los casos");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // BLOQUE_SELECTOR ::= caso Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // BLOQUE_SELECTOR ::= caso Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // BLOQUE_SELECTOR ::= caso verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // BLOQUE_SELECTOR ::= caso falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // BLOQUE_SELECTOR ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector.");
        System.out.println("Error en casos del selector, punto coma en " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // BLOQUE_SELECTOR ::= error caso 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector.");
        System.out.println("Error en casos del selector, ir al caso en línea " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // BLOQUE_SELECTOR ::= error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector.");
        System.out.println("Error en casos del selector, ir a llave en la línea " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // PARAMETRO_TEXTO ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("motor")){
                RESULT = temp.getValor().toString();
            }else{
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo texto.");
            }
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_TEXTO",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // PARAMETRO_TEXTO ::= Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_TEXTO",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // INC_DEC ::= incrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // INC_DEC ::= decrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TIPO_DATO_DEC ::= entero 
            {
              Object RESULT =null;
		RESULT = "entero";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TIPO_DATO_DEC ::= decimal 
            {
              Object RESULT =null;
		RESULT = "decimal";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TIPO_DATO_DEC ::= logico 
            {
              Object RESULT =null;
		RESULT = "logico";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TIPO_DATO_DEC ::= texto 
            {
              Object RESULT =null;
		RESULT = "texto";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TIPO_DATO_DEC ::= display 
            {
              Object RESULT =null;
		RESULT = "display";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TIPO_DATO_DEC ::= motor 
            {
              Object RESULT =null;
		RESULT = "motor";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TIPO_DATO_DEC ::= led 
            {
              Object RESULT =null;
		RESULT = "led";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TIPO_DATO_DEC ::= ledRGB 
            {
              Object RESULT =null;
		RESULT = "ledRGB";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TIPO_DATO_DEC ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Tipo de dato no válido.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TIPO_VALOR_DEC ::= Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TIPO_VALOR_DEC ::= Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT =s ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TIPO_VALOR_DEC ::= Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TIPO_VALOR_DEC ::= VALOR_LOGICO_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TIPO_VALOR_DEC ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se esperaba un valor.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // VALOR_LOGICO_DEC ::= verdadero 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO_DEC",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // VALOR_LOGICO_DEC ::= falso 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO_DEC",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // OP_LOGICO ::= y 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // OP_LOGICO ::= o 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
