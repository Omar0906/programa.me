
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package aux_tools.sintactico;

import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;
import aux_tools.sintactico.ErroresSintacticos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u010d\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\002\006\000\002\002\005\000\002\002\006" +
    "\000\002\002\004\000\002\002\003\000\002\056\007\000" +
    "\002\056\007\000\002\056\006\000\002\056\006\000\002" +
    "\056\006\000\002\056\006\000\002\056\004\000\002\050" +
    "\005\000\002\050\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\005\000\002\003\004\000" +
    "\002\003\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\005\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\006\000\002\007\006\000\002\060\012\000\002\060\021" +
    "\000\002\010\011\000\002\010\010\000\002\010\011\000" +
    "\002\010\011\000\002\010\010\000\002\010\010\000\002" +
    "\010\010\000\002\010\010\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\005\000" +
    "\002\016\003\000\002\017\005\000\002\017\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\006\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\024\003\000\002\024\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\004\000" +
    "\002\030\004\000\002\030\003\000\002\030\003\000\002" +
    "\031\004\000\002\031\004\000\002\061\005\000\002\061" +
    "\005\000\002\061\010\000\002\061\007\000\002\061\007" +
    "\000\002\061\007\000\002\061\010\000\002\061\007\000" +
    "\002\061\005\000\002\061\007\000\002\061\012\000\002" +
    "\061\013\000\002\061\010\000\002\061\010\000\002\061" +
    "\006\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\033\003\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\005\000\002\035\004\000\002" +
    "\035\004\000\002\035\003\000\002\035\005\000\002\035" +
    "\004\000\002\035\004\000\002\035\003\000\002\035\004" +
    "\000\002\035\003\000\002\035\004\000\002\035\003\000" +
    "\002\035\004\000\002\035\003\000\002\035\004\000\002" +
    "\035\003\000\002\035\004\000\002\035\003\000\002\035" +
    "\004\000\002\035\003\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\051\011\000\002\051\011\000\002" +
    "\051\010\000\002\051\010\000\002\051\010\000\002\051" +
    "\010\000\002\051\015\000\002\051\015\000\002\051\014" +
    "\000\002\051\014\000\002\052\011\000\002\052\011\000" +
    "\002\052\007\000\002\052\010\000\002\052\010\000\002" +
    "\052\010\000\002\052\010\000\002\052\010\000\002\052" +
    "\011\000\002\052\011\000\002\057\013\000\002\057\012" +
    "\000\002\057\012\000\002\057\012\000\002\057\012\000" +
    "\002\057\012\000\002\057\012\000\002\057\012\000\002" +
    "\057\012\000\002\057\012\000\002\057\012\000\002\057" +
    "\012\000\002\040\010\000\002\040\010\000\002\040\007" +
    "\000\002\040\007\000\002\040\010\000\002\040\007\000" +
    "\002\040\007\000\002\040\007\000\002\042\011\000\002" +
    "\042\010\000\002\042\007\000\002\042\010\000\002\042" +
    "\010\000\002\042\011\000\002\042\010\000\002\042\006" +
    "\000\002\042\006\000\002\043\011\000\002\043\010\000" +
    "\002\043\010\000\002\043\010\000\002\043\010\000\002" +
    "\043\010\000\002\043\005\000\002\044\020\000\002\044" +
    "\017\000\002\044\017\000\002\044\017\000\002\044\017" +
    "\000\002\044\015\000\002\044\017\000\002\044\017\000" +
    "\002\044\017\000\002\044\016\000\002\044\017\000\002" +
    "\044\020\000\002\044\010\000\002\044\011\000\002\044" +
    "\017\000\002\044\017\000\002\045\011\000\002\045\010" +
    "\000\002\045\010\000\002\045\010\000\002\045\011\000" +
    "\002\045\010\000\002\045\010\000\002\055\011\000\002" +
    "\055\010\000\002\055\011\000\002\055\010\000\002\055" +
    "\011\000\002\055\010\000\002\055\011\000\002\055\010" +
    "\000\002\055\004\000\002\055\004\000\002\055\004\000" +
    "\002\025\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\054\003\000\002\054\003\000\002\053" +
    "\003\000\002\053\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\011\003" +
    "\000\002\011\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02bd\000\010\003\004\036\005\076\007\001\002\000" +
    "\016\002\ufffa\003\u02b9\013\022\036\005\037\021\076\u02b8" +
    "\001\002\000\006\076\u02ae\124\u02ad\001\002\000\014\003" +
    "\026\010\017\013\022\037\021\076\025\001\002\000\004" +
    "\076\012\001\002\000\004\002\011\001\002\000\004\002" +
    "\001\001\002\000\004\124\013\001\002\000\004\006\014" +
    "\001\002\000\004\100\015\001\002\000\014\003\ufff8\010" +
    "\ufff8\013\ufff8\037\ufff8\076\ufff8\001\002\000\012\003\uffe1" +
    "\013\uffe1\030\uffe1\076\uffe1\001\002\000\036\003\056\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\064\u02ab\074\051\075\065\076\045\131\035\001" +
    "\002\000\012\003\uffe3\013\uffe3\030\uffe3\076\uffe3\001\002" +
    "\000\012\003\u02a7\013\022\030\u02a6\076\u026e\001\002\000" +
    "\006\012\u0275\076\u0276\001\002\000\010\003\u026c\013\022" +
    "\076\u0274\001\002\000\004\027\u0273\001\002\000\034\003" +
    "\056\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\u0272\131\035\001" +
    "\002\000\046\003\u024c\010\017\013\022\022\063\024\053" +
    "\025\054\027\u024b\030\u0250\044\041\046\066\053\036\056" +
    "\060\057\064\064\u0247\074\051\075\065\076\u024f\131\035" +
    "\001\002\000\012\003\uffdf\013\uffdf\030\uffdf\076\uffdf\001" +
    "\002\000\010\003\032\010\017\076\033\001\002\000\004" +
    "\027\u024a\001\002\000\040\003\056\022\063\024\053\025" +
    "\054\027\u0248\044\041\046\066\053\036\056\060\057\064" +
    "\064\u0247\074\051\075\065\076\045\131\035\001\002\000" +
    "\034\003\056\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\131" +
    "\035\001\002\000\040\022\uff79\024\uff79\025\uff79\044\uff79" +
    "\046\uff79\053\uff79\054\uff79\056\uff79\057\uff79\064\uff79\074" +
    "\uff79\075\uff79\076\uff79\105\uff79\131\uff79\001\002\000\006" +
    "\076\u01d8\102\u01d7\001\002\000\012\003\u01c0\004\246\062" +
    "\u01c1\076\252\001\002\000\040\022\uff69\024\uff69\025\uff69" +
    "\044\uff69\046\uff69\053\uff69\054\uff69\056\uff69\057\uff69\064" +
    "\uff69\074\uff69\075\uff69\076\uff69\105\uff69\131\uff69\001\002" +
    "\000\034\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\064\u01bf\074\051\075\065\076\045" +
    "\131\035\001\002\000\024\003\u01a9\004\107\005\074\006" +
    "\075\026\103\063\104\072\110\076\105\102\u01a8\001\002" +
    "\000\040\022\uff75\024\uff75\025\uff75\044\uff75\046\uff75\053" +
    "\uff75\054\uff75\056\uff75\057\uff75\064\uff75\074\uff75\075\uff75" +
    "\076\uff75\105\uff75\131\uff75\001\002\000\040\022\uff73\024" +
    "\uff73\025\uff73\044\uff73\046\uff73\053\uff73\054\uff73\056\uff73" +
    "\057\uff73\064\uff73\074\uff73\075\uff73\076\uff73\105\uff73\131" +
    "\uff73\001\002\000\040\022\uff6a\024\uff6a\025\uff6a\044\uff6a" +
    "\046\uff6a\053\uff6a\054\uff6a\056\uff6a\057\uff6a\064\uff6a\074" +
    "\uff6a\075\uff6a\076\uff6a\105\uff6a\131\uff6a\001\002\000\024" +
    "\004\u019e\005\150\006\264\026\266\063\265\076\u019d\102" +
    "\u019b\111\263\126\262\001\002\000\040\022\uff77\024\uff77" +
    "\025\uff77\044\uff77\046\uff77\053\uff77\054\uff77\056\uff77\057" +
    "\uff77\064\uff77\074\uff77\075\uff77\076\uff77\105\uff77\131\uff77" +
    "\001\002\000\042\022\uff7f\024\uff7f\025\uff7f\044\uff7f\046" +
    "\uff7f\053\uff7f\054\uff7f\056\uff7f\057\uff7f\064\uff7f\074\uff7f" +
    "\075\uff7f\076\uff7f\100\u019a\105\uff7f\131\uff7f\001\002\000" +
    "\042\022\uff7b\024\uff7b\025\uff7b\044\uff7b\046\uff7b\053\uff7b" +
    "\054\uff7b\056\uff7b\057\uff7b\064\uff7b\074\uff7b\075\uff7b\076" +
    "\uff7b\100\u0199\105\uff7b\131\uff7b\001\002\000\004\076\u0198" +
    "\001\002\000\040\022\uff71\024\uff71\025\uff71\044\uff71\046" +
    "\uff71\053\uff71\054\uff71\056\uff71\057\uff71\064\uff71\074\uff71" +
    "\075\uff71\076\uff71\105\uff71\131\uff71\001\002\000\022\004" +
    "\107\005\074\006\075\026\103\063\104\072\110\076\105" +
    "\102\u017b\001\002\000\022\004\107\005\074\006\075\026" +
    "\103\063\104\072\110\076\105\102\u014b\001\002\000\046" +
    "\022\uff9b\024\uff9b\025\uff9b\044\uff9b\046\uff9b\053\uff9b\054" +
    "\uff9b\056\uff9b\057\uff9b\064\uff9b\074\uff9b\075\uff9b\076\uff9b" +
    "\100\uff9b\103\uff9b\105\uff9b\127\uff9b\131\uff9b\001\002\000" +
    "\010\064\u0149\100\u0148\105\u014a\001\002\000\040\022\uff6b" +
    "\024\uff6b\025\uff6b\044\uff6b\046\uff6b\053\uff6b\054\uff6b\056" +
    "\uff6b\057\uff6b\064\uff6b\074\uff6b\075\uff6b\076\uff6b\105\uff6b" +
    "\131\uff6b\001\002\000\010\003\377\076\u0100\102\376\001" +
    "\002\000\046\022\uff9c\024\uff9c\025\uff9c\044\uff9c\046\uff9c" +
    "\053\uff9c\054\uff9c\056\uff9c\057\uff9c\064\uff9c\074\uff9c\075" +
    "\uff9c\076\uff9c\100\uff9c\103\uff9c\105\uff9c\127\uff9c\131\uff9c" +
    "\001\002\000\040\022\uff6f\024\uff6f\025\uff6f\044\uff6f\046" +
    "\uff6f\053\uff6f\054\uff6f\056\uff6f\057\uff6f\064\uff6f\074\uff6f" +
    "\075\uff6f\076\uff6f\105\uff6f\131\uff6f\001\002\000\012\003" +
    "\250\004\246\076\252\102\247\001\002\000\022\004\107" +
    "\005\074\006\075\026\103\063\104\072\110\076\105\102" +
    "\076\001\002\000\004\076\073\001\002\000\010\003\067" +
    "\006\070\076\072\001\002\000\046\022\uff99\024\uff99\025" +
    "\uff99\044\uff99\046\uff99\053\uff99\054\uff99\056\uff99\057\uff99" +
    "\064\uff99\074\uff99\075\uff99\076\uff99\100\uff99\103\uff99\105" +
    "\uff99\127\uff99\131\uff99\001\002\000\046\022\uff09\024\uff09" +
    "\025\uff09\044\uff09\046\uff09\053\uff09\054\uff09\056\uff09\057" +
    "\uff09\064\uff09\074\uff09\075\uff09\076\uff09\100\uff09\103\uff09" +
    "\105\uff09\127\uff09\131\uff09\001\002\000\046\022\uff9a\024" +
    "\uff9a\025\uff9a\044\uff9a\046\uff9a\053\uff9a\054\uff9a\056\uff9a" +
    "\057\uff9a\064\uff9a\074\uff9a\075\uff9a\076\uff9a\100\uff9a\103" +
    "\uff9a\105\uff9a\127\uff9a\131\uff9a\001\002\000\046\022\uff0a" +
    "\024\uff0a\025\uff0a\044\uff0a\046\uff0a\053\uff0a\054\uff0a\056" +
    "\uff0a\057\uff0a\064\uff0a\074\uff0a\075\uff0a\076\uff0a\100\uff0a" +
    "\103\uff0a\105\uff0a\127\uff0a\131\uff0a\001\002\000\046\022" +
    "\uff9d\024\uff9d\025\uff9d\044\uff9d\046\uff9d\053\uff9d\054\uff9d" +
    "\056\uff9d\057\uff9d\064\uff9d\074\uff9d\075\uff9d\076\uff9d\100" +
    "\uff9d\103\uff9d\105\uff9d\127\uff9d\131\uff9d\001\002\000\050" +
    "\046\uffba\071\uffba\073\uffba\074\uffba\075\uffba\076\uffba\103" +
    "\uffba\104\uffba\110\146\112\uffba\113\uffba\114\uffba\115\uffba" +
    "\116\140\117\144\120\147\121\141\122\143\127\uffba\001" +
    "\002\000\016\110\146\116\140\117\144\120\147\121\141" +
    "\122\143\001\002\000\026\003\203\004\107\005\074\006" +
    "\075\026\103\063\104\072\110\076\105\102\132\103\202" +
    "\001\002\000\040\046\uffaf\071\uffaf\073\uffaf\074\uffaf\075" +
    "\uffaf\076\uffaf\103\uffaf\104\uffaf\110\uffaf\116\uffaf\117\uffaf" +
    "\120\uffaf\121\uffaf\122\uffaf\127\uffaf\001\002\000\040\046" +
    "\uffb5\071\145\073\137\074\uffb5\075\uffb5\076\uffb5\103\uffb5" +
    "\104\uffb5\110\146\116\140\117\144\120\147\121\141\122" +
    "\143\127\uffb5\001\002\000\024\046\uffb7\071\134\073\uffb7" +
    "\074\uffb7\075\uffb7\076\uffb7\103\uffb7\104\uffb7\127\uffb7\001" +
    "\002\000\100\022\uffbd\024\uffbd\025\uffbd\044\uffbd\046\uffbd" +
    "\053\uffbd\054\uffbd\056\uffbd\057\uffbd\064\uffbd\071\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\100\uffbd\103\uffbd\104\uffbd" +
    "\105\uffbd\110\uffbd\112\uffbd\113\uffbd\114\uffbd\115\uffbd\116" +
    "\uffbd\117\uffbd\120\uffbd\121\uffbd\122\uffbd\127\uffbd\131\uffbd" +
    "\001\002\000\040\046\uffad\071\uffad\073\uffad\074\uffad\075" +
    "\uffad\076\uffad\103\uffad\104\uffad\110\uffad\116\uffad\117\uffad" +
    "\120\uffad\121\uffad\122\uffad\127\uffad\001\002\000\040\046" +
    "\uffae\071\uffae\073\uffae\074\uffae\075\uffae\076\uffae\103\uffae" +
    "\104\uffae\110\uffae\116\uffae\117\uffae\120\uffae\121\uffae\122" +
    "\uffae\127\uffae\001\002\000\052\046\uffb9\071\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\103\uffb9\104\uffb9\110\uffb9\112" +
    "\uffb9\113\uffb9\114\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9" +
    "\121\uffb9\122\uffb9\126\200\127\uffb9\001\002\000\100\022" +
    "\uffc0\024\uffc0\025\uffc0\044\uffc0\046\uffc0\053\uffc0\054\uffc0" +
    "\056\uffc0\057\uffc0\064\uffc0\071\uffc0\073\uffc0\074\uffc0\075" +
    "\uffc0\076\uffc0\100\uffc0\103\uffc0\104\uffc0\105\uffc0\110\uffc0" +
    "\112\uffc0\113\uffc0\114\165\115\166\116\uffc0\117\uffc0\120" +
    "\uffc0\121\uffc0\122\uffc0\127\uffc0\131\uffc0\001\002\000\050" +
    "\046\uffbb\071\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\103" +
    "\uffbb\104\uffbb\110\146\112\uffbb\113\uffbb\114\uffbb\115\uffbb" +
    "\116\140\117\144\120\147\121\141\122\143\127\uffbb\001" +
    "\002\000\004\102\173\001\002\000\044\046\uffac\071\uffac" +
    "\073\uffac\074\uffac\075\uffac\076\uffac\103\uffac\104\uffac\110" +
    "\uffac\112\160\113\157\116\uffac\117\uffac\120\uffac\121\uffac" +
    "\122\uffac\127\uffac\001\002\000\006\073\113\103\114\001" +
    "\002\000\022\004\107\005\074\006\075\026\103\063\104" +
    "\072\110\076\105\102\132\001\002\000\004\104\115\001" +
    "\002\000\034\003\056\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\034\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\105\127\131\035\001\002\000\040\022\uff7a" +
    "\024\uff7a\025\uff7a\044\uff7a\046\uff7a\053\uff7a\054\uff7a\056" +
    "\uff7a\057\uff7a\064\uff7a\074\uff7a\075\uff7a\076\uff7a\105\uff7a" +
    "\131\uff7a\001\002\000\040\022\uff76\024\uff76\025\uff76\044" +
    "\uff76\046\uff76\053\uff76\054\uff76\056\uff76\057\uff76\064\uff76" +
    "\074\uff76\075\uff76\076\uff76\105\uff76\131\uff76\001\002\000" +
    "\040\022\uff74\024\uff74\025\uff74\044\uff74\046\uff74\053\uff74" +
    "\054\uff74\056\uff74\057\uff74\064\uff74\074\uff74\075\uff74\076" +
    "\uff74\105\uff74\131\uff74\001\002\000\040\022\uff78\024\uff78" +
    "\025\uff78\044\uff78\046\uff78\053\uff78\054\uff78\056\uff78\057" +
    "\uff78\064\uff78\074\uff78\075\uff78\076\uff78\105\uff78\131\uff78" +
    "\001\002\000\042\022\uff80\024\uff80\025\uff80\044\uff80\046" +
    "\uff80\053\uff80\054\uff80\056\uff80\057\uff80\064\uff80\074\uff80" +
    "\075\uff80\076\uff80\100\131\105\uff80\131\uff80\001\002\000" +
    "\042\022\uff7c\024\uff7c\025\uff7c\044\uff7c\046\uff7c\053\uff7c" +
    "\054\uff7c\056\uff7c\057\uff7c\064\uff7c\074\uff7c\075\uff7c\076" +
    "\uff7c\100\130\105\uff7c\131\uff7c\001\002\000\040\022\uff72" +
    "\024\uff72\025\uff72\044\uff72\046\uff72\053\uff72\054\uff72\056" +
    "\uff72\057\uff72\064\uff72\074\uff72\075\uff72\076\uff72\105\uff72" +
    "\131\uff72\001\002\000\040\022\uff70\024\uff70\025\uff70\044" +
    "\uff70\046\uff70\053\uff70\054\uff70\056\uff70\057\uff70\064\uff70" +
    "\074\uff70\075\uff70\076\uff70\105\uff70\131\uff70\001\002\000" +
    "\040\022\uff66\024\uff66\025\uff66\044\uff66\046\uff66\053\uff66" +
    "\054\uff66\056\uff66\057\uff66\064\uff66\074\uff66\075\uff66\076" +
    "\uff66\105\uff66\131\uff66\001\002\000\040\022\uff7e\024\uff7e" +
    "\025\uff7e\044\uff7e\046\uff7e\053\uff7e\054\uff7e\056\uff7e\057" +
    "\uff7e\064\uff7e\074\uff7e\075\uff7e\076\uff7e\105\uff7e\131\uff7e" +
    "\001\002\000\040\022\uff82\024\uff82\025\uff82\044\uff82\046" +
    "\uff82\053\uff82\054\uff82\056\uff82\057\uff82\064\uff82\074\uff82" +
    "\075\uff82\076\uff82\105\uff82\131\uff82\001\002\000\022\004" +
    "\107\005\074\006\075\026\103\063\104\072\110\076\105" +
    "\102\132\001\002\000\024\046\uffb8\071\134\073\uffb8\074" +
    "\uffb8\075\uffb8\076\uffb8\103\uffb8\104\uffb8\127\uffb8\001\002" +
    "\000\022\004\107\005\074\006\075\026\103\063\104\072" +
    "\110\076\105\102\132\001\002\000\040\046\uffb6\071\uffb6" +
    "\073\uffb6\074\uffb6\075\uffb6\076\uffb6\103\uffb6\104\uffb6\110" +
    "\146\116\140\117\144\120\147\121\141\122\143\127\uffb6" +
    "\001\002\000\020\004\152\005\150\026\103\063\104\072" +
    "\110\076\105\102\132\001\002\000\020\004\ufef5\005\ufef5" +
    "\026\ufef5\063\ufef5\072\ufef5\076\ufef5\102\ufef5\001\002\000" +
    "\022\004\uffa4\005\uffa4\006\uffa4\026\uffa4\063\uffa4\072\uffa4" +
    "\076\uffa4\102\uffa4\001\002\000\022\004\uffa8\005\uffa8\006" +
    "\uffa8\026\uffa8\063\uffa8\072\uffa8\076\uffa8\102\uffa8\001\002" +
    "\000\020\004\152\005\150\026\103\063\104\072\110\076" +
    "\105\102\132\001\002\000\022\004\uffa7\005\uffa7\006\uffa7" +
    "\026\uffa7\063\uffa7\072\uffa7\076\uffa7\102\uffa7\001\002\000" +
    "\022\004\uffa5\005\uffa5\006\uffa5\026\uffa5\063\uffa5\072\uffa5" +
    "\076\uffa5\102\uffa5\001\002\000\020\004\ufef6\005\ufef6\026" +
    "\ufef6\063\ufef6\072\ufef6\076\ufef6\102\ufef6\001\002\000\022" +
    "\004\uffa3\005\uffa3\006\uffa3\026\uffa3\063\uffa3\072\uffa3\076" +
    "\uffa3\102\uffa3\001\002\000\022\004\uffa6\005\uffa6\006\uffa6" +
    "\026\uffa6\063\uffa6\072\uffa6\076\uffa6\102\uffa6\001\002\000" +
    "\100\022\uffba\024\uffba\025\uffba\044\uffba\046\uffba\053\uffba" +
    "\054\uffba\056\uffba\057\uffba\064\uffba\071\uffba\073\uffba\074" +
    "\uffba\075\uffba\076\uffba\100\uffba\103\uffba\104\uffba\105\uffba" +
    "\110\uffba\112\uffba\113\uffba\114\uffba\115\uffba\116\uffba\117" +
    "\uffba\120\uffba\121\uffba\122\uffba\127\uffba\131\uffba\001\002" +
    "\000\040\046\uffb4\071\uffb4\073\uffb4\074\uffb4\075\uffb4\076" +
    "\uffb4\103\uffb4\104\uffb4\110\uffb4\116\uffb4\117\uffb4\120\uffb4" +
    "\121\uffb4\122\uffb4\127\uffb4\001\002\000\100\022\uffbb\024" +
    "\uffbb\025\uffbb\044\uffbb\046\uffbb\053\uffbb\054\uffbb\056\uffbb" +
    "\057\uffbb\064\uffbb\071\uffbb\073\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\100\uffbb\103\uffbb\104\uffbb\105\uffbb\110\uffbb\112\uffbb" +
    "\113\uffbb\114\uffbb\115\uffbb\116\uffbb\117\uffbb\120\uffbb\121" +
    "\uffbb\122\uffbb\127\uffbb\131\uffbb\001\002\000\040\046\uffb3" +
    "\071\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\103\uffb3\104" +
    "\uffb3\110\uffb3\116\uffb3\117\uffb3\120\uffb3\121\uffb3\122\uffb3" +
    "\127\uffb3\001\002\000\044\046\uffac\071\uffac\073\uffac\074" +
    "\uffac\075\uffac\076\uffac\103\161\104\uffac\110\uffac\112\160" +
    "\113\157\116\uffac\117\uffac\120\uffac\121\uffac\122\uffac\127" +
    "\uffac\001\002\000\006\073\113\103\156\001\002\000\040" +
    "\046\uffaa\071\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\103" +
    "\uffaa\104\uffaa\110\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa" +
    "\122\uffaa\127\uffaa\001\002\000\012\004\152\005\150\076" +
    "\164\102\162\001\002\000\012\004\152\005\150\076\164" +
    "\102\162\001\002\000\100\022\uffbc\024\uffbc\025\uffbc\044" +
    "\uffbc\046\uffbc\053\uffbc\054\uffbc\056\uffbc\057\uffbc\064\uffbc" +
    "\071\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\100\uffbc\103" +
    "\uffbc\104\uffbc\105\uffbc\110\uffbc\112\uffbc\113\uffbc\114\uffbc" +
    "\115\uffbc\116\uffbc\117\uffbc\120\uffbc\121\uffbc\122\uffbc\127" +
    "\uffbc\131\uffbc\001\002\000\012\004\152\005\150\076\164" +
    "\102\162\001\002\000\100\022\uffc2\024\uffc2\025\uffc2\044" +
    "\uffc2\046\uffc2\053\uffc2\054\uffc2\056\uffc2\057\uffc2\064\uffc2" +
    "\071\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\100\uffc2\103" +
    "\uffc2\104\uffc2\105\uffc2\110\uffc2\112\uffc2\113\uffc2\114\165" +
    "\115\166\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2\127" +
    "\uffc2\131\uffc2\001\002\000\100\022\uffb9\024\uffb9\025\uffb9" +
    "\044\uffb9\046\uffb9\053\uffb9\054\uffb9\056\uffb9\057\uffb9\064" +
    "\uffb9\071\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\100\uffb9" +
    "\103\uffb9\104\uffb9\105\uffb9\110\uffb9\112\uffb9\113\uffb9\114" +
    "\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9" +
    "\127\uffb9\131\uffb9\001\002\000\012\004\152\005\150\076" +
    "\164\102\162\001\002\000\012\004\152\005\150\076\164" +
    "\102\162\001\002\000\100\022\uffbe\024\uffbe\025\uffbe\044" +
    "\uffbe\046\uffbe\053\uffbe\054\uffbe\056\uffbe\057\uffbe\064\uffbe" +
    "\071\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\100\uffbe\103" +
    "\uffbe\104\uffbe\105\uffbe\110\uffbe\112\uffbe\113\uffbe\114\uffbe" +
    "\115\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe\122\uffbe\127" +
    "\uffbe\131\uffbe\001\002\000\100\022\uffbf\024\uffbf\025\uffbf" +
    "\044\uffbf\046\uffbf\053\uffbf\054\uffbf\056\uffbf\057\uffbf\064" +
    "\uffbf\071\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\100\uffbf" +
    "\103\uffbf\104\uffbf\105\uffbf\110\uffbf\112\uffbf\113\uffbf\114" +
    "\uffbf\115\uffbf\116\uffbf\117\uffbf\120\uffbf\121\uffbf\122\uffbf" +
    "\127\uffbf\131\uffbf\001\002\000\010\103\161\112\160\113" +
    "\157\001\002\000\100\022\uffc1\024\uffc1\025\uffc1\044\uffc1" +
    "\046\uffc1\053\uffc1\054\uffc1\056\uffc1\057\uffc1\064\uffc1\071" +
    "\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\100\uffc1\103\uffc1" +
    "\104\uffc1\105\uffc1\110\uffc1\112\uffc1\113\uffc1\114\165\115" +
    "\166\116\uffc1\117\uffc1\120\uffc1\121\uffc1\122\uffc1\127\uffc1" +
    "\131\uffc1\001\002\000\022\004\107\005\074\006\075\026" +
    "\103\063\104\072\110\076\105\102\132\001\002\000\006" +
    "\073\113\103\175\001\002\000\040\046\uffa9\071\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\076\uffa9\103\uffa9\104\uffa9\110\uffa9" +
    "\116\uffa9\117\uffa9\120\uffa9\121\uffa9\122\uffa9\127\uffa9\001" +
    "\002\000\022\004\107\005\074\006\075\026\103\063\104" +
    "\072\110\076\105\102\132\001\002\000\040\046\uffb0\071" +
    "\145\073\137\074\uffb0\075\uffb0\076\uffb0\103\uffb0\104\uffb0" +
    "\110\146\116\140\117\144\120\147\121\141\122\143\127" +
    "\uffb0\001\002\000\004\134\201\001\002\000\040\046\uffab" +
    "\071\uffab\073\uffab\074\uffab\075\uffab\076\uffab\103\uffab\104" +
    "\uffab\110\uffab\116\uffab\117\uffab\120\uffab\121\uffab\122\uffab" +
    "\127\uffab\001\002\000\004\104\237\001\002\000\004\103" +
    "\227\001\002\000\010\073\113\103\206\104\205\001\002" +
    "\000\034\003\056\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\131\035\001\002\000\060\003\056\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\071\uffaa" +
    "\073\uffaa\074\051\075\065\076\045\103\uffaa\104\210\110" +
    "\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\122\uffaa\131\035" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\224\131\035\001\002\000\034\003\056\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\212\131\035\001" +
    "\002\000\044\022\uff68\024\uff68\025\uff68\044\uff68\046\uff68" +
    "\053\uff68\054\uff68\056\uff68\057\uff68\060\214\064\uff68\074" +
    "\uff68\075\uff68\076\uff68\104\213\105\uff68\131\uff68\001\002" +
    "\000\034\003\056\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\131\035\001\002\000\036\003\056\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\104\216\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\221\131\035\001" +
    "\002\000\034\003\056\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\034\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\105\220\131\035\001\002\000\040\022\uff62" +
    "\024\uff62\025\uff62\044\uff62\046\uff62\053\uff62\054\uff62\056" +
    "\uff62\057\uff62\064\uff62\074\uff62\075\uff62\076\uff62\105\uff62" +
    "\131\uff62\001\002\000\040\022\uff5f\024\uff5f\025\uff5f\044" +
    "\uff5f\046\uff5f\053\uff5f\054\uff5f\056\uff5f\057\uff5f\064\uff5f" +
    "\074\uff5f\075\uff5f\076\uff5f\105\uff5f\131\uff5f\001\002\000" +
    "\034\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\045\105\223\131" +
    "\035\001\002\000\040\022\uff60\024\uff60\025\uff60\044\uff60" +
    "\046\uff60\053\uff60\054\uff60\056\uff60\057\uff60\064\uff60\074" +
    "\uff60\075\uff60\076\uff60\105\uff60\131\uff60\001\002\000\040" +
    "\022\uff63\024\uff63\025\uff63\044\uff63\046\uff63\053\uff63\054" +
    "\uff63\056\uff63\057\uff63\064\uff63\074\uff63\075\uff63\076\uff63" +
    "\105\uff63\131\uff63\001\002\000\034\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\105\226\131\035\001\002\000\040\022" +
    "\uff64\024\uff64\025\uff64\044\uff64\046\uff64\053\uff64\054\uff64" +
    "\056\uff64\057\uff64\064\uff64\074\uff64\075\uff64\076\uff64\105" +
    "\uff64\131\uff64\001\002\000\004\104\230\001\002\000\034" +
    "\003\056\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\131\035" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\232\131\035\001\002\000\042\022\uff67\024\uff67\025" +
    "\uff67\044\uff67\046\uff67\053\uff67\054\uff67\056\uff67\057\uff67" +
    "\060\233\064\uff67\074\uff67\075\uff67\076\uff67\105\uff67\131" +
    "\uff67\001\002\000\004\104\234\001\002\000\034\003\056" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\131\035\001\002" +
    "\000\034\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\105\236" +
    "\131\035\001\002\000\040\022\uff61\024\uff61\025\uff61\044" +
    "\uff61\046\uff61\053\uff61\054\uff61\056\uff61\057\uff61\064\uff61" +
    "\074\uff61\075\uff61\076\uff61\105\uff61\131\uff61\001\002\000" +
    "\034\003\056\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\131" +
    "\035\001\002\000\034\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\105\241\131\035\001\002\000\040\022\uff65\024\uff65" +
    "\025\uff65\044\uff65\046\uff65\053\uff65\054\uff65\056\uff65\057" +
    "\uff65\064\uff65\074\uff65\075\uff65\076\uff65\105\uff65\131\uff65" +
    "\001\002\000\022\004\107\005\074\006\075\026\103\063" +
    "\104\072\110\076\105\102\132\001\002\000\040\046\uffb2" +
    "\071\145\073\137\074\uffb2\075\uffb2\076\uffb2\103\uffb2\104" +
    "\uffb2\110\146\116\140\117\144\120\147\121\141\122\143" +
    "\127\uffb2\001\002\000\022\004\107\005\074\006\075\026" +
    "\103\063\104\072\110\076\105\102\132\001\002\000\040" +
    "\046\uffb1\071\145\073\137\074\uffb1\075\uffb1\076\uffb1\103" +
    "\uffb1\104\uffb1\110\146\116\140\117\144\120\147\121\141" +
    "\122\143\127\uffb1\001\002\000\014\003\uff0b\062\uff0b\076" +
    "\uff0b\104\uff0b\127\uff0b\001\002\000\014\003\353\004\246" +
    "\076\252\103\355\127\352\001\002\000\004\103\350\001" +
    "\002\000\004\127\253\001\002\000\014\003\uff0c\062\uff0c" +
    "\076\uff0c\104\uff0c\127\uff0c\001\002\000\012\046\066\074" +
    "\051\075\065\076\254\001\002\000\024\004\152\005\150" +
    "\006\264\026\266\063\265\076\164\102\162\111\263\126" +
    "\262\001\002\000\020\046\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\100\uff9f\103\uff9f\127\uff9f\001\002\000\020\046\uffa0\074" +
    "\uffa0\075\uffa0\076\uffa0\100\uffa0\103\uffa0\127\uffa0\001\002" +
    "\000\004\103\260\001\002\000\004\100\261\001\002\000" +
    "\040\022\uff3d\024\uff3d\025\uff3d\044\uff3d\046\uff3d\053\uff3d" +
    "\054\uff3d\056\uff3d\057\uff3d\064\uff3d\074\uff3d\075\uff3d\076" +
    "\uff3d\105\uff3d\131\uff3d\001\002\000\020\003\300\007\303" +
    "\021\275\031\301\052\276\123\277\130\302\001\002\000" +
    "\064\003\273\004\152\005\150\006\270\022\uffc8\024\uffc8" +
    "\025\uffc8\026\271\044\uffc8\046\uffc8\053\uffc8\054\uffc8\056" +
    "\uffc8\057\uffc8\063\272\064\uffc8\074\uffc8\075\uffc8\076\164" +
    "\100\uffc8\102\162\103\uffc8\105\uffc8\127\uffc8\131\uffc8\001" +
    "\002\000\046\022\uffc7\024\uffc7\025\uffc7\044\uffc7\046\uffc7" +
    "\053\uffc7\054\uffc7\056\uffc7\057\uffc7\064\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\100\uffc7\103\uffc7\105\uffc7\127\uffc7\131\uffc7" +
    "\001\002\000\046\022\uffc6\024\uffc6\025\uffc6\044\uffc6\046" +
    "\uffc6\053\uffc6\054\uffc6\056\uffc6\057\uffc6\064\uffc6\074\uffc6" +
    "\075\uffc6\076\uffc6\100\uffc6\103\uffc6\105\uffc6\127\uffc6\131" +
    "\uffc6\001\002\000\046\022\uffc5\024\uffc5\025\uffc5\044\uffc5" +
    "\046\uffc5\053\uffc5\054\uffc5\056\uffc5\057\uffc5\064\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\100\uffc5\103\uffc5\105\uffc5\127\uffc5" +
    "\131\uffc5\001\002\000\052\022\uffc4\024\uffc4\025\uffc4\044" +
    "\uffc4\046\uffc4\053\uffc4\054\uffc4\056\uffc4\057\uffc4\064\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\100\uffc4\103\uffc4\105\uffc4\112" +
    "\160\113\157\127\uffc4\131\uffc4\001\002\000\046\022\uffcc" +
    "\024\uffcc\025\uffcc\044\uffcc\046\uffcc\053\uffcc\054\uffcc\056" +
    "\uffcc\057\uffcc\064\uffcc\074\uffcc\075\uffcc\076\uffcc\100\uffcc" +
    "\103\uffcc\105\uffcc\127\uffcc\131\uffcc\001\002\000\046\022" +
    "\uffca\024\uffca\025\uffca\044\uffca\046\uffca\053\uffca\054\uffca" +
    "\056\uffca\057\uffca\064\uffca\074\uffca\075\uffca\076\uffca\100" +
    "\uffca\103\uffca\105\uffca\127\uffca\131\uffca\001\002\000\046" +
    "\022\uffcb\024\uffcb\025\uffcb\044\uffcb\046\uffcb\053\uffcb\054" +
    "\uffcb\056\uffcb\057\uffcb\064\uffcb\074\uffcb\075\uffcb\076\uffcb" +
    "\100\uffcb\103\uffcb\105\uffcb\127\uffcb\131\uffcb\001\002\000" +
    "\046\022\uffc3\024\uffc3\025\uffc3\044\uffc3\046\uffc3\053\uffc3" +
    "\054\uffc3\056\uffc3\057\uffc3\064\uffc3\074\uffc3\075\uffc3\076" +
    "\uffc3\100\uffc3\103\uffc3\105\uffc3\127\uffc3\131\uffc3\001\002" +
    "\000\052\022\uffc9\024\uffc9\025\uffc9\044\uffc9\046\uffc9\053" +
    "\uffc9\054\uffc9\056\uffc9\057\uffc9\064\uffc9\074\uffc9\075\uffc9" +
    "\076\uffc9\100\uffc9\103\uffc9\105\uffc9\112\160\113\157\127" +
    "\uffc9\131\uffc9\001\002\000\006\004\335\102\336\001\002" +
    "\000\050\022\uff98\024\uff98\025\uff98\044\uff98\046\uff98\053" +
    "\uff98\054\uff98\056\uff98\057\uff98\064\uff98\074\uff98\075\uff98" +
    "\076\uff98\100\uff98\103\uff98\105\uff98\126\330\127\uff98\131" +
    "\uff98\001\002\000\046\022\uff90\024\uff90\025\uff90\044\uff90" +
    "\046\uff90\053\uff90\054\uff90\056\uff90\057\uff90\064\uff90\074" +
    "\uff90\075\uff90\076\uff90\100\uff90\103\uff90\105\uff90\127\uff90" +
    "\131\uff90\001\002\000\004\100\327\001\002\000\004\126" +
    "\313\001\002\000\004\102\304\001\002\000\046\022\uff97" +
    "\024\uff97\025\uff97\044\uff97\046\uff97\053\uff97\054\uff97\056" +
    "\uff97\057\uff97\064\uff97\074\uff97\075\uff97\076\uff97\100\uff97" +
    "\103\uff97\105\uff97\127\uff97\131\uff97\001\002\000\010\003" +
    "\306\006\307\076\310\001\002\000\004\103\312\001\002" +
    "\000\004\103\311\001\002\000\004\103\uff84\001\002\000" +
    "\004\103\uff83\001\002\000\046\022\uff8b\024\uff8b\025\uff8b" +
    "\044\uff8b\046\uff8b\053\uff8b\054\uff8b\056\uff8b\057\uff8b\064" +
    "\uff8b\074\uff8b\075\uff8b\076\uff8b\100\uff8b\103\uff8b\105\uff8b" +
    "\127\uff8b\131\uff8b\001\002\000\046\022\uff8c\024\uff8c\025" +
    "\uff8c\044\uff8c\046\uff8c\053\uff8c\054\uff8c\056\uff8c\057\uff8c" +
    "\064\uff8c\074\uff8c\075\uff8c\076\uff8c\100\uff8c\103\uff8c\105" +
    "\uff8c\127\uff8c\131\uff8c\001\002\000\006\014\315\041\316" +
    "\001\002\000\050\022\uff8f\024\uff8f\025\uff8f\044\uff8f\046" +
    "\uff8f\053\uff8f\054\uff8f\056\uff8f\057\uff8f\064\uff8f\074\uff8f" +
    "\075\uff8f\076\uff8f\100\uff8f\102\317\103\uff8f\105\uff8f\127" +
    "\uff8f\131\uff8f\001\002\000\050\022\uffa1\024\uffa1\025\uffa1" +
    "\044\uffa1\046\uffa1\053\uffa1\054\uffa1\056\uffa1\057\uffa1\064" +
    "\uffa1\074\uffa1\075\uffa1\076\uffa1\100\uffa1\102\uffa1\103\uffa1" +
    "\105\uffa1\127\uffa1\131\uffa1\001\002\000\050\022\uffa2\024" +
    "\uffa2\025\uffa2\044\uffa2\046\uffa2\053\uffa2\054\uffa2\056\uffa2" +
    "\057\uffa2\064\uffa2\074\uffa2\075\uffa2\076\uffa2\100\uffa2\102" +
    "\uffa2\103\uffa2\105\uffa2\127\uffa2\131\uffa2\001\002\000\010" +
    "\003\320\076\321\077\323\001\002\000\004\103\325\001" +
    "\002\000\004\103\uff85\001\002\000\004\103\324\001\002" +
    "\000\004\103\uff86\001\002\000\046\022\uff8e\024\uff8e\025" +
    "\uff8e\044\uff8e\046\uff8e\053\uff8e\054\uff8e\056\uff8e\057\uff8e" +
    "\064\uff8e\074\uff8e\075\uff8e\076\uff8e\100\uff8e\103\uff8e\105" +
    "\uff8e\127\uff8e\131\uff8e\001\002\000\004\100\326\001\002" +
    "\000\046\022\uff8d\024\uff8d\025\uff8d\044\uff8d\046\uff8d\053" +
    "\uff8d\054\uff8d\056\uff8d\057\uff8d\064\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\100\uff8d\103\uff8d\105\uff8d\127\uff8d\131\uff8d\001" +
    "\002\000\046\022\uff8a\024\uff8a\025\uff8a\044\uff8a\046\uff8a" +
    "\053\uff8a\054\uff8a\056\uff8a\057\uff8a\064\uff8a\074\uff8a\075" +
    "\uff8a\076\uff8a\100\uff8a\103\uff8a\105\uff8a\127\uff8a\131\uff8a" +
    "\001\002\000\010\135\334\136\332\137\333\001\002\000" +
    "\046\022\uff91\024\uff91\025\uff91\044\uff91\046\uff91\053\uff91" +
    "\054\uff91\056\uff91\057\uff91\064\uff91\074\uff91\075\uff91\076" +
    "\uff91\100\uff91\103\uff91\105\uff91\127\uff91\131\uff91\001\002" +
    "\000\046\022\uff88\024\uff88\025\uff88\044\uff88\046\uff88\053" +
    "\uff88\054\uff88\056\uff88\057\uff88\064\uff88\074\uff88\075\uff88" +
    "\076\uff88\100\uff88\103\uff88\105\uff88\127\uff88\131\uff88\001" +
    "\002\000\046\022\uff87\024\uff87\025\uff87\044\uff87\046\uff87" +
    "\053\uff87\054\uff87\056\uff87\057\uff87\064\uff87\074\uff87\075" +
    "\uff87\076\uff87\100\uff87\103\uff87\105\uff87\127\uff87\131\uff87" +
    "\001\002\000\046\022\uff89\024\uff89\025\uff89\044\uff89\046" +
    "\uff89\053\uff89\054\uff89\056\uff89\057\uff89\064\uff89\074\uff89" +
    "\075\uff89\076\uff89\100\uff89\103\uff89\105\uff89\127\uff89\131" +
    "\uff89\001\002\000\046\022\ufff1\024\ufff1\025\ufff1\044\ufff1" +
    "\046\ufff1\053\ufff1\054\ufff1\056\ufff1\057\ufff1\064\ufff1\074" +
    "\ufff1\075\ufff1\076\ufff1\100\ufff1\103\ufff1\105\ufff1\127\ufff1" +
    "\131\ufff1\001\002\000\010\003\344\004\335\103\345\001" +
    "\002\000\006\103\341\127\340\001\002\000\004\004\342" +
    "\001\002\000\046\022\uff95\024\uff95\025\uff95\044\uff95\046" +
    "\uff95\053\uff95\054\uff95\056\uff95\057\uff95\064\uff95\074\uff95" +
    "\075\uff95\076\uff95\100\uff95\103\uff95\105\uff95\127\uff95\131" +
    "\uff95\001\002\000\046\022\ufff2\024\ufff2\025\ufff2\044\ufff2" +
    "\046\ufff2\053\ufff2\054\ufff2\056\ufff2\057\ufff2\064\ufff2\074" +
    "\ufff2\075\ufff2\076\ufff2\100\ufff2\103\ufff2\105\ufff2\127\ufff2" +
    "\131\ufff2\001\002\000\046\022\uff93\024\uff93\025\uff93\044" +
    "\uff93\046\uff93\053\uff93\054\uff93\056\uff93\057\uff93\064\uff93" +
    "\074\uff93\075\uff93\076\uff93\100\uff93\103\347\105\uff93\127" +
    "\340\131\uff93\001\002\000\004\103\346\001\002\000\046" +
    "\022\uff94\024\uff94\025\uff94\044\uff94\046\uff94\053\uff94\054" +
    "\uff94\056\uff94\057\uff94\064\uff94\074\uff94\075\uff94\076\uff94" +
    "\100\uff94\103\uff94\105\uff94\127\uff94\131\uff94\001\002\000" +
    "\046\022\uff92\024\uff92\025\uff92\044\uff92\046\uff92\053\uff92" +
    "\054\uff92\056\uff92\057\uff92\064\uff92\074\uff92\075\uff92\076" +
    "\uff92\100\uff92\103\uff92\105\uff92\127\uff92\131\uff92\001\002" +
    "\000\046\022\uff96\024\uff96\025\uff96\044\uff96\046\uff96\053" +
    "\uff96\054\uff96\056\uff96\057\uff96\064\uff96\074\uff96\075\uff96" +
    "\076\uff96\100\uff96\103\uff96\105\uff96\127\uff96\131\uff96\001" +
    "\002\000\004\100\351\001\002\000\040\022\uff38\024\uff38" +
    "\025\uff38\044\uff38\046\uff38\053\uff38\054\uff38\056\uff38\057" +
    "\uff38\064\uff38\074\uff38\075\uff38\076\uff38\105\uff38\131\uff38" +
    "\001\002\000\012\046\066\074\051\075\065\076\254\001" +
    "\002\000\004\103\371\001\002\000\006\003\360\127\357" +
    "\001\002\000\004\100\356\001\002\000\040\022\uff39\024" +
    "\uff39\025\uff39\044\uff39\046\uff39\053\uff39\054\uff39\056\uff39" +
    "\057\uff39\064\uff39\074\uff39\075\uff39\076\uff39\105\uff39\131" +
    "\uff39\001\002\000\014\046\066\074\051\075\065\076\254" +
    "\103\364\001\002\000\012\046\066\074\051\075\065\076" +
    "\254\001\002\000\004\103\362\001\002\000\004\100\363" +
    "\001\002\000\040\022\uff3b\024\uff3b\025\uff3b\044\uff3b\046" +
    "\uff3b\053\uff3b\054\uff3b\056\uff3b\057\uff3b\064\uff3b\074\uff3b" +
    "\075\uff3b\076\uff3b\105\uff3b\131\uff3b\001\002\000\004\100" +
    "\370\001\002\000\004\103\366\001\002\000\042\022\uff3f" +
    "\024\uff3f\025\uff3f\044\uff3f\046\uff3f\053\uff3f\054\uff3f\056" +
    "\uff3f\057\uff3f\064\uff3f\074\uff3f\075\uff3f\076\uff3f\100\367" +
    "\105\uff3f\131\uff3f\001\002\000\040\022\uff40\024\uff40\025" +
    "\uff40\044\uff40\046\uff40\053\uff40\054\uff40\056\uff40\057\uff40" +
    "\064\uff40\074\uff40\075\uff40\076\uff40\105\uff40\131\uff40\001" +
    "\002\000\040\022\uff3a\024\uff3a\025\uff3a\044\uff3a\046\uff3a" +
    "\053\uff3a\054\uff3a\056\uff3a\057\uff3a\064\uff3a\074\uff3a\075" +
    "\uff3a\076\uff3a\105\uff3a\131\uff3a\001\002\000\004\100\372" +
    "\001\002\000\040\022\uff3e\024\uff3e\025\uff3e\044\uff3e\046" +
    "\uff3e\053\uff3e\054\uff3e\056\uff3e\057\uff3e\064\uff3e\074\uff3e" +
    "\075\uff3e\076\uff3e\105\uff3e\131\uff3e\001\002\000\004\103" +
    "\374\001\002\000\004\100\375\001\002\000\040\022\uff3c" +
    "\024\uff3c\025\uff3c\044\uff3c\046\uff3c\053\uff3c\054\uff3c\056" +
    "\uff3c\057\uff3c\064\uff3c\074\uff3c\075\uff3c\076\uff3c\105\uff3c" +
    "\131\uff3c\001\002\000\010\003\u0137\076\u0138\103\u0139\001" +
    "\002\000\004\076\u0133\001\002\000\004\103\u0101\001\002" +
    "\000\004\104\u0102\001\002\000\006\003\u0103\011\u0104\001" +
    "\002\000\010\011\u0131\100\u0130\105\u0132\001\002\000\012" +
    "\004\u011c\006\u011e\026\u011f\063\u011d\001\002\000\006\011" +
    "\u0106\105\u0107\001\002\000\012\004\u0108\006\u010a\026\u010b" +
    "\063\u0109\001\002\000\040\022\uff1f\024\uff1f\025\uff1f\044" +
    "\uff1f\046\uff1f\053\uff1f\054\uff1f\056\uff1f\057\uff1f\064\uff1f" +
    "\074\uff1f\075\uff1f\076\uff1f\105\uff1f\131\uff1f\001\002\000" +
    "\004\101\u0118\001\002\000\004\101\u0114\001\002\000\004" +
    "\101\u0110\001\002\000\004\101\u010c\001\002\000\034\003" +
    "\056\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\045\131\035\001" +
    "\002\000\034\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\054\u010e\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\004\100\u010f\001\002\000\006" +
    "\011\uff13\105\uff13\001\002\000\034\003\056\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\054\u0112" +
    "\056\060\057\064\074\051\075\065\076\045\131\035\001" +
    "\002\000\004\100\u0113\001\002\000\006\011\uff17\105\uff17" +
    "\001\002\000\034\003\056\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\056\060\057\064\074\051\075\065" +
    "\076\045\131\035\001\002\000\034\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\054\u0116\056\060\057\064" +
    "\074\051\075\065\076\045\131\035\001\002\000\004\100" +
    "\u0117\001\002\000\006\011\uff15\105\uff15\001\002\000\034" +
    "\003\056\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\131\035" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\054\u011a\056\060\057\064\074\051\075\065" +
    "\076\045\131\035\001\002\000\004\100\u011b\001\002\000" +
    "\006\011\uff19\105\uff19\001\002\000\004\101\u012c\001\002" +
    "\000\004\101\u0128\001\002\000\004\101\u0124\001\002\000" +
    "\004\101\u0120\001\002\000\034\003\056\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\131\035\001\002\000\034\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\054\u0122\056" +
    "\060\057\064\074\051\075\065\076\045\131\035\001\002" +
    "\000\004\100\u0123\001\002\000\006\011\uff12\105\uff12\001" +
    "\002\000\034\003\056\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\034\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\054\u0126\056\060\057\064\074" +
    "\051\075\065\076\045\131\035\001\002\000\004\100\u0127" +
    "\001\002\000\006\011\uff16\105\uff16\001\002\000\034\003" +
    "\056\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\045\131\035\001" +
    "\002\000\034\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\054\u012a\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\004\100\u012b\001\002\000\006" +
    "\011\uff14\105\uff14\001\002\000\034\003\056\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\054\u012e" +
    "\056\060\057\064\074\051\075\065\076\045\131\035\001" +
    "\002\000\004\100\u012f\001\002\000\006\011\uff18\105\uff18" +
    "\001\002\000\006\011\uff11\105\uff11\001\002\000\006\011" +
    "\uff10\105\uff10\001\002\000\006\011\uff0f\105\uff0f\001\002" +
    "\000\004\104\u0134\001\002\000\006\003\u0103\011\u0104\001" +
    "\002\000\006\011\u0106\105\u0136\001\002\000\040\022\uff1d" +
    "\024\uff1d\025\uff1d\044\uff1d\046\uff1d\053\uff1d\054\uff1d\056" +
    "\uff1d\057\uff1d\064\uff1d\074\uff1d\075\uff1d\076\uff1d\105\uff1d" +
    "\131\uff1d\001\002\000\004\103\u0144\001\002\000\004\103" +
    "\u013d\001\002\000\004\104\u013a\001\002\000\006\003\u0103" +
    "\011\u0104\001\002\000\006\011\u0106\105\u013c\001\002\000" +
    "\040\022\uff1e\024\uff1e\025\uff1e\044\uff1e\046\uff1e\053\uff1e" +
    "\054\uff1e\056\uff1e\057\uff1e\064\uff1e\074\uff1e\075\uff1e\076" +
    "\uff1e\105\uff1e\131\uff1e\001\002\000\010\003\u0103\011\u0104" +
    "\104\u013e\001\002\000\010\003\u0103\011\u0104\105\u0142\001" +
    "\002\000\006\011\u0106\105\u0140\001\002\000\040\022\uff1b" +
    "\024\uff1b\025\uff1b\044\uff1b\046\uff1b\053\uff1b\054\uff1b\056" +
    "\uff1b\057\uff1b\064\uff1b\074\uff1b\075\uff1b\076\uff1b\105\uff1b" +
    "\131\uff1b\001\002\000\006\011\u0106\105\u0143\001\002\000" +
    "\040\022\uff1a\024\uff1a\025\uff1a\044\uff1a\046\uff1a\053\uff1a" +
    "\054\uff1a\056\uff1a\057\uff1a\064\uff1a\074\uff1a\075\uff1a\076" +
    "\uff1a\105\uff1a\131\uff1a\001\002\000\040\022\uff20\024\uff20" +
    "\025\uff20\044\uff20\046\uff20\053\uff20\054\uff20\056\uff20\057" +
    "\uff20\064\uff20\074\uff20\075\uff20\076\uff20\105\uff20\131\uff20" +
    "\001\002\000\004\104\u0145\001\002\000\006\003\u0103\011" +
    "\u0104\001\002\000\006\011\u0106\105\u0147\001\002\000\040" +
    "\022\uff1c\024\uff1c\025\uff1c\044\uff1c\046\uff1c\053\uff1c\054" +
    "\uff1c\056\uff1c\057\uff1c\064\uff1c\074\uff1c\075\uff1c\076\uff1c" +
    "\105\uff1c\131\uff1c\001\002\000\040\022\uff6e\024\uff6e\025" +
    "\uff6e\044\uff6e\046\uff6e\053\uff6e\054\uff6e\056\uff6e\057\uff6e" +
    "\064\uff6e\074\uff6e\075\uff6e\076\uff6e\105\uff6e\131\uff6e\001" +
    "\002\000\040\022\uff6d\024\uff6d\025\uff6d\044\uff6d\046\uff6d" +
    "\053\uff6d\054\uff6d\056\uff6d\057\uff6d\064\uff6d\074\uff6d\075" +
    "\uff6d\076\uff6d\105\uff6d\131\uff6d\001\002\000\040\022\uff6c" +
    "\024\uff6c\025\uff6c\044\uff6c\046\uff6c\053\uff6c\054\uff6c\056" +
    "\uff6c\057\uff6c\064\uff6c\074\uff6c\075\uff6c\076\uff6c\105\uff6c" +
    "\131\uff6c\001\002\000\026\003\u0154\004\107\005\074\006" +
    "\075\026\103\063\104\072\110\076\105\102\132\127\u0153" +
    "\001\002\000\006\073\113\127\u014d\001\002\000\012\046" +
    "\066\074\051\075\065\076\254\001\002\000\004\127\u014f" +
    "\001\002\000\012\046\066\074\051\075\065\076\254\001" +
    "\002\000\004\103\u0151\001\002\000\004\100\u0152\001\002" +
    "\000\040\022\uff52\024\uff52\025\uff52\044\uff52\046\uff52\053" +
    "\uff52\054\uff52\056\uff52\057\uff52\064\uff52\074\uff52\075\uff52" +
    "\076\uff52\105\uff52\131\uff52\001\002\000\012\046\066\074" +
    "\051\075\065\076\254\001\002\000\004\127\u0171\001\002" +
    "\000\020\046\066\073\113\074\051\075\065\076\254\103" +
    "\156\127\u0156\001\002\000\016\003\u015d\046\066\074\051" +
    "\075\065\076\254\127\u015c\001\002\000\004\127\u0158\001" +
    "\002\000\012\046\066\074\051\075\065\076\254\001\002" +
    "\000\004\103\u015a\001\002\000\004\100\u015b\001\002\000" +
    "\040\022\uff50\024\uff50\025\uff50\044\uff50\046\uff50\053\uff50" +
    "\054\uff50\056\uff50\057\uff50\064\uff50\074\uff50\075\uff50\076" +
    "\uff50\105\uff50\131\uff50\001\002\000\012\046\066\074\051" +
    "\075\065\076\254\001\002\000\004\127\u016b\001\002\000" +
    "\014\046\066\074\051\075\065\076\254\127\u015f\001\002" +
    "\000\016\003\u0164\046\066\074\051\075\065\076\254\103" +
    "\u0163\001\002\000\004\103\u0161\001\002\000\004\100\u0162" +
    "\001\002\000\040\022\uff4e\024\uff4e\025\uff4e\044\uff4e\046" +
    "\uff4e\053\uff4e\054\uff4e\056\uff4e\057\uff4e\064\uff4e\074\uff4e" +
    "\075\uff4e\076\uff4e\105\uff4e\131\uff4e\001\002\000\004\100" +
    "\u016a\001\002\000\004\100\u0169\001\002\000\006\100\u0166" +
    "\103\u0167\001\002\000\040\022\uff4c\024\uff4c\025\uff4c\044" +
    "\uff4c\046\uff4c\053\uff4c\054\uff4c\056\uff4c\057\uff4c\064\uff4c" +
    "\074\uff4c\075\uff4c\076\uff4c\105\uff4c\131\uff4c\001\002\000" +
    "\042\022\uff53\024\uff53\025\uff53\044\uff53\046\uff53\053\uff53" +
    "\054\uff53\056\uff53\057\uff53\064\uff53\074\uff53\075\uff53\076" +
    "\uff53\100\u0168\105\uff53\131\uff53\001\002\000\040\022\uff54" +
    "\024\uff54\025\uff54\044\uff54\046\uff54\053\uff54\054\uff54\056" +
    "\uff54\057\uff54\064\uff54\074\uff54\075\uff54\076\uff54\105\uff54" +
    "\131\uff54\001\002\000\040\022\uff49\024\uff49\025\uff49\044" +
    "\uff49\046\uff49\053\uff49\054\uff49\056\uff49\057\uff49\064\uff49" +
    "\074\uff49\075\uff49\076\uff49\105\uff49\131\uff49\001\002\000" +
    "\040\022\uff4d\024\uff4d\025\uff4d\044\uff4d\046\uff4d\053\uff4d" +
    "\054\uff4d\056\uff4d\057\uff4d\064\uff4d\074\uff4d\075\uff4d\076" +
    "\uff4d\105\uff4d\131\uff4d\001\002\000\012\046\066\074\051" +
    "\075\065\076\254\001\002\000\004\100\u016d\001\002\000" +
    "\040\022\uff4a\024\uff4a\025\uff4a\044\uff4a\046\uff4a\053\uff4a" +
    "\054\uff4a\056\uff4a\057\uff4a\064\uff4a\074\uff4a\075\uff4a\076" +
    "\uff4a\105\uff4a\131\uff4a\001\002\000\004\103\u016f\001\002" +
    "\000\004\100\u0170\001\002\000\040\022\uff4f\024\uff4f\025" +
    "\uff4f\044\uff4f\046\uff4f\053\uff4f\054\uff4f\056\uff4f\057\uff4f" +
    "\064\uff4f\074\uff4f\075\uff4f\076\uff4f\105\uff4f\131\uff4f\001" +
    "\002\000\012\046\066\074\051\075\065\076\254\001\002" +
    "\000\004\127\u0173\001\002\000\012\046\066\074\051\075" +
    "\065\076\254\001\002\000\004\100\u0175\001\002\000\040" +
    "\022\uff4b\024\uff4b\025\uff4b\044\uff4b\046\uff4b\053\uff4b\054" +
    "\uff4b\056\uff4b\057\uff4b\064\uff4b\074\uff4b\075\uff4b\076\uff4b" +
    "\105\uff4b\131\uff4b\001\002\000\004\127\u0177\001\002\000" +
    "\012\046\066\074\051\075\065\076\254\001\002\000\004" +
    "\103\u0179\001\002\000\004\100\u017a\001\002\000\040\022" +
    "\uff51\024\uff51\025\uff51\044\uff51\046\uff51\053\uff51\054\uff51" +
    "\056\uff51\057\uff51\064\uff51\074\uff51\075\uff51\076\uff51\105" +
    "\uff51\131\uff51\001\002\000\026\003\u0182\004\107\005\074" +
    "\006\075\026\103\063\104\072\110\076\105\102\132\127" +
    "\u0181\001\002\000\006\073\113\127\u017d\001\002\000\012" +
    "\046\066\074\051\075\065\076\254\001\002\000\004\100" +
    "\u017f\001\002\000\004\103\u0180\001\002\000\040\022\uff5b" +
    "\024\uff5b\025\uff5b\044\uff5b\046\uff5b\053\uff5b\054\uff5b\056" +
    "\uff5b\057\uff5b\064\uff5b\074\uff5b\075\uff5b\076\uff5b\105\uff5b" +
    "\131\uff5b\001\002\000\012\046\066\074\051\075\065\076" +
    "\254\001\002\000\004\127\u0191\001\002\000\020\046\066" +
    "\073\113\074\051\075\065\076\254\103\156\127\u0184\001" +
    "\002\000\016\003\u0189\046\066\074\051\075\065\076\254" +
    "\103\u0188\001\002\000\004\103\u0186\001\002\000\042\022" +
    "\uff5c\024\uff5c\025\uff5c\044\uff5c\046\uff5c\053\uff5c\054\uff5c" +
    "\056\uff5c\057\uff5c\064\uff5c\074\uff5c\075\uff5c\076\uff5c\100" +
    "\u0187\105\uff5c\131\uff5c\001\002\000\040\022\uff59\024\uff59" +
    "\025\uff59\044\uff59\046\uff59\053\uff59\054\uff59\056\uff59\057" +
    "\uff59\064\uff59\074\uff59\075\uff59\076\uff59\105\uff59\131\uff59" +
    "\001\002\000\004\100\u0190\001\002\000\004\103\u018e\001" +
    "\002\000\006\100\u018b\103\u018c\001\002\000\040\022\uff57" +
    "\024\uff57\025\uff57\044\uff57\046\uff57\053\uff57\054\uff57\056" +
    "\uff57\057\uff57\064\uff57\074\uff57\075\uff57\076\uff57\105\uff57" +
    "\131\uff57\001\002\000\004\100\u018d\001\002\000\040\022" +
    "\uff5e\024\uff5e\025\uff5e\044\uff5e\046\uff5e\053\uff5e\054\uff5e" +
    "\056\uff5e\057\uff5e\064\uff5e\074\uff5e\075\uff5e\076\uff5e\105" +
    "\uff5e\131\uff5e\001\002\000\004\100\u018f\001\002\000\040" +
    "\022\uff55\024\uff55\025\uff55\044\uff55\046\uff55\053\uff55\054" +
    "\uff55\056\uff55\057\uff55\064\uff55\074\uff55\075\uff55\076\uff55" +
    "\105\uff55\131\uff55\001\002\000\040\022\uff58\024\uff58\025" +
    "\uff58\044\uff58\046\uff58\053\uff58\054\uff58\056\uff58\057\uff58" +
    "\064\uff58\074\uff58\075\uff58\076\uff58\105\uff58\131\uff58\001" +
    "\002\000\012\046\066\074\051\075\065\076\254\001\002" +
    "\000\004\103\u0193\001\002\000\004\100\u0194\001\002\000" +
    "\040\022\uff56\024\uff56\025\uff56\044\uff56\046\uff56\053\uff56" +
    "\054\uff56\056\uff56\057\uff56\064\uff56\074\uff56\075\uff56\076" +
    "\uff56\105\uff56\131\uff56\001\002\000\004\103\u0196\001\002" +
    "\000\004\100\u0197\001\002\000\040\022\uff5a\024\uff5a\025" +
    "\uff5a\044\uff5a\046\uff5a\053\uff5a\054\uff5a\056\uff5a\057\uff5a" +
    "\064\uff5a\074\uff5a\075\uff5a\076\uff5a\105\uff5a\131\uff5a\001" +
    "\002\000\046\022\uff9e\024\uff9e\025\uff9e\044\uff9e\046\uff9e" +
    "\053\uff9e\054\uff9e\056\uff9e\057\uff9e\064\uff9e\074\uff9e\075" +
    "\uff9e\076\uff9e\100\uff9e\103\uff9e\105\uff9e\127\uff9e\131\uff9e" +
    "\001\002\000\040\022\uff7d\024\uff7d\025\uff7d\044\uff7d\046" +
    "\uff7d\053\uff7d\054\uff7d\056\uff7d\057\uff7d\064\uff7d\074\uff7d" +
    "\075\uff7d\076\uff7d\105\uff7d\131\uff7d\001\002\000\040\022" +
    "\uff81\024\uff81\025\uff81\044\uff81\046\uff81\053\uff81\054\uff81" +
    "\056\uff81\057\uff81\064\uff81\074\uff81\075\uff81\076\uff81\105" +
    "\uff81\131\uff81\001\002\000\022\004\107\005\074\006\075" +
    "\026\103\063\104\072\110\076\105\102\132\001\002\000" +
    "\004\062\u019f\001\002\000\054\022\uffb9\024\uffb9\025\uffb9" +
    "\044\uffb9\046\uffb9\053\uffb9\054\uffb9\056\uffb9\057\uffb9\062" +
    "\uff0c\064\uffb9\074\uffb9\075\uffb9\076\uffb9\100\uffb9\105\uffb9" +
    "\112\uffb9\113\uffb9\114\uffb9\115\uffb9\131\uffb9\001\002\000" +
    "\054\022\uffbb\024\uffbb\025\uffbb\044\uffbb\046\uffbb\053\uffbb" +
    "\054\uffbb\056\uffbb\057\uffbb\062\uff0b\064\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\100\uffbb\105\uffbb\112\uffbb\113\uffbb\114\uffbb" +
    "\115\uffbb\131\uffbb\001\002\000\004\104\u01a0\001\002\000" +
    "\034\003\056\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\131" +
    "\035\001\002\000\034\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\105\u01a2\131\035\001\002\000\040\022\uff47\024\uff47" +
    "\025\uff47\044\uff47\046\uff47\053\uff47\054\uff47\056\uff47\057" +
    "\uff47\064\uff47\074\uff47\075\uff47\076\uff47\105\uff47\131\uff47" +
    "\001\002\000\006\073\113\127\u01a4\001\002\000\012\046" +
    "\066\074\051\075\065\076\254\001\002\000\004\103\u01a6" +
    "\001\002\000\004\100\u01a7\001\002\000\040\022\uff5d\024" +
    "\uff5d\025\uff5d\044\uff5d\046\uff5d\053\uff5d\054\uff5d\056\uff5d" +
    "\057\uff5d\064\uff5d\074\uff5d\075\uff5d\076\uff5d\105\uff5d\131" +
    "\uff5d\001\002\000\024\004\107\005\074\006\075\026\103" +
    "\063\104\072\110\076\105\102\132\103\u01b0\001\002\000" +
    "\004\105\u01af\001\002\000\006\073\113\103\u01ab\001\002" +
    "\000\004\104\u01ac\001\002\000\034\003\056\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\u01ae\131\035\001" +
    "\002\000\040\022\uff36\024\uff36\025\uff36\044\uff36\046\uff36" +
    "\053\uff36\054\uff36\056\uff36\057\uff36\064\uff36\074\uff36\075" +
    "\uff36\076\uff36\105\uff36\131\uff36\001\002\000\040\022\uff31" +
    "\024\uff31\025\uff31\044\uff31\046\uff31\053\uff31\054\uff31\056" +
    "\uff31\057\uff31\064\uff31\074\uff31\075\uff31\076\uff31\105\uff31" +
    "\131\uff31\001\002\000\004\104\u01bc\001\002\000\010\073" +
    "\113\103\u01b3\104\u01b2\001\002\000\034\003\056\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\131\035\001\002\000\060" +
    "\003\056\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\071\uffaa\073\uffaa\074\051\075\065" +
    "\076\045\103\uffaa\104\u01b5\110\uffaa\116\uffaa\117\uffaa\120" +
    "\uffaa\121\uffaa\122\uffaa\131\035\001\002\000\034\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\105\u01b9\131\035\001\002" +
    "\000\036\003\056\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\u01b7\131\035\001\002\000\034\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\105\u01b8\131\035\001\002\000\040\022" +
    "\uff32\024\uff32\025\uff32\044\uff32\046\uff32\053\uff32\054\uff32" +
    "\056\uff32\057\uff32\064\uff32\074\uff32\075\uff32\076\uff32\105" +
    "\uff32\131\uff32\001\002\000\040\022\uff37\024\uff37\025\uff37" +
    "\044\uff37\046\uff37\053\uff37\054\uff37\056\uff37\057\uff37\064" +
    "\uff37\074\uff37\075\uff37\076\uff37\105\uff37\131\uff37\001\002" +
    "\000\040\022\uff33\024\uff33\025\uff33\044\uff33\046\uff33\053" +
    "\uff33\054\uff33\056\uff33\057\uff33\064\uff33\074\uff33\075\uff33" +
    "\076\uff33\105\uff33\131\uff33\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\105\u01bb\131\035\001\002\000" +
    "\040\022\uff34\024\uff34\025\uff34\044\uff34\046\uff34\053\uff34" +
    "\054\uff34\056\uff34\057\uff34\064\uff34\074\uff34\075\uff34\076" +
    "\uff34\105\uff34\131\uff34\001\002\000\034\003\056\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\131\035\001\002\000\034" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\105\u01be\131\035" +
    "\001\002\000\040\022\uff35\024\uff35\025\uff35\044\uff35\046" +
    "\uff35\053\uff35\054\uff35\056\uff35\057\uff35\064\uff35\074\uff35" +
    "\075\uff35\076\uff35\105\uff35\131\uff35\001\002\000\004\027" +
    "\uffe7\001\002\000\004\104\u01d4\001\002\000\004\104\u01d1" +
    "\001\002\000\010\062\u01c4\076\u01c5\104\u01c3\001\002\000" +
    "\034\003\056\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\131" +
    "\035\001\002\000\036\003\056\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\104\u01ca\131\035\001\002\000\004\104\u01c6" +
    "\001\002\000\034\003\056\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\056\060\057\064\074\051\075\065" +
    "\076\045\131\035\001\002\000\034\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\105\u01c8\131\035\001\002\000\040\022" +
    "\uff44\024\uff44\025\uff44\044\uff44\046\uff44\053\uff44\054\uff44" +
    "\056\uff44\057\uff44\064\uff44\074\uff44\075\uff44\076\uff44\105" +
    "\uff44\131\uff44\001\002\000\034\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\105\u01ce\131\035\001\002\000\036\003\056" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\105\u01cc\131\035" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\u01cd\131\035\001\002\000\040\022\uff42\024\uff42\025" +
    "\uff42\044\uff42\046\uff42\053\uff42\054\uff42\056\uff42\057\uff42" +
    "\064\uff42\074\uff42\075\uff42\076\uff42\105\uff42\131\uff42\001" +
    "\002\000\040\022\uff48\024\uff48\025\uff48\044\uff48\046\uff48" +
    "\053\uff48\054\uff48\056\uff48\057\uff48\064\uff48\074\uff48\075" +
    "\uff48\076\uff48\105\uff48\131\uff48\001\002\000\040\022\uff43" +
    "\024\uff43\025\uff43\044\uff43\046\uff43\053\uff43\054\uff43\056" +
    "\uff43\057\uff43\064\uff43\074\uff43\075\uff43\076\uff43\105\uff43" +
    "\131\uff43\001\002\000\034\022\063\024\053\025\054\044" +
    "\041\046\066\053\036\056\060\057\064\074\051\075\065" +
    "\076\045\105\u01d0\131\035\001\002\000\040\022\uff45\024" +
    "\uff45\025\uff45\044\uff45\046\uff45\053\uff45\054\uff45\056\uff45" +
    "\057\uff45\064\uff45\074\uff45\075\uff45\076\uff45\105\uff45\131" +
    "\uff45\001\002\000\034\003\056\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\131\035\001\002\000\034\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\105\u01d3\131\035\001\002\000\040" +
    "\022\uff46\024\uff46\025\uff46\044\uff46\046\uff46\053\uff46\054" +
    "\uff46\056\uff46\057\uff46\064\uff46\074\uff46\075\uff46\076\uff46" +
    "\105\uff46\131\uff46\001\002\000\034\003\056\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\u01d6\131\035\001" +
    "\002\000\040\022\uff41\024\uff41\025\uff41\044\uff41\046\uff41" +
    "\053\uff41\054\uff41\056\uff41\057\uff41\064\uff41\074\uff41\075" +
    "\uff41\076\uff41\105\uff41\131\uff41\001\002\000\014\003\u01e7" +
    "\076\u01e9\103\u01ea\111\u01e8\127\u01e6\001\002\000\004\111" +
    "\u01d9\001\002\000\004\004\u01da\001\002\000\004\127\u01db" +
    "\001\002\000\006\074\u01de\075\u01dc\001\002\000\004\076" +
    "\uff07\001\002\000\004\076\u01df\001\002\000\004\076\uff08" +
    "\001\002\000\004\127\u01e0\001\002\000\022\004\107\005" +
    "\074\006\075\026\103\063\104\072\110\076\105\102\132" +
    "\001\002\000\006\073\113\103\u01e2\001\002\000\004\104" +
    "\u01e3\001\002\000\034\003\056\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\131\035\001\002\000\034\022\063\024\053" +
    "\025\054\044\041\046\066\053\036\056\060\057\064\074" +
    "\051\075\065\076\045\105\u01e5\131\035\001\002\000\040" +
    "\022\uff2f\024\uff2f\025\uff2f\044\uff2f\046\uff2f\053\uff2f\054" +
    "\uff2f\056\uff2f\057\uff2f\064\uff2f\074\uff2f\075\uff2f\076\uff2f" +
    "\105\uff2f\131\uff2f\001\002\000\004\074\u023e\001\002\000" +
    "\004\127\u0235\001\002\000\004\004\u022b\001\002\000\006" +
    "\004\u01f2\111\u01f3\001\002\000\006\003\u01ec\104\u01eb\001" +
    "\002\000\034\003\056\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\131\035\001\002\000\004\104\u01ed\001\002\000\034" +
    "\003\056\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\131\035" +
    "\001\002\000\034\022\063\024\053\025\054\044\041\046" +
    "\066\053\036\056\060\057\064\074\051\075\065\076\045" +
    "\105\u01ef\131\035\001\002\000\040\022\uff23\024\uff23\025" +
    "\uff23\044\uff23\046\uff23\053\uff23\054\uff23\056\uff23\057\uff23" +
    "\064\uff23\074\uff23\075\uff23\076\uff23\105\uff23\131\uff23\001" +
    "\002\000\034\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\105" +
    "\u01f1\131\035\001\002\000\040\022\uff24\024\uff24\025\uff24" +
    "\044\uff24\046\uff24\053\uff24\054\uff24\056\uff24\057\uff24\064" +
    "\uff24\074\uff24\075\uff24\076\uff24\105\uff24\131\uff24\001\002" +
    "\000\004\127\u0222\001\002\000\006\004\u01f5\127\u01f4\001" +
    "\002\000\006\074\u01de\075\u01dc\001\002\000\004\127\u01f6" +
    "\001\002\000\010\003\u01f8\074\u01de\075\u01dc\001\002\000" +
    "\004\076\u01ff\001\002\000\004\127\u01f9\001\002\000\022" +
    "\004\107\005\074\006\075\026\103\063\104\072\110\076" +
    "\105\102\132\001\002\000\006\073\113\103\u01fb\001\002" +
    "\000\004\104\u01fc\001\002\000\034\003\056\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\u01fe\131\035\001" +
    "\002\000\040\022\uff26\024\uff26\025\uff26\044\uff26\046\uff26" +
    "\053\uff26\054\uff26\056\uff26\057\uff26\064\uff26\074\uff26\075" +
    "\uff26\076\uff26\105\uff26\131\uff26\001\002\000\024\004\107" +
    "\005\074\006\075\026\103\063\104\072\110\076\105\102" +
    "\132\127\u0200\001\002\000\026\003\u0207\004\107\005\074" +
    "\006\075\026\103\063\104\072\110\076\105\102\132\103" +
    "\u0206\001\002\000\006\073\113\103\u0202\001\002\000\004" +
    "\104\u0203\001\002\000\034\003\056\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\131\035\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\105\u0205\131\035\001\002\000" +
    "\040\022\uff2a\024\uff2a\025\uff2a\044\uff2a\046\uff2a\053\uff2a" +
    "\054\uff2a\056\uff2a\057\uff2a\064\uff2a\074\uff2a\075\uff2a\076" +
    "\uff2a\105\uff2a\131\uff2a\001\002\000\004\104\u0217\001\002" +
    "\000\004\103\u0213\001\002\000\010\073\113\103\u020a\104" +
    "\u0209\001\002\000\034\003\056\022\063\024\053\025\054" +
    "\044\041\046\066\053\036\056\060\057\064\074\051\075" +
    "\065\076\045\131\035\001\002\000\036\003\056\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\104\u020c\131\035\001\002" +
    "\000\034\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\105\u0210" +
    "\131\035\001\002\000\036\003\056\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\105\u020e\131\035\001\002\000\034\022" +
    "\063\024\053\025\054\044\041\046\066\053\036\056\060" +
    "\057\064\074\051\075\065\076\045\105\u020f\131\035\001" +
    "\002\000\040\022\uff21\024\uff21\025\uff21\044\uff21\046\uff21" +
    "\053\uff21\054\uff21\056\uff21\057\uff21\064\uff21\074\uff21\075" +
    "\uff21\076\uff21\105\uff21\131\uff21\001\002\000\040\022\uff30" +
    "\024\uff30\025\uff30\044\uff30\046\uff30\053\uff30\054\uff30\056" +
    "\uff30\057\uff30\064\uff30\074\uff30\075\uff30\076\uff30\105\uff30" +
    "\131\uff30\001\002\000\040\022\uff22\024\uff22\025\uff22\044" +
    "\uff22\046\uff22\053\uff22\054\uff22\056\uff22\057\uff22\064\uff22" +
    "\074\uff22\075\uff22\076\uff22\105\uff22\131\uff22\001\002\000" +
    "\034\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\074\051\075\065\076\045\105\u0212\131" +
    "\035\001\002\000\040\022\uff28\024\uff28\025\uff28\044\uff28" +
    "\046\uff28\053\uff28\054\uff28\056\uff28\057\uff28\064\uff28\074" +
    "\uff28\075\uff28\076\uff28\105\uff28\131\uff28\001\002\000\004" +
    "\104\u0214\001\002\000\034\003\056\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\131\035\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\105\u0216\131\035\001\002\000" +
    "\040\022\uff25\024\uff25\025\uff25\044\uff25\046\uff25\053\uff25" +
    "\054\uff25\056\uff25\057\uff25\064\uff25\074\uff25\075\uff25\076" +
    "\uff25\105\uff25\131\uff25\001\002\000\034\003\056\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\131\035\001\002\000\034" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\105\u0219\131\035" +
    "\001\002\000\040\022\uff29\024\uff29\025\uff29\044\uff29\046" +
    "\uff29\053\uff29\054\uff29\056\uff29\057\uff29\064\uff29\074\uff29" +
    "\075\uff29\076\uff29\105\uff29\131\uff29\001\002\000\004\076" +
    "\u021b\001\002\000\004\127\u021c\001\002\000\022\004\107" +
    "\005\074\006\075\026\103\063\104\072\110\076\105\102" +
    "\132\001\002\000\006\073\113\103\u021e\001\002\000\004" +
    "\104\u021f\001\002\000\034\003\056\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\074\051" +
    "\075\065\076\045\131\035\001\002\000\034\022\063\024" +
    "\053\025\054\044\041\046\066\053\036\056\060\057\064" +
    "\074\051\075\065\076\045\105\u0221\131\035\001\002\000" +
    "\040\022\uff2c\024\uff2c\025\uff2c\044\uff2c\046\uff2c\053\uff2c" +
    "\054\uff2c\056\uff2c\057\uff2c\064\uff2c\074\uff2c\075\uff2c\076" +
    "\uff2c\105\uff2c\131\uff2c\001\002\000\006\074\u01de\075\u01dc" +
    "\001\002\000\004\076\u0224\001\002\000\004\127\u0225\001" +
    "\002\000\022\004\107\005\074\006\075\026\103\063\104" +
    "\072\110\076\105\102\132\001\002\000\006\073\113\103" +
    "\u0227\001\002\000\004\104\u0228\001\002\000\034\003\056" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\131\035\001\002" +
    "\000\034\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\105\u022a" +
    "\131\035\001\002\000\040\022\uff2d\024\uff2d\025\uff2d\044" +
    "\uff2d\046\uff2d\053\uff2d\054\uff2d\056\uff2d\057\uff2d\064\uff2d" +
    "\074\uff2d\075\uff2d\076\uff2d\105\uff2d\131\uff2d\001\002\000" +
    "\004\127\u022c\001\002\000\006\074\u01de\075\u01dc\001\002" +
    "\000\004\076\u022e\001\002\000\004\127\u022f\001\002\000" +
    "\022\004\107\005\074\006\075\026\103\063\104\072\110" +
    "\076\105\102\132\001\002\000\006\073\113\103\u0231\001" +
    "\002\000\004\104\u0232\001\002\000\034\003\056\022\063" +
    "\024\053\025\054\044\041\046\066\053\036\056\060\057" +
    "\064\074\051\075\065\076\045\131\035\001\002\000\034" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\105\u0234\131\035" +
    "\001\002\000\040\022\uff2e\024\uff2e\025\uff2e\044\uff2e\046" +
    "\uff2e\053\uff2e\054\uff2e\056\uff2e\057\uff2e\064\uff2e\074\uff2e" +
    "\075\uff2e\076\uff2e\105\uff2e\131\uff2e\001\002\000\006\074" +
    "\u01de\075\u01dc\001\002\000\004\076\u0237\001\002\000\004" +
    "\127\u0238\001\002\000\022\004\107\005\074\006\075\026" +
    "\103\063\104\072\110\076\105\102\132\001\002\000\006" +
    "\073\113\103\u023a\001\002\000\004\104\u023b\001\002\000" +
    "\034\003\056\022\063\024\053\025\054\044\041\046\066" +
    "\053\036\056\060\057\064\074\051\075\065\076\045\131" +
    "\035\001\002\000\034\022\063\024\053\025\054\044\041" +
    "\046\066\053\036\056\060\057\064\074\051\075\065\076" +
    "\045\105\u023d\131\035\001\002\000\040\022\uff27\024\uff27" +
    "\025\uff27\044\uff27\046\uff27\053\uff27\054\uff27\056\uff27\057" +
    "\uff27\064\uff27\074\uff27\075\uff27\076\uff27\105\uff27\131\uff27" +
    "\001\002\000\004\076\u023f\001\002\000\004\127\u0240\001" +
    "\002\000\022\004\107\005\074\006\075\026\103\063\104" +
    "\072\110\076\105\102\132\001\002\000\006\073\113\103" +
    "\u0242\001\002\000\004\104\u0243\001\002\000\034\003\056" +
    "\022\063\024\053\025\054\044\041\046\066\053\036\056" +
    "\060\057\064\074\051\075\065\076\045\131\035\001\002" +
    "\000\034\022\063\024\053\025\054\044\041\046\066\053" +
    "\036\056\060\057\064\074\051\075\065\076\045\105\u0245" +
    "\131\035\001\002\000\040\022\uff2b\024\uff2b\025\uff2b\044" +
    "\uff2b\046\uff2b\053\uff2b\054\uff2b\056\uff2b\057\uff2b\064\uff2b" +
    "\074\uff2b\075\uff2b\076\uff2b\105\uff2b\131\uff2b\001\002\000" +
    "\034\022\063\024\053\025\054\044\041\046\066\053\036" +
    "\056\060\057\064\064\u0249\074\051\075\065\076\045\131" +
    "\035\001\002\000\004\027\uffe6\001\002\000\006\002\ufffc" +
    "\027\uffe5\001\002\000\004\027\uffe8\001\002\000\004\002" +
    "\000\001\002\000\004\027\uffe5\001\002\000\046\003\056" +
    "\022\063\024\053\025\054\027\u024b\030\u0250\044\041\046" +
    "\066\053\036\056\060\057\064\064\u0271\074\051\075\065" +
    "\076\045\100\u0148\105\u014a\131\035\001\002\000\012\003" +
    "\u026c\013\022\030\u026a\076\u026e\001\002\000\004\027\u0268" +
    "\001\002\000\054\003\056\004\u019e\005\150\006\264\022" +
    "\063\024\053\025\054\026\266\044\041\046\066\053\036" +
    "\056\060\057\064\063\265\074\051\075\065\076\u0251\102" +
    "\u019b\111\263\126\262\131\035\001\002\000\012\003\uffde" +
    "\013\uffde\030\uffde\076\uffde\001\002\000\072\004\u019e\005" +
    "\150\006\264\012\u0252\022\uffb9\024\uffb9\025\uffb9\026\266" +
    "\044\uffb9\046\uffb9\053\uffb9\056\uffb9\057\uffb9\062\uff0c\063" +
    "\265\064\uffb9\074\uffb9\075\uffb9\076\uffb9\100\uffb9\102\u019b" +
    "\111\263\112\uffb9\113\uffb9\114\uffb9\115\uffb9\126\262\131" +
    "\uffb9\001\002\000\024\003\u025b\015\u0259\042\u025c\043\u0258" +
    "\047\u0254\065\u0256\066\u025a\067\u0257\070\u0253\001\002\000" +
    "\022\003\uff04\004\uff04\005\uff04\006\uff04\026\uff04\063\uff04" +
    "\100\uff04\111\uff04\001\002\000\022\003\uff01\004\uff01\005" +
    "\uff01\006\uff01\026\uff01\063\uff01\100\uff01\111\uff01\001\002" +
    "\000\006\100\u025d\111\u025e\001\002\000\022\003\uff05\004" +
    "\uff05\005\uff05\006\uff05\026\uff05\063\uff05\100\uff05\111\uff05" +
    "\001\002\000\022\003\uff03\004\uff03\005\uff03\006\uff03\026" +
    "\uff03\063\uff03\100\uff03\111\uff03\001\002\000\022\003\ufeff" +
    "\004\ufeff\005\ufeff\006\ufeff\026\ufeff\063\ufeff\100\ufeff\111" +
    "\ufeff\001\002\000\022\003\uff02\004\uff02\005\uff02\006\uff02" +
    "\026\uff02\063\uff02\100\uff02\111\uff02\001\002\000\022\003" +
    "\uff06\004\uff06\005\uff06\006\uff06\026\uff06\063\uff06\100\uff06" +
    "\111\uff06\001\002\000\022\003\ufefe\004\ufefe\005\ufefe\006" +
    "\ufefe\026\ufefe\063\ufefe\100\ufefe\111\ufefe\001\002\000\022" +
    "\003\uff00\004\uff00\005\uff00\006\uff00\026\uff00\063\uff00\100" +
    "\uff00\111\uff00\001\002\000\012\003\uffda\013\uffda\030\uffda" +
    "\076\uffda\001\002\000\016\003\u0261\004\u025f\005\u0266\006" +
    "\u0263\026\u0265\063\u0260\001\002\000\014\003\ufefd\013\ufefd" +
    "\030\ufefd\076\ufefd\100\ufefd\001\002\000\014\003\ufef8\013" +
    "\ufef8\030\ufef8\076\ufef8\100\ufef8\001\002\000\014\003\ufef9" +
    "\013\ufef9\030\ufef9\076\ufef9\100\ufef9\001\002\000\004\100" +
    "\u0267\001\002\000\014\003\ufefb\013\ufefb\030\ufefb\076\ufefb" +
    "\100\ufefb\001\002\000\014\003\ufefa\013\ufefa\030\ufefa\076" +
    "\ufefa\100\ufefa\001\002\000\014\003\ufef7\013\ufef7\030\ufef7" +
    "\076\ufef7\100\ufef7\001\002\000\014\003\ufefc\013\ufefc\030" +
    "\ufefc\076\ufefc\100\ufefc\001\002\000\012\003\uffd1\013\uffd1" +
    "\030\uffd1\076\uffd1\001\002\000\004\002\ufffe\001\002\000" +
    "\012\003\uffe0\013\uffe0\030\uffe0\076\uffe0\001\002\000\010" +
    "\003\uffeb\010\uffeb\076\uffeb\001\002\000\012\003\uffe4\013" +
    "\uffe4\030\uffe4\076\uffe4\001\002\000\004\100\u0270\001\002" +
    "\000\012\003\uffe2\013\uffe2\030\uffe2\076\uffe2\001\002\000" +
    "\004\076\u026f\001\002\000\004\012\u0252\001\002\000\012" +
    "\003\uffdd\013\uffdd\030\uffdd\076\uffdd\001\002\000\036\022" +
    "\uff6d\024\uff6d\025\uff6d\027\uffe6\044\uff6d\046\uff6d\053\uff6d" +
    "\056\uff6d\057\uff6d\064\uff6d\074\uff6d\075\uff6d\076\uff6d\131" +
    "\uff6d\001\002\000\026\004\u019e\005\150\006\264\012\u0252" +
    "\026\266\063\265\076\u019d\102\u019b\111\263\126\262\001" +
    "\002\000\004\002\ufffd\001\002\000\010\003\uffec\010\uffec" +
    "\076\uffec\001\002\000\026\003\u025b\015\u0259\042\u025c\043" +
    "\u0258\047\u0254\065\u0256\066\u025a\067\u0257\070\u0253\140\u0295" +
    "\001\002\000\030\003\u025b\012\u0278\015\u0259\042\u025c\043" +
    "\u0258\047\u0254\065\u0256\066\u025a\067\u0257\070\u0253\076\u0279" +
    "\001\002\000\006\100\u0290\111\u0291\001\002\000\032\003" +
    "\u025b\015\u0259\042\u025c\043\u0258\047\u0254\065\u0256\066\u025a" +
    "\067\u0257\070\u0253\100\u0282\111\u027f\140\u0280\001\002\000" +
    "\024\003\u025b\015\u0259\042\u025c\043\u0258\047\u0254\065\u0256" +
    "\066\u025a\067\u0257\070\u0253\001\002\000\006\100\u027b\111" +
    "\u027c\001\002\000\012\003\uffd9\013\uffd9\030\uffd9\076\uffd9" +
    "\001\002\000\016\003\u0261\004\u025f\005\u0266\006\u0263\026" +
    "\u0265\063\u0260\001\002\000\004\100\u027e\001\002\000\012" +
    "\003\uffd2\013\uffd2\030\uffd2\076\uffd2\001\002\000\016\003" +
    "\u0261\004\u025f\005\u0266\006\u0263\026\u0265\063\u0260\001\002" +
    "\000\004\106\u028a\001\002\000\022\003\u0286\004\u025f\005" +
    "\u0266\006\u0263\026\u0265\063\u0260\100\u0285\111\u0284\001\002" +
    "\000\012\003\uffd7\013\uffd7\030\uffd7\076\uffd7\001\002\000" +
    "\004\100\u0289\001\002\000\016\003\u0261\004\u025f\005\u0266" +
    "\006\u0263\026\u0265\063\u0260\001\002\000\012\003\uffdc\013" +
    "\uffdc\030\uffdc\076\uffdc\001\002\000\014\003\uffdb\013\uffdb" +
    "\030\uffdb\076\uffdb\100\ufef9\001\002\000\014\003\uffd3\013" +
    "\uffd3\030\uffd3\076\uffd3\100\u0288\001\002\000\012\003\uffd4" +
    "\013\uffd4\030\uffd4\076\uffd4\001\002\000\012\003\uffcd\013" +
    "\uffcd\030\uffcd\076\uffcd\001\002\000\004\004\u028b\001\002" +
    "\000\004\107\u028c\001\002\000\004\100\u028d\001\002\000" +
    "\012\003\uffd6\013\uffd6\030\uffd6\076\uffd6\001\002\000\004" +
    "\100\u028f\001\002\000\012\003\uffce\013\uffce\030\uffce\076" +
    "\uffce\001\002\000\012\003\uffd8\013\uffd8\030\uffd8\076\uffd8" +
    "\001\002\000\016\003\u0261\004\u025f\005\u0266\006\u0263\026" +
    "\u0265\063\u0260\001\002\000\004\100\u0293\001\002\000\012" +
    "\003\uffcf\013\uffcf\030\uffcf\076\uffcf\001\002\000\004\111" +
    "\u02a2\001\002\000\004\106\u0296\001\002\000\004\013\u0297" +
    "\001\002\000\004\076\u0298\001\002\000\004\012\u0299\001" +
    "\002\000\004\141\u029a\001\002\000\004\106\u029b\001\002" +
    "\000\004\004\u029c\001\002\000\004\107\u029d\001\002\000" +
    "\004\106\u029e\001\002\000\004\004\u029f\001\002\000\004" +
    "\107\u02a0\001\002\000\004\100\u02a1\001\002\000\012\003" +
    "\uffd5\013\uffd5\030\uffd5\076\uffd5\001\002\000\016\003\u0261" +
    "\004\u025f\005\u0266\006\u0263\026\u0265\063\u0260\001\002\000" +
    "\004\100\u02a4\001\002\000\012\003\uffd0\013\uffd0\030\uffd0" +
    "\076\uffd0\001\002\000\012\003\u026c\013\022\030\u02a8\076" +
    "\u02a9\001\002\000\010\003\uffef\010\uffef\076\uffef\001\002" +
    "\000\012\003\uffee\010\uffee\030\u0250\076\uffee\001\002\000" +
    "\010\003\ufff0\010\ufff0\076\ufff0\001\002\000\010\003\uffed" +
    "\010\uffed\076\uffed\001\002\000\034\022\063\024\053\025" +
    "\054\044\041\046\066\053\036\056\060\057\064\064\u02ac" +
    "\074\051\075\065\076\045\131\035\001\002\000\004\027" +
    "\uffea\001\002\000\004\027\uffe9\001\002\000\004\006\u02b5" +
    "\001\002\000\020\003\ufff3\006\u02b0\010\ufff3\013\ufff3\037" +
    "\ufff3\076\ufff3\124\u02af\001\002\000\006\006\u02b3\100\u02b2" +
    "\001\002\000\004\100\u02b1\001\002\000\014\003\ufff6\010" +
    "\ufff6\013\ufff6\037\ufff6\076\ufff6\001\002\000\014\003\ufff5" +
    "\010\ufff5\013\ufff5\037\ufff5\076\ufff5\001\002\000\016\003" +
    "\ufff4\010\ufff4\013\ufff4\037\ufff4\076\ufff4\100\u02b4\001\002" +
    "\000\014\003\ufff9\010\ufff9\013\ufff9\037\ufff9\076\ufff9\001" +
    "\002\000\004\100\u02b6\001\002\000\014\003\ufff7\010\ufff7" +
    "\013\ufff7\037\ufff7\076\ufff7\001\002\000\004\002\ufffb\001" +
    "\002\000\004\076\u02bf\001\002\000\020\002\ufffa\003\u02b9" +
    "\013\022\030\u0250\036\005\037\021\076\u02b8\001\002\000" +
    "\010\003\u02bc\010\017\076\033\001\002\000\004\027\u02bd" +
    "\001\002\000\040\003\056\022\063\024\053\025\054\027" +
    "\u024b\044\041\046\066\053\036\056\060\057\064\064\u0247" +
    "\074\051\075\065\076\045\131\035\001\002\000\004\002" +
    "\uffff\001\002\000\012\003\u026c\013\022\030\u026a\076\u0274" +
    "\001\002\000\006\012\u0252\124\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02bd\000\006\002\007\056\005\001\001\000\020\002" +
    "\u02b6\003\u02b9\005\022\007\017\010\015\056\005\060\026" +
    "\001\001\000\002\001\001\000\016\003\027\004\023\005" +
    "\022\007\017\010\015\060\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\047\030\046\031\060\035\u02a9\036" +
    "\033\040\045\042\041\043\042\044\051\045\061\051\056" +
    "\052\043\057\036\061\054\001\001\000\002\001\001\000" +
    "\012\005\u02a4\007\017\010\015\060\026\001\001\000\002" +
    "\001\001\000\010\007\u026a\010\u026c\060\u0268\001\001\000" +
    "\002\001\001\000\036\012\047\030\046\031\060\035\037" +
    "\036\033\040\045\042\041\043\042\044\051\045\061\051" +
    "\056\052\043\057\036\061\054\001\001\000\050\004\u024d" +
    "\005\u024c\007\017\010\015\012\047\030\046\031\060\035" +
    "\u0245\036\033\040\045\042\041\043\042\044\051\045\061" +
    "\051\056\052\043\057\036\060\026\061\054\001\001\000" +
    "\002\001\001\000\004\004\030\001\001\000\002\001\001" +
    "\000\036\012\047\030\046\031\060\035\u0245\036\033\040" +
    "\045\042\041\043\042\044\051\045\061\051\056\052\043" +
    "\057\036\061\054\001\001\000\036\012\047\030\046\031" +
    "\060\035\037\036\033\040\045\042\041\043\042\044\051" +
    "\045\061\051\056\052\043\057\036\061\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u01c1\001\001" +
    "\000\002\001\001\000\034\012\123\030\122\031\060\036" +
    "\116\040\121\042\117\043\120\044\124\045\125\051\056" +
    "\052\043\057\036\061\054\001\001\000\020\013\110\014" +
    "\105\015\101\016\u01a9\017\100\020\077\021\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\266\014\105\015\101\026\u019b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\110\014\105\015\101" +
    "\016\u017b\017\100\020\077\021\076\001\001\000\020\013" +
    "\110\014\105\015\101\016\u014b\017\100\020\077\021\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\250\001\001\000\020\013\110\014\105\015" +
    "\101\016\111\017\100\020\077\021\076\001\001\000\002" +
    "\001\001\000\004\054\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\243\001\001\000\004\022\241\001" +
    "\001\000\020\013\153\014\105\015\101\016\203\017\100" +
    "\020\077\021\076\001\001\000\002\001\001\000\006\022" +
    "\135\041\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\110\014" +
    "\105\015\101\017\132\020\077\021\076\001\001\000\002" +
    "\001\001\000\036\012\047\030\046\031\060\035\115\036" +
    "\033\040\045\042\041\043\042\044\051\045\061\051\056" +
    "\052\043\057\036\061\054\001\001\000\034\012\123\030" +
    "\122\031\060\036\116\040\121\042\117\043\120\044\124" +
    "\045\125\051\056\052\043\057\036\061\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\153\014\105\015\101\016" +
    "\154\017\100\020\077\021\076\001\001\000\002\001\001" +
    "\000\014\013\110\014\105\015\101\020\134\021\076\001" +
    "\001\000\006\022\135\041\141\001\001\000\012\013\110" +
    "\014\105\015\101\021\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\110\014\105" +
    "\015\101\021\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\171\015\101\001\001\000\006\014" +
    "\162\015\101\001\001\000\002\001\001\000\010\013\170" +
    "\014\105\015\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\167\001\001\000\004\015\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\110\014\105\015\101\016\173" +
    "\017\100\020\077\021\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\110\014\105\015\101\020\176" +
    "\021\076\001\001\000\006\022\135\041\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\047\030\046\031" +
    "\060\035\224\036\033\040\045\042\041\043\042\044\051" +
    "\045\061\051\056\052\043\057\036\061\054\001\001\000" +
    "\036\012\047\030\046\031\060\035\206\036\033\040\045" +
    "\042\041\043\042\044\051\045\061\051\056\052\043\057" +
    "\036\061\054\001\001\000\034\012\123\030\122\031\060" +
    "\036\116\040\121\042\117\043\120\044\124\045\125\051" +
    "\056\052\043\057\036\061\054\001\001\000\036\012\047" +
    "\030\046\031\060\035\210\036\033\040\045\042\041\043" +
    "\042\044\051\045\061\051\056\052\043\057\036\061\054" +
    "\001\001\000\034\012\123\030\122\031\060\036\116\040" +
    "\121\042\117\043\120\044\124\045\125\051\056\052\043" +
    "\057\036\061\054\001\001\000\002\001\001\000\036\012" +
    "\047\030\046\031\060\035\221\036\033\040\045\042\041" +
    "\043\042\044\051\045\061\051\056\052\043\057\036\061" +
    "\054\001\001\000\036\012\047\030\046\031\060\035\214" +
    "\036\033\040\045\042\041\043\042\044\051\045\061\051" +
    "\056\052\043\057\036\061\054\001\001\000\034\012\123" +
    "\030\122\031\060\036\116\040\121\042\117\043\120\044" +
    "\124\045\125\051\056\052\043\057\036\061\054\001\001" +
    "\000\036\012\047\030\046\031\060\035\216\036\033\040" +
    "\045\042\041\043\042\044\051\045\061\051\056\052\043" +
    "\057\036\061\054\001\001\000\034\012\123\030\122\031" +
    "\060\036\116\040\121\042\117\043\120\044\124\045\125" +
    "\051\056\052\043\057\036\061\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\012\123\030\122\031\060" +
    "\036\116\040\121\042\117\043\120\044\124\045\125\051" +
    "\056\052\043\057\036\061\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\012\123\030\122\031\060\036" +
    "\116\040\121\042\117\043\120\044\124\045\125\051\056" +
    "\052\043\057\036\061\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\012\047\030\046\031\060\035\230" +
    "\036\033\040\045\042\041\043\042\044\051\045\061\051" +
    "\056\052\043\057\036\061\054\001\001\000\034\012\123" +
    "\030\122\031\060\036\116\040\121\042\117\043\120\044" +
    "\124\045\125\051\056\052\043\057\036\061\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\047\030" +
    "\046\031\060\035\234\036\033\040\045\042\041\043\042" +
    "\044\051\045\061\051\056\052\043\057\036\061\054\001" +
    "\001\000\034\012\123\030\122\031\060\036\116\040\121" +
    "\042\117\043\120\044\124\045\125\051\056\052\043\057" +
    "\036\061\054\001\001\000\002\001\001\000\036\012\047" +
    "\030\046\031\060\035\237\036\033\040\045\042\041\043" +
    "\042\044\051\045\061\051\056\052\043\057\036\061\054" +
    "\001\001\000\034\012\123\030\122\031\060\036\116\040" +
    "\121\042\117\043\120\044\124\045\125\051\056\052\043" +
    "\057\036\061\054\001\001\000\002\001\001\000\014\013" +
    "\110\014\105\015\101\020\242\021\076\001\001\000\006" +
    "\022\135\041\141\001\001\000\014\013\110\014\105\015" +
    "\101\020\244\021\076\001\001\000\006\022\135\041\141" +
    "\001\001\000\002\001\001\000\004\026\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\254\027\256\030\255\031\060\061\054\001\001\000" +
    "\010\013\266\014\105\015\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\273\014\105" +
    "\015\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\254\027\372\030\255\031\060\061\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\254\027\364\030\255\031\060\061" +
    "\054\001\001\000\014\012\254\027\360\030\255\031\060" +
    "\061\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\047\030\046\031\060\035\u010c\036\033\040\045\042\041" +
    "\043\042\044\051\045\061\051\056\052\043\057\036\061" +
    "\054\001\001\000\034\012\123\030\122\031\060\036\116" +
    "\040\121\042\117\043\120\044\124\045\125\051\056\052" +
    "\043\057\036\061\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\047\030\046\031\060\035\u0110\036" +
    "\033\040\045\042\041\043\042\044\051\045\061\051\056" +
    "\052\043\057\036\061\054\001\001\000\034\012\123\030" +
    "\122\031\060\036\116\040\121\042\117\043\120\044\124" +
    "\045\125\051\056\052\043\057\036\061\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\047\030\046" +
    "\031\060\035\u0114\036\033\040\045\042\041\043\042\044" +
    "\051\045\061\051\056\052\043\057\036\061\054\001\001" +
    "\000\034\012\123\030\122\031\060\036\116\040\121\042" +
    "\117\043\120\044\124\045\125\051\056\052\043\057\036" +
    "\061\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\047\030\046\031\060\035\u0118\036\033\040\045" +
    "\042\041\043\042\044\051\045\061\051\056\052\043\057" +
    "\036\061\054\001\001\000\034\012\123\030\122\031\060" +
    "\036\116\040\121\042\117\043\120\044\124\045\125\051" +
    "\056\052\043\057\036\061\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\047\030\046" +
    "\031\060\035\u0120\036\033\040\045\042\041\043\042\044" +
    "\051\045\061\051\056\052\043\057\036\061\054\001\001" +
    "\000\034\012\123\030\122\031\060\036\116\040\121\042" +
    "\117\043\120\044\124\045\125\051\056\052\043\057\036" +
    "\061\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\047\030\046\031\060\035\u0124\036\033\040\045" +
    "\042\041\043\042\044\051\045\061\051\056\052\043\057" +
    "\036\061\054\001\001\000\034\012\123\030\122\031\060" +
    "\036\116\040\121\042\117\043\120\044\124\045\125\051" +
    "\056\052\043\057\036\061\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\047\030\046\031\060\035" +
    "\u0128\036\033\040\045\042\041\043\042\044\051\045\061" +
    "\051\056\052\043\057\036\061\054\001\001\000\034\012" +
    "\123\030\122\031\060\036\116\040\121\042\117\043\120" +
    "\044\124\045\125\051\056\052\043\057\036\061\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\047" +
    "\030\046\031\060\035\u012c\036\033\040\045\042\041\043" +
    "\042\044\051\045\061\051\056\052\043\057\036\061\054" +
    "\001\001\000\034\012\123\030\122\031\060\036\116\040" +
    "\121\042\117\043\120\044\124\045\125\051\056\052\043" +
    "\057\036\061\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u013a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\u013e\001\001\000\004" +
    "\055\u0140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\u0145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\153\014\105\015\101\016\u0154\017" +
    "\100\020\077\021\076\001\001\000\002\001\001\000\014" +
    "\012\254\027\u014d\030\255\031\060\061\054\001\001\000" +
    "\002\001\001\000\014\012\254\027\u014f\030\255\031\060" +
    "\061\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\254\027\u0175\030\255\031\060" +
    "\061\054\001\001\000\002\001\001\000\014\012\254\027" +
    "\u0156\030\255\031\060\061\054\001\001\000\014\012\254" +
    "\027\u015d\030\255\031\060\061\054\001\001\000\002\001" +
    "\001\000\014\012\254\027\u0158\030\255\031\060\061\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\254\027\u016d\030\255\031\060\061\054" +
    "\001\001\000\002\001\001\000\014\012\254\027\u015f\030" +
    "\255\031\060\061\054\001\001\000\014\012\254\027\u0164" +
    "\030\255\031\060\061\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\254\027\u016b\030\255\031\060\061\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\254\027" +
    "\u0171\030\255\031\060\061\054\001\001\000\002\001\001" +
    "\000\014\012\254\027\u0173\030\255\031\060\061\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\254\027\u0177\030\255\031\060\061\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\153\014\105\015\101\016\u0182\017\100\020" +
    "\077\021\076\001\001\000\002\001\001\000\014\012\254" +
    "\027\u017d\030\255\031\060\061\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\254" +
    "\027\u0194\030\255\031\060\061\054\001\001\000\002\001" +
    "\001\000\014\012\254\027\u0184\030\255\031\060\061\054" +
    "\001\001\000\014\012\254\027\u0189\030\255\031\060\061" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\254\027\u0191\030\255\031\060\061\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\153\014\105\015\101\016\u01a2\017\100\020\077\021\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\047\030\046\031\060" +
    "\035\u01a0\036\033\040\045\042\041\043\042\044\051\045" +
    "\061\051\056\052\043\057\036\061\054\001\001\000\034" +
    "\012\123\030\122\031\060\036\116\040\121\042\117\043" +
    "\120\044\124\045\125\051\056\052\043\057\036\061\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\254\027\u01a4\030\255\031\060\061\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\153\014\105\015\101\016\u01b0\017\100\020\077\021\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\012\047\030\046\031\060\035\u01ac\036\033" +
    "\040\045\042\041\043\042\044\051\045\061\051\056\052" +
    "\043\057\036\061\054\001\001\000\034\012\123\030\122" +
    "\031\060\036\116\040\121\042\117\043\120\044\124\045" +
    "\125\051\056\052\043\057\036\061\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\012\047\030\046\031\060\035\u01b9\036\033" +
    "\040\045\042\041\043\042\044\051\045\061\051\056\052" +
    "\043\057\036\061\054\001\001\000\036\012\047\030\046" +
    "\031\060\035\u01b3\036\033\040\045\042\041\043\042\044" +
    "\051\045\061\051\056\052\043\057\036\061\054\001\001" +
    "\000\034\012\123\030\122\031\060\036\116\040\121\042" +
    "\117\043\120\044\124\045\125\051\056\052\043\057\036" +
    "\061\054\001\001\000\036\012\047\030\046\031\060\035" +
    "\u01b5\036\033\040\045\042\041\043\042\044\051\045\061" +
    "\051\056\052\043\057\036\061\054\001\001\000\034\012" +
    "\123\030\122\031\060\036\116\040\121\042\117\043\120" +
    "\044\124\045\125\051\056\052\043\057\036\061\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\012\123\030\122\031\060\036\116\040\121\042" +
    "\117\043\120\044\124\045\125\051\056\052\043\057\036" +
    "\061\054\001\001\000\002\001\001\000\036\012\047\030" +
    "\046\031\060\035\u01bc\036\033\040\045\042\041\043\042" +
    "\044\051\045\061\051\056\052\043\057\036\061\054\001" +
    "\001\000\034\012\123\030\122\031\060\036\116\040\121" +
    "\042\117\043\120\044\124\045\125\051\056\052\043\057" +
    "\036\061\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\047\030\046\031\060\035\u01ce\036\033\040\045" +
    "\042\041\043\042\044\051\045\061\051\056\052\043\057" +
    "\036\061\054\001\001\000\036\012\047\030\046\031\060" +
    "\035\u01c8\036\033\040\045\042\041\043\042\044\051\045" +
    "\061\051\056\052\043\057\036\061\054\001\001\000\002" +
    "\001\001\000\036\012\047\030\046\031\060\035\u01c6\036" +
    "\033\040\045\042\041\043\042\044\051\045\061\051\056" +
    "\052\043\057\036\061\054\001\001\000\034\012\123\030" +
    "\122\031\060\036\116\040\121\042\117\043\120\044\124" +
    "\045\125\051\056\052\043\057\036\061\054\001\001\000" +
    "\002\001\001\000\034\012\123\030\122\031\060\036\116" +
    "\040\121\042\117\043\120\044\124\045\125\051\056\052" +
    "\043\057\036\061\054\001\001\000\036\012\047\030\046" +
    "\031\060\035\u01ca\036\033\040\045\042\041\043\042\044" +
    "\051\045\061\051\056\052\043\057\036\061\054\001\001" +
    "\000\034\012\123\030\122\031\060\036\116\040\121\042" +
    "\117\043\120\044\124\045\125\051\056\052\043\057\036" +
    "\061\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\012\123\030\122\031\060\036\116" +
    "\040\121\042\117\043\120\044\124\045\125\051\056\052" +
    "\043\057\036\061\054\001\001\000\002\001\001\000\036" +
    "\012\047\030\046\031\060\035\u01d1\036\033\040\045\042" +
    "\041\043\042\044\051\045\061\051\056\052\043\057\036" +
    "\061\054\001\001\000\034\012\123\030\122\031\060\036" +
    "\116\040\121\042\117\043\120\044\124\045\125\051\056" +
    "\052\043\057\036\061\054\001\001\000\002\001\001\000" +
    "\036\012\047\030\046\031\060\035\u01d4\036\033\040\045" +
    "\042\041\043\042\044\051\045\061\051\056\052\043\057" +
    "\036\061\054\001\001\000\034\012\123\030\122\031\060" +
    "\036\116\040\121\042\117\043\120\044\124\045\125\051" +
    "\056\052\043\057\036\061\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u01dc\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\110\014\105\015\101\016\u01e0\017\100\020\077" +
    "\021\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\047\030\046\031\060\035\u01e3\036\033\040\045" +
    "\042\041\043\042\044\051\045\061\051\056\052\043\057" +
    "\036\061\054\001\001\000\034\012\123\030\122\031\060" +
    "\036\116\040\121\042\117\043\120\044\124\045\125\051" +
    "\056\052\043\057\036\061\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\047\030\046" +
    "\031\060\035\u01ef\036\033\040\045\042\041\043\042\044" +
    "\051\045\061\051\056\052\043\057\036\061\054\001\001" +
    "\000\002\001\001\000\036\012\047\030\046\031\060\035" +
    "\u01ed\036\033\040\045\042\041\043\042\044\051\045\061" +
    "\051\056\052\043\057\036\061\054\001\001\000\034\012" +
    "\123\030\122\031\060\036\116\040\121\042\117\043\120" +
    "\044\124\045\125\051\056\052\043\057\036\061\054\001" +
    "\001\000\002\001\001\000\034\012\123\030\122\031\060" +
    "\036\116\040\121\042\117\043\120\044\124\045\125\051" +
    "\056\052\043\057\036\061\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0219\001" +
    "\001\000\002\001\001\000\004\053\u01f6\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\110\014\105\015" +
    "\101\016\u01f9\017\100\020\077\021\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\047\030\046\031" +
    "\060\035\u01fc\036\033\040\045\042\041\043\042\044\051" +
    "\045\061\051\056\052\043\057\036\061\054\001\001\000" +
    "\034\012\123\030\122\031\060\036\116\040\121\042\117" +
    "\043\120\044\124\045\125\051\056\052\043\057\036\061" +
    "\054\001\001\000\002\001\001\000\020\013\110\014\105" +
    "\015\101\016\u0200\017\100\020\077\021\076\001\001\000" +
    "\020\013\110\014\105\015\101\016\u0207\017\100\020\077" +
    "\021\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\047\030\046\031\060\035\u0203\036\033\040\045" +
    "\042\041\043\042\044\051\045\061\051\056\052\043\057" +
    "\036\061\054\001\001\000\034\012\123\030\122\031\060" +
    "\036\116\040\121\042\117\043\120\044\124\045\125\051" +
    "\056\052\043\057\036\061\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\047\030\046\031\060\035\u0210\036\033\040\045" +
    "\042\041\043\042\044\051\045\061\051\056\052\043\057" +
    "\036\061\054\001\001\000\036\012\047\030\046\031\060" +
    "\035\u020a\036\033\040\045\042\041\043\042\044\051\045" +
    "\061\051\056\052\043\057\036\061\054\001\001\000\034" +
    "\012\123\030\122\031\060\036\116\040\121\042\117\043" +
    "\120\044\124\045\125\051\056\052\043\057\036\061\054" +
    "\001\001\000\036\012\047\030\046\031\060\035\u020c\036" +
    "\033\040\045\042\041\043\042\044\051\045\061\051\056" +
    "\052\043\057\036\061\054\001\001\000\034\012\123\030" +
    "\122\031\060\036\116\040\121\042\117\043\120\044\124" +
    "\045\125\051\056\052\043\057\036\061\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\123\030\122\031\060\036\116\040\121\042\117\043" +
    "\120\044\124\045\125\051\056\052\043\057\036\061\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\047\030\046\031\060\035\u0214\036\033\040\045\042\041" +
    "\043\042\044\051\045\061\051\056\052\043\057\036\061" +
    "\054\001\001\000\034\012\123\030\122\031\060\036\116" +
    "\040\121\042\117\043\120\044\124\045\125\051\056\052" +
    "\043\057\036\061\054\001\001\000\002\001\001\000\036" +
    "\012\047\030\046\031\060\035\u0217\036\033\040\045\042" +
    "\041\043\042\044\051\045\061\051\056\052\043\057\036" +
    "\061\054\001\001\000\034\012\123\030\122\031\060\036" +
    "\116\040\121\042\117\043\120\044\124\045\125\051\056" +
    "\052\043\057\036\061\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\110\014\105" +
    "\015\101\016\u021c\017\100\020\077\021\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\047\030\046" +
    "\031\060\035\u021f\036\033\040\045\042\041\043\042\044" +
    "\051\045\061\051\056\052\043\057\036\061\054\001\001" +
    "\000\034\012\123\030\122\031\060\036\116\040\121\042" +
    "\117\043\120\044\124\045\125\051\056\052\043\057\036" +
    "\061\054\001\001\000\002\001\001\000\004\053\u0222\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\110" +
    "\014\105\015\101\016\u0225\017\100\020\077\021\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\047" +
    "\030\046\031\060\035\u0228\036\033\040\045\042\041\043" +
    "\042\044\051\045\061\051\056\052\043\057\036\061\054" +
    "\001\001\000\034\012\123\030\122\031\060\036\116\040" +
    "\121\042\117\043\120\044\124\045\125\051\056\052\043" +
    "\057\036\061\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u022c\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\110\014\105\015\101\016\u022f\017" +
    "\100\020\077\021\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\047\030\046\031\060\035\u0232\036" +
    "\033\040\045\042\041\043\042\044\051\045\061\051\056" +
    "\052\043\057\036\061\054\001\001\000\034\012\123\030" +
    "\122\031\060\036\116\040\121\042\117\043\120\044\124" +
    "\045\125\051\056\052\043\057\036\061\054\001\001\000" +
    "\002\001\001\000\004\053\u0235\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\110\014\105\015\101\016" +
    "\u0238\017\100\020\077\021\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\047\030\046\031\060\035" +
    "\u023b\036\033\040\045\042\041\043\042\044\051\045\061" +
    "\051\056\052\043\057\036\061\054\001\001\000\034\012" +
    "\123\030\122\031\060\036\116\040\121\042\117\043\120" +
    "\044\124\045\125\051\056\052\043\057\036\061\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\110\014\105\015\101\016\u0240\017\100\020" +
    "\077\021\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\047\030\046\031\060\035\u0243\036\033\040" +
    "\045\042\041\043\042\044\051\045\061\051\056\052\043" +
    "\057\036\061\054\001\001\000\034\012\123\030\122\031" +
    "\060\036\116\040\121\042\117\043\120\044\124\045\125" +
    "\051\056\052\043\057\036\061\054\001\001\000\002\001" +
    "\001\000\034\012\123\030\122\031\060\036\116\040\121" +
    "\042\117\043\120\044\124\045\125\051\056\052\043\057" +
    "\036\061\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\047\030\046\031\060\035\u0245\036\033\040\045" +
    "\042\041\043\042\044\051\045\061\051\056\052\043\057" +
    "\036\061\054\001\001\000\010\007\u026a\010\u026c\060\u0268" +
    "\001\001\000\002\001\001\000\046\012\047\013\266\014" +
    "\105\015\101\026\u019b\030\046\031\060\035\037\036\033" +
    "\040\045\042\041\043\042\044\051\045\061\051\056\052" +
    "\043\057\036\061\054\001\001\000\002\001\001\000\012" +
    "\013\266\014\105\015\101\026\u019b\001\001\000\004\062" +
    "\u0254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u0263\063" +
    "\u0261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\266\014\105\015\101\026\u019b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\u0293\001" +
    "\001\000\004\062\u0276\001\001\000\002\001\001\000\004" +
    "\062\u0280\001\001\000\004\062\u0279\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\u0263\063\u027c\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u0263\063" +
    "\u028d\001\001\000\002\001\001\000\006\011\u0263\063\u0282" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\u0263\063\u0286\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\u0263\063\u0291\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u0263\063" +
    "\u02a2\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\u026a\010\u026c\060\u0268\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\123\030\122\031\060\036\116\040\121\042\117\043" +
    "\120\044\124\045\125\051\056\052\043\057\036\061\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\u02b6\003\u02b9\005" +
    "\u02bd\007\017\010\015\056\005\060\026\001\001\000\004" +
    "\004\u02ba\001\001\000\002\001\001\000\036\012\047\030" +
    "\046\031\060\035\u0245\036\033\040\045\042\041\043\042" +
    "\044\051\045\061\051\056\052\043\057\036\061\054\001" +
    "\001\000\002\001\001\000\010\007\u026a\010\u026c\060\u0268" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 //Codigo del usuario
    private Editor editor;
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABEZA BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		System.out.println("Programa Correcto!!!!!");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del programa"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CABEZA error BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de declaración"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CABEZA BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de declaración"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= CABEZA BLOQUE_DECLARACION error fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de código"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error INICIO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Contenido no esperado antes de iniciar el programa"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Programa no reconocido"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABEZA ::= inicio_programa Identificador usar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),"Nombre del programa");
            System.out.println("Inicio y nombre correcto, junto con la condiguracion usar");
        }
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABEZA ::= Identificador Identificador usar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_programa. Tienes: " + s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CABEZA ::= inicio_programa usar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó ponerle nombre al programa."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CABEZA ::= inicio_programa Identificador Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la palabra \"usar\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CABEZA ::= inicio_programa Identificador usar PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la configuración de USAR."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CABEZA ::= inicio_programa Identificador usar Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CABEZA ::= inicio_programa Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la configuración usar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PINES ::= PINES COMA Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PINES",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PINES ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PINES",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOQUE_DECLARACION ::= inicio_var fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto vacío");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUE_DECLARACION ::= inicio_var error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Bloque de declaraciones no completo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir fin_var. Tienes "+ s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE_DECLARACION ::= DECLARACIONES Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del bloque de declaraciones."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE_DECLARACION ::= error DECLARACIONES fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_var."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUE_CODIGO ::= inicio_bloque fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO vacío correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOQUE_CODIGO ::= inicio_bloque SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO correcto\n");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOQUE_CODIGO ::= error SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del bloque de código"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOQUE_CODIGO ::= Identificador SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribiste mal inicio_bloque. Tienes: " + s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOQUE_CODIGO ::= error fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error al identificar el bloque de código " + sright));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOQUE_CODIGO ::= error fin_programa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error al identificar el bloque de código " + sright));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONES ::= DECLARACIONES DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONES ::= DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONES ::= DECLARACIONES DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONES ::= DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONES ::= error fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Declaración no válida."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONES ::= DECLARACIONES error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Declaración no válida."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= definir Identificador como TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un "  + td.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= definir Identificador como TIPO_DATO_DEC error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Identificador Identificador como TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"definir\" "));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= definir Identificador Identificador TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\" "));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= definir Identificador TIPO_DATO_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar la palabra \"como\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= definir Identificador como PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el tipo de dato."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_ARREGLO ::= definir Identificador como arreglo Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arreglo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_ARREGLO ::= definir como arreglo Cor_a definir Identificador como arregloBi Cor_a Numero Cor_c Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arregloBi");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-14)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un " + td.toString());
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_A ::= definir Identificador Identificador TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_A ::= Identificador Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"definir\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_A ::= definir como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el nombre del identificador."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_A ::= definir Identificador TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar la palabra \"como\"."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_A ::= definir Identificador como Asignacion_s TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el tipo de dato."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_A ::= definir Identificador como TIPO_DATO_DEC TIPO_VALOR_DEC PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el signo =."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= Identificador Asignacion_s Texto 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= Identificador Asignacion_s verdadero 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= Identificador Asignacion_s falso 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION ::= Identificador Asignacion_s EXPRESION 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION ::= Identificador Asignacion_s 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el valor a asignar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION ::= Identificador Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo ="));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= Identificador verdadero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo ="));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION ::= Identificador falso 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo ="));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGNACION ::= Identificador EXPRESION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo ="));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION ::= Identificador Asignacion_s error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo determinar el valor a asignar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TERMINO ::= TERMINO Mul FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TERMINO ::= TERMINO Div FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FACTOR ::= Par_a EXPRESION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FACTOR ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= CONDICION o CONDICION_2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= CONDICION_2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICION_2 ::= CONDICION_2 y CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_2",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICION_2 ::= CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_2",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICION_3 ::= CONDICION_3 OP_LOGICO CONDICION_4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICION_3 ::= CONDICION_3 OP_REL CONDICION_4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDICION_3 ::= Texto OP_REL CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION_3 ::= Decimal OP_REL CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION_3 ::= Numero OP_REL CONDICION_3 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION_3 ::= CONDICION_4 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_3",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION_4 ::= verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION_4 ::= falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION_4 ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION_4 ::= Identificador PUNTO estado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION_4 ::= Par_a CONDICION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION_4 ::= no Par_a CONDICION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION_4",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_REL ::= Mayor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP_REL ::= Menor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP_REL ::= Diferente 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP_REL ::= Mayor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP_REL ::= Menor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP_REL ::= Igual 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DIRECCION ::= izquierda 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DIRECCION ::= derecha 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FACIL_SENTENCIA ::= METODO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FACIL_SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // METODO ::= incrementar Identificador 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un incremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // METODO ::= decrementar Identificador 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un decremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // METODO ::= MOSTRAR_TEXTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // METODO ::= MANIPULAR_COMPONENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MOSTRAR_TEXTO ::= mostrar PARAMETRO_TEXTO 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado mostrar texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MOSTRAR_TEXTO ::= mostrar error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al identificar el texto dado"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender 
            {
              Object RESULT =null;
		System.out.println("Encontrado prender");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MANIPULAR_COMPONENTE ::= Identificador PUNTO apagar 
            {
              Object RESULT =null;
		System.out.println("Encontrado apagar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a PINES Par_c 
            {
              Object RESULT =null;
		System.out.println("Encontrado asignar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar PINES Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó abrir el paréntesis."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó ingresar la lista de pines."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a PINES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó cerrar el paréntesis."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MANIPULAR_COMPONENTE ::= Identificador PUNTO asignar Par_a error Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Lista de pines no válida."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender PUNTO COLOR 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado prender color");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MANIPULAR_COMPONENTE ::= Identificador PUNTO detener 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado detener motor");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar direccion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a TIEMPO Par_c 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar con tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito el valor de tiempo. Recuerda que es un numero entero y ya sea seg, hr o min."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a TEXTO Par_c 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado visualizar display");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a error Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo identificar el texto a visualizar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MANIPULAR_COMPONENTE ::= Identificador PUNTO error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrita la función del componente."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TIEMPO ::= Tiempo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TIEMPO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TEXTO ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA ::= SENTENCIA METODO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA ::= METODO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA ::= SENTENCIA ASIGNACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA ::= ASIGNACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA ::= SENTENCIA DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA ::= DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA ::= SENTENCIA SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA ::= SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA ::= SENTENCIA SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA ::= SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA ::= SENTENCIA SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA ::= SENTENCIA SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA ::= SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA ::= SENTENCIA SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA ::= SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA ::= error fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA ::= error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECISION ::= SENTENCIA_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECISION ::= SENTENCIA_FACIL_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECISION ::= SENTENCIA_FACIL_SINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA_SI ::= si Par_a error Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_SI ::= si CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_SI ::= si Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_SI ::= si Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis de la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_SI ::= si Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque si"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_SI ::= si Par_a error Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"sino\""));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque sino"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado FACIL SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA_FACIL_SI ::= Identificador Par_a CONDICION COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribiste mal la sentencia. Tienes: " + s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_FACIL_SI ::= facil_si CONDICION COMA FACIL_SENTENCIA PUNTO_COMA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis del bloque facil_si"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_FACIL_SI ::= facil_si Par_a COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la coma que separa la condición de la instrucción"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la instrucción a ejecutar"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó cerrar el paréntesis del bloque fácil_si"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_FACIL_SI ::= facil_si Par_a error COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al estructurar la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ser una sola sentencia"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		System.out.println("Se ha encontrado FACIL SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el ; en el facil_sino"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_FACIL_SINO ::= facil_sino CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION FACIL_SENTENCIA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te saltaste la coma que separa la condición de la instrucción"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la instrucción a realizar cuando sea verdadero"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la coma que separa las instrucciones"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la instrucción a realizar cuando sea falso"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó cerrar el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a error COMA FACIL_SENTENCIA COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al estructurar la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA error COMA FACIL_SENTENCIA PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ser una sola sentencia"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIA_FACIL_SINO ::= facil_sino Par_a CONDICION COMA FACIL_SENTENCIA COMA error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ser una sola sentencia"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIA_REPETIR ::= Identificador PARAMETRO_ENTERO veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"repetir\". Tienes "+s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIA_REPETIR ::= repetir veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el número entero de repeticiones"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"veces\""));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO Identificador Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"veces\". Tienes: " +s.toString()));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque repetir"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner las sentencias"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTENCIA_REPETIR ::= repetir error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia repetir esta incompleta"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		System.out.println("Se ha encontrado FACIL REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO COMA FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta el ;"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo determinar el contenido del paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCIA_FACIL_REPETIR ::= facil_repetir PARAMETRO_ENTERO COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque facil_repetir"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el número de repeticiones"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO error FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te saltaste una coma"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_ENTERO COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la instrucción a repetir"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La instrución esta vacía"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTENCIA_FACIL_REPETIR ::= facil_repetir error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de la sentencia facil_repetir, popr favor revisalo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado MIENTRAS");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTENCIA_MIENTRAS ::= mientras CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SENTENCIA_MIENTRAS ::= mientras Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condicion"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque mientras"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner sentencias dentro del bloque"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_MIENTRAS ::= mientras error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintaxis del ciclo mientras, por favor revisalo"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado PARA");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTENCIA_PARA ::= para Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SENTENCIA_PARA ::= para Par_a Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner un nuevo identificador"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SENTENCIA_PARA ::= para Par_a Identificador Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el signo = "));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el valor de la variable"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SENTENCIA_PARA ::= para Par_a COMA incrementar Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner ya sea \"incrementar\" o \"decrementar\""));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner una coma entre el incremento y la condicion"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SENTENCIA_PARA ::= para Par_a error COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la declaración del contador"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA error COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura del incremento/decremento"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA error Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura de la condición"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SENTENCIA_PARA ::= para Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La función para esta sin atributos"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SENTENCIA_PARA ::= para Par_a Par_c error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis del contenido de la función para."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque para"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner las sentencias del bloque para"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SELECTOR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // SENTENCIA_SELECTOR ::= selector Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la sentencia selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SENTENCIA_SELECTOR ::= selector Par_a Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el identificador en el selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SENTENCIA_SELECTOR ::= selector error Identificador Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis en el selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SENTENCIA_SELECTOR ::= selector Par_a error Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ir un identificador en el atributo de selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque selector"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta agregar los casos"));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // BLOQUE_SELECTOR ::= caso Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // BLOQUE_SELECTOR ::= caso Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // BLOQUE_SELECTOR ::= caso verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR caso falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // BLOQUE_SELECTOR ::= caso falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // BLOQUE_SELECTOR ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector."));
        System.out.println("Error en casos del selector, punto coma en " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // BLOQUE_SELECTOR ::= error caso 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector."));
        System.out.println("Error en casos del selector, ir al caso en línea " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // BLOQUE_SELECTOR ::= error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector."));
        System.out.println("Error en casos del selector, ir a llave en la línea " + uright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // PARAMETRO_DECIMAL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DECIMAL",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // PARAMETRO_DECIMAL ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DECIMAL",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // PARAMETRO_ENTERO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_ENTERO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // PARAMETRO_ENTERO ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_ENTERO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // PARAMETRO_TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_TEXTO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // PARAMETRO_TEXTO ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_TEXTO",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // INC_DEC ::= incrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // INC_DEC ::= decrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TIPO_DATO_DEC ::= entero 
            {
              Object RESULT =null;
		RESULT = "entero";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // TIPO_DATO_DEC ::= decimal 
            {
              Object RESULT =null;
		RESULT = "decimal";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TIPO_DATO_DEC ::= logico 
            {
              Object RESULT =null;
		RESULT = "logico";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TIPO_DATO_DEC ::= texto 
            {
              Object RESULT =null;
		RESULT = "texto";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TIPO_DATO_DEC ::= display 
            {
              Object RESULT =null;
		RESULT = "display";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TIPO_DATO_DEC ::= motor 
            {
              Object RESULT =null;
		RESULT = "motor";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TIPO_DATO_DEC ::= led 
            {
              Object RESULT =null;
		RESULT = "led";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TIPO_DATO_DEC ::= ledRGB 
            {
              Object RESULT =null;
		RESULT = "ledRGB";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TIPO_DATO_DEC ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Tipo de dato no válido."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_DEC",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // TIPO_VALOR_DEC ::= Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TIPO_VALOR_DEC ::= Decimal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT =s ;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TIPO_VALOR_DEC ::= Texto 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TIPO_VALOR_DEC ::= VALOR_LOGICO_DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		RESULT = s;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TIPO_VALOR_DEC ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se esperaba un valor."));
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_DEC",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // VALOR_LOGICO_DEC ::= verdadero 
            {
              Object RESULT =null;
		RESULT = "verdadero";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO_DEC",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // VALOR_LOGICO_DEC ::= falso 
            {
              Object RESULT =null;
		RESULT = "falso";
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO_DEC",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // OP_LOGICO ::= y 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // OP_LOGICO ::= o 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
