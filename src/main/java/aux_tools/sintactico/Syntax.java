
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package aux_tools.sintactico;

import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\316\000\002\002\004\000\002\002\006\000\002\054" +
    "\002\000\002\047\005\000\002\047\004\000\002\047\004" +
    "\000\002\003\005\000\002\055\002\000\002\003\010\000" +
    "\002\003\005\000\002\005\005\000\002\005\004\000\002" +
    "\005\005\000\002\005\004\000\002\005\004\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\007\011\000\002\007\014\000\002" +
    "\010\010\000\002\010\010\000\002\010\010\000\002\010" +
    "\010\000\002\010\010\000\002\010\010\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\006\000\002\013" +
    "\005\000\002\013\005\000\002\013\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\021\003\000\002\021\003\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\004\000\002\025\003\000\002\025" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\004" +
    "\000\002\026\005\000\002\051\006\000\002\051\006\000" +
    "\002\051\006\000\002\051\010\000\002\051\010\000\002" +
    "\051\013\000\002\051\013\000\002\051\011\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\004\000\002\032\003\000\002\032\004\000\002" +
    "\032\003\000\002\032\004\000\002\032\003\000\002\032" +
    "\004\000\002\032\003\000\002\032\004\000\002\032\003" +
    "\000\002\032\004\000\002\032\003\000\002\032\004\000" +
    "\002\032\003\000\002\032\004\000\002\032\003\000\002" +
    "\032\005\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\024\003\000\002\024\003\000\002\043\011" +
    "\000\002\043\010\000\002\043\010\000\002\043\010\000" +
    "\002\043\010\000\002\043\010\000\002\043\015\000\002" +
    "\043\014\000\002\043\014\000\002\044\007\000\002\044" +
    "\006\000\002\044\006\000\002\044\006\000\002\050\016" +
    "\000\002\050\015\000\002\050\015\000\002\050\015\000" +
    "\002\050\015\000\002\050\015\000\002\050\015\000\002" +
    "\050\015\000\002\050\015\000\002\050\015\000\002\050" +
    "\015\000\002\035\010\000\002\035\007\000\002\035\007" +
    "\000\002\035\007\000\002\035\007\000\002\035\010\000" +
    "\002\035\007\000\002\036\011\000\002\036\007\000\002" +
    "\036\010\000\002\036\010\000\002\036\011\000\002\036" +
    "\010\000\002\036\006\000\002\036\006\000\002\037\011" +
    "\000\002\037\010\000\002\037\010\000\002\037\010\000" +
    "\002\037\010\000\002\037\010\000\002\037\005\000\002" +
    "\040\020\000\002\040\017\000\002\040\017\000\002\040" +
    "\017\000\002\040\017\000\002\040\015\000\002\040\017" +
    "\000\002\040\017\000\002\040\017\000\002\040\016\000" +
    "\002\040\017\000\002\040\020\000\002\040\010\000\002" +
    "\040\011\000\002\040\017\000\002\040\017\000\002\041" +
    "\011\000\002\041\010\000\002\041\010\000\002\041\010" +
    "\000\002\041\011\000\002\041\010\000\002\041\010\000" +
    "\002\046\010\000\002\046\007\000\002\046\010\000\002" +
    "\046\007\000\002\046\010\000\002\046\007\000\002\046" +
    "\010\000\002\046\007\000\002\046\004\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\045\003\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0242\000\006\035\004\076\006\001\002\000\006\003" +
    "\u0243\076\u0244\001\002\000\006\003\013\036\014\001\002" +
    "\000\004\076\uffff\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\004\076\012\001\002\000\006" +
    "\003\ufffe\036\ufffe\001\002\000\006\003\u023e\013\u0212\001" +
    "\002\000\006\003\u0211\013\u0212\001\002\000\006\003\017" +
    "\010\020\001\002\000\004\026\u020e\001\002\000\030\021" +
    "\047\023\041\044\026\046\052\053\023\056\044\057\050" +
    "\074\037\075\051\076\032\127\022\001\002\000\032\021" +
    "\047\023\041\044\026\046\052\053\023\056\044\057\050" +
    "\064\033\074\037\075\051\076\032\127\022\001\002\000" +
    "\040\003\uff98\021\uff98\023\uff98\044\uff98\046\uff98\053\uff98" +
    "\054\uff98\056\uff98\057\uff98\064\uff98\074\uff98\075\uff98\076" +
    "\uff98\105\uff98\127\uff98\001\002\000\006\076\u019e\102\u019d" +
    "\001\002\000\012\003\u0187\004\u0186\062\u0188\076\u0189\001" +
    "\002\000\040\003\uff8a\021\uff8a\023\uff8a\044\uff8a\046\uff8a" +
    "\053\uff8a\054\uff8a\056\uff8a\057\uff8a\064\uff8a\074\uff8a\075" +
    "\uff8a\076\uff8a\105\uff8a\127\uff8a\001\002\000\034\003\123" +
    "\021\047\023\041\044\026\046\052\053\023\056\044\057" +
    "\050\064\u0185\074\037\075\051\076\032\127\022\001\002" +
    "\000\016\003\u0170\004\066\025\072\063\067\076\073\102" +
    "\u016e\001\002\000\040\003\uff94\021\uff94\023\uff94\044\uff94" +
    "\046\uff94\053\uff94\054\uff94\056\uff94\057\uff94\064\uff94\074" +
    "\uff94\075\uff94\076\uff94\105\uff94\127\uff94\001\002\000\040" +
    "\003\uff92\021\uff92\023\uff92\044\uff92\046\uff92\053\uff92\054" +
    "\uff92\056\uff92\057\uff92\064\uff92\074\uff92\075\uff92\076\uff92" +
    "\105\uff92\127\uff92\001\002\000\040\003\uff8b\021\uff8b\023" +
    "\uff8b\044\uff8b\046\uff8b\053\uff8b\054\uff8b\056\uff8b\057\uff8b" +
    "\064\uff8b\074\uff8b\075\uff8b\076\uff8b\105\uff8b\127\uff8b\001" +
    "\002\000\024\004\u0131\005\u0127\006\u012b\025\u012e\063\u012d" +
    "\076\u012f\102\u0129\111\u012a\124\u0128\001\002\000\004\026" +
    "\uffba\001\002\000\040\003\uff96\021\uff96\023\uff96\044\uff96" +
    "\046\uff96\053\uff96\054\uff96\056\uff96\057\uff96\064\uff96\074" +
    "\uff96\075\uff96\076\uff96\105\uff96\127\uff96\001\002\000\040" +
    "\003\uff9a\021\uff9a\023\uff9a\044\uff9a\046\uff9a\053\uff9a\054" +
    "\uff9a\056\uff9a\057\uff9a\064\uff9a\074\uff9a\075\uff9a\076\uff9a" +
    "\105\uff9a\127\uff9a\001\002\000\040\003\uff9c\021\uff9c\023" +
    "\uff9c\044\uff9c\046\uff9c\053\uff9c\054\uff9c\056\uff9c\057\uff9c" +
    "\064\uff9c\074\uff9c\075\uff9c\076\uff9c\105\uff9c\127\uff9c\001" +
    "\002\000\006\076\u0124\100\u0123\001\002\000\040\003\uff90" +
    "\021\uff90\023\uff90\044\uff90\046\uff90\053\uff90\054\uff90\056" +
    "\uff90\057\uff90\064\uff90\074\uff90\075\uff90\076\uff90\105\uff90" +
    "\127\uff90\001\002\000\014\004\066\025\072\063\067\076" +
    "\073\102\333\001\002\000\040\003\uff8c\021\uff8c\023\uff8c" +
    "\044\uff8c\046\uff8c\053\uff8c\054\uff8c\056\uff8c\057\uff8c\064" +
    "\uff8c\074\uff8c\075\uff8c\076\uff8c\105\uff8c\127\uff8c\001\002" +
    "\000\044\003\uffb1\021\uffb1\023\uffb1\044\uffb1\046\uffb1\053" +
    "\uffb1\054\uffb1\056\uffb1\057\uffb1\064\uffb1\074\uffb1\075\uffb1" +
    "\076\uffb1\103\uffb1\104\uffb1\105\uffb1\127\uffb1\001\002\000" +
    "\006\076\230\102\227\001\002\000\044\003\uffb2\021\uffb2" +
    "\023\uffb2\044\uffb2\046\uffb2\053\uffb2\054\uffb2\056\uffb2\057" +
    "\uffb2\064\uffb2\074\uffb2\075\uffb2\076\uffb2\103\uffb2\104\uffb2" +
    "\105\uffb2\127\uffb2\001\002\000\040\003\uff8e\021\uff8e\023" +
    "\uff8e\044\uff8e\046\uff8e\053\uff8e\054\uff8e\056\uff8e\057\uff8e" +
    "\064\uff8e\074\uff8e\075\uff8e\076\uff8e\105\uff8e\127\uff8e\001" +
    "\002\000\012\003\170\005\172\076\171\102\167\001\002" +
    "\000\014\004\066\025\072\063\067\076\073\102\070\001" +
    "\002\000\006\076\063\100\062\001\002\000\012\003\053" +
    "\006\055\076\056\100\054\001\002\000\004\100\061\001" +
    "\002\000\044\003\uffae\021\uffae\023\uffae\044\uffae\046\uffae" +
    "\053\uffae\054\uffae\056\uffae\057\uffae\064\uffae\074\uffae\075" +
    "\uffae\076\uffae\103\uffae\104\uffae\105\uffae\127\uffae\001\002" +
    "\000\004\100\060\001\002\000\004\100\057\001\002\000" +
    "\044\003\uffaf\021\uffaf\023\uffaf\044\uffaf\046\uffaf\053\uffaf" +
    "\054\uffaf\056\uffaf\057\uffaf\064\uffaf\074\uffaf\075\uffaf\076" +
    "\uffaf\103\uffaf\104\uffaf\105\uffaf\127\uffaf\001\002\000\044" +
    "\003\uffb0\021\uffb0\023\uffb0\044\uffb0\046\uffb0\053\uffb0\054" +
    "\uffb0\056\uffb0\057\uffb0\064\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\103\uffb0\104\uffb0\105\uffb0\127\uffb0\001\002\000\044\003" +
    "\uffad\021\uffad\023\uffad\044\uffad\046\uffad\053\uffad\054\uffad" +
    "\056\uffad\057\uffad\064\uffad\074\uffad\075\uffad\076\uffad\103" +
    "\uffad\104\uffad\105\uffad\127\uffad\001\002\000\044\003\uffb3" +
    "\021\uffb3\023\uffb3\044\uffb3\046\uffb3\053\uffb3\054\uffb3\056" +
    "\uffb3\057\uffb3\064\uffb3\074\uffb3\075\uffb3\076\uffb3\103\uffb3" +
    "\104\uffb3\105\uffb3\127\uffb3\001\002\000\006\003\064\100" +
    "\065\001\002\000\044\003\uffb4\021\uffb4\023\uffb4\044\uffb4" +
    "\046\uffb4\053\uffb4\054\uffb4\056\uffb4\057\uffb4\064\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\103\uffb4\104\uffb4\105\uffb4\127\uffb4" +
    "\001\002\000\044\003\uffb5\021\uffb5\023\uffb5\044\uffb5\046" +
    "\uffb5\053\uffb5\054\uffb5\056\uffb5\057\uffb5\064\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\103\uffb5\104\uffb5\105\uffb5\127\uffb5\001" +
    "\002\000\016\110\163\116\075\117\076\120\101\121\074" +
    "\122\100\001\002\000\022\046\uffc6\074\uffc6\075\uffc6\076" +
    "\uffc6\103\uffc6\104\uffc6\110\160\125\uffc6\001\002\000\014" +
    "\004\066\025\072\063\067\076\073\103\130\001\002\000" +
    "\004\103\111\001\002\000\022\046\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\103\uffc5\104\uffc5\110\107\125\uffc5\001\002\000" +
    "\034\046\uffc4\074\uffc4\075\uffc4\076\uffc4\103\uffc4\104\uffc4" +
    "\110\102\116\075\117\076\120\101\121\074\122\100\125" +
    "\uffc4\001\002\000\006\004\uffc3\076\uffc3\001\002\000\006" +
    "\004\uffbf\076\uffbf\001\002\000\006\004\uffc0\076\uffc0\001" +
    "\002\000\006\004\105\076\106\001\002\000\006\004\uffc2" +
    "\076\uffc2\001\002\000\006\004\uffc1\076\uffc1\001\002\000" +
    "\012\004\uffbe\025\104\063\103\076\uffbe\001\002\000\020" +
    "\046\uffcd\074\uffcd\075\uffcd\076\uffcd\103\uffcd\104\uffcd\125" +
    "\uffcd\001\002\000\020\046\uffce\074\uffce\075\uffce\076\uffce" +
    "\103\uffce\104\uffce\125\uffce\001\002\000\020\046\uffca\074" +
    "\uffca\075\uffca\076\uffca\103\uffca\104\uffca\125\uffca\001\002" +
    "\000\020\046\uffc8\074\uffc8\075\uffc8\076\uffc8\103\uffc8\104" +
    "\uffc8\125\uffc8\001\002\000\004\076\110\001\002\000\020" +
    "\046\uffcb\074\uffcb\075\uffcb\076\uffcb\103\uffcb\104\uffcb\125" +
    "\uffcb\001\002\000\004\104\112\001\002\000\030\021\047" +
    "\023\041\044\026\046\052\053\023\056\044\057\050\074" +
    "\037\075\051\076\032\127\022\001\002\000\034\003\123" +
    "\021\047\023\041\044\026\046\052\053\023\056\044\057" +
    "\050\074\037\075\051\076\032\105\125\127\022\001\002" +
    "\000\040\003\uff99\021\uff99\023\uff99\044\uff99\046\uff99\053" +
    "\uff99\054\uff99\056\uff99\057\uff99\064\uff99\074\uff99\075\uff99" +
    "\076\uff99\105\uff99\127\uff99\001\002\000\040\003\uff95\021" +
    "\uff95\023\uff95\044\uff95\046\uff95\053\uff95\054\uff95\056\uff95" +
    "\057\uff95\064\uff95\074\uff95\075\uff95\076\uff95\105\uff95\127" +
    "\uff95\001\002\000\040\003\uff93\021\uff93\023\uff93\044\uff93" +
    "\046\uff93\053\uff93\054\uff93\056\uff93\057\uff93\064\uff93\074" +
    "\uff93\075\uff93\076\uff93\105\uff93\127\uff93\001\002\000\040" +
    "\003\uff97\021\uff97\023\uff97\044\uff97\046\uff97\053\uff97\054" +
    "\uff97\056\uff97\057\uff97\064\uff97\074\uff97\075\uff97\076\uff97" +
    "\105\uff97\127\uff97\001\002\000\040\003\uff9b\021\uff9b\023" +
    "\uff9b\044\uff9b\046\uff9b\053\uff9b\054\uff9b\056\uff9b\057\uff9b" +
    "\064\uff9b\074\uff9b\075\uff9b\076\uff9b\105\uff9b\127\uff9b\001" +
    "\002\000\040\003\uff9d\021\uff9d\023\uff9d\044\uff9d\046\uff9d" +
    "\053\uff9d\054\uff9d\056\uff9d\057\uff9d\064\uff9d\074\uff9d\075" +
    "\uff9d\076\uff9d\105\uff9d\127\uff9d\001\002\000\040\003\uff91" +
    "\021\uff91\023\uff91\044\uff91\046\uff91\053\uff91\054\uff91\056" +
    "\uff91\057\uff91\064\uff91\074\uff91\075\uff91\076\uff91\105\uff91" +
    "\127\uff91\001\002\000\004\100\126\001\002\000\040\003" +
    "\uff8f\021\uff8f\023\uff8f\044\uff8f\046\uff8f\053\uff8f\054\uff8f" +
    "\056\uff8f\057\uff8f\064\uff8f\074\uff8f\075\uff8f\076\uff8f\105" +
    "\uff8f\127\uff8f\001\002\000\040\003\uff86\021\uff86\023\uff86" +
    "\044\uff86\046\uff86\053\uff86\054\uff86\056\uff86\057\uff86\064" +
    "\uff86\074\uff86\075\uff86\076\uff86\105\uff86\127\uff86\001\002" +
    "\000\040\003\uff8d\021\uff8d\023\uff8d\044\uff8d\046\uff8d\053" +
    "\uff8d\054\uff8d\056\uff8d\057\uff8d\064\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\105\uff8d\127\uff8d\001\002\000\006\103\135\104" +
    "\134\001\002\000\004\104\131\001\002\000\030\021\047" +
    "\023\041\044\026\046\052\053\023\056\044\057\050\074" +
    "\037\075\051\076\032\127\022\001\002\000\034\003\123" +
    "\021\047\023\041\044\026\046\052\053\023\056\044\057" +
    "\050\074\037\075\051\076\032\105\133\127\022\001\002" +
    "\000\040\003\uff85\021\uff85\023\uff85\044\uff85\046\uff85\053" +
    "\uff85\054\uff85\056\uff85\057\uff85\064\uff85\074\uff85\075\uff85" +
    "\076\uff85\105\uff85\127\uff85\001\002\000\030\021\047\023" +
    "\041\044\026\046\052\053\023\056\044\057\050\074\037" +
    "\075\051\076\032\127\022\001\002\000\034\003\137\021" +
    "\047\023\041\044\026\046\052\053\023\056\044\057\050" +
    "\074\037\075\051\076\032\104\140\127\022\001\002\000" +
    "\034\003\123\021\047\023\041\044\026\046\052\053\023" +
    "\056\044\057\050\074\037\075\051\076\032\105\155\127" +
    "\022\001\002\000\004\105\154\001\002\000\030\021\047" +
    "\023\041\044\026\046\052\053\023\056\044\057\050\074" +
    "\037\075\051\076\032\127\022\001\002\000\034\003\123" +
    "\021\047\023\041\044\026\046\052\053\023\056\044\057" +
    "\050\074\037\075\051\076\032\105\142\127\022\001\002" +
    "\000\044\003\uff87\021\uff87\023\uff87\044\uff87\046\uff87\053" +
    "\uff87\054\uff87\056\uff87\057\uff87\060\144\064\uff87\074\uff87" +
    "\075\uff87\076\uff87\104\143\105\uff87\127\uff87\001\002\000" +
    "\030\021\047\023\041\044\026\046\052\053\023\056\044" +
    "\057\050\074\037\075\051\076\032\127\022\001\002\000" +
    "\032\021\047\023\041\044\026\046\052\053\023\056\044" +
    "\057\050\074\037\075\051\076\032\104\146\127\022\001" +
    "\002\000\034\003\123\021\047\023\041\044\026\046\052" +
    "\053\023\056\044\057\050\074\037\075\051\076\032\105" +
    "\151\127\022\001\002\000\030\021\047\023\041\044\026" +
    "\046\052\053\023\056\044\057\050\074\037\075\051\076" +
    "\032\127\022\001\002\000\034\003\123\021\047\023\041" +
    "\044\026\046\052\053\023\056\044\057\050\074\037\075" +
    "\051\076\032\105\150\127\022\001\002\000\040\003\uff81" +
    "\021\uff81\023\uff81\044\uff81\046\uff81\053\uff81\054\uff81\056" +
    "\uff81\057\uff81\064\uff81\074\uff81\075\uff81\076\uff81\105\uff81" +
    "\127\uff81\001\002\000\040\003\uff7f\021\uff7f\023\uff7f\044" +
    "\uff7f\046\uff7f\053\uff7f\054\uff7f\056\uff7f\057\uff7f\064\uff7f" +
    "\074\uff7f\075\uff7f\076\uff7f\105\uff7f\127\uff7f\001\002\000" +
    "\034\003\123\021\047\023\041\044\026\046\052\053\023" +
    "\056\044\057\050\074\037\075\051\076\032\105\153\127" +
    "\022\001\002\000\040\003\uff80\021\uff80\023\uff80\044\uff80" +
    "\046\uff80\053\uff80\054\uff80\056\uff80\057\uff80\064\uff80\074" +
    "\uff80\075\uff80\076\uff80\105\uff80\127\uff80\001\002\000\040" +
    "\003\uff82\021\uff82\023\uff82\044\uff82\046\uff82\053\uff82\054" +
    "\uff82\056\uff82\057\uff82\064\uff82\074\uff82\075\uff82\076\uff82" +
    "\105\uff82\127\uff82\001\002\000\040\003\uff83\021\uff83\023" +
    "\uff83\044\uff83\046\uff83\053\uff83\054\uff83\056\uff83\057\uff83" +
    "\064\uff83\074\uff83\075\uff83\076\uff83\105\uff83\127\uff83\001" +
    "\002\000\034\003\123\021\047\023\041\044\026\046\052" +
    "\053\023\056\044\057\050\074\037\075\051\076\032\105" +
    "\157\127\022\001\002\000\040\003\uff84\021\uff84\023\uff84" +
    "\044\uff84\046\uff84\053\uff84\054\uff84\056\uff84\057\uff84\064" +
    "\uff84\074\uff84\075\uff84\076\uff84\105\uff84\127\uff84\001\002" +
    "\000\004\076\161\001\002\000\020\046\uffcc\074\uffcc\075" +
    "\uffcc\076\uffcc\103\uffcc\104\uffcc\125\uffcc\001\002\000\006" +
    "\004\164\076\165\001\002\000\006\004\uffbe\076\uffbe\001" +
    "\002\000\020\046\uffc7\074\uffc7\075\uffc7\076\uffc7\103\uffc7" +
    "\104\uffc7\125\uffc7\001\002\000\020\046\uffc9\074\uffc9\075" +
    "\uffc9\076\uffc9\103\uffc9\104\uffc9\125\uffc9\001\002\000\004" +
    "\125\223\001\002\000\014\003\177\005\172\076\171\103" +
    "\200\125\176\001\002\000\004\103\173\001\002\000\006" +
    "\003\uff39\125\uff39\001\002\000\006\003\uff38\125\uff38\001" +
    "\002\000\004\100\174\001\002\000\040\003\uff61\021\uff61" +
    "\023\uff61\044\uff61\046\uff61\053\uff61\054\uff61\056\uff61\057" +
    "\uff61\064\uff61\074\uff61\075\uff61\076\uff61\105\uff61\127\uff61" +
    "\001\002\000\006\003\212\125\211\001\002\000\012\046" +
    "\052\074\037\075\051\076\032\001\002\000\004\103\202" +
    "\001\002\000\004\100\201\001\002\000\040\003\uff62\021" +
    "\uff62\023\uff62\044\uff62\046\uff62\053\uff62\054\uff62\056\uff62" +
    "\057\uff62\064\uff62\074\uff62\075\uff62\076\uff62\105\uff62\127" +
    "\uff62\001\002\000\004\100\203\001\002\000\040\003\uff67" +
    "\021\uff67\023\uff67\044\uff67\046\uff67\053\uff67\054\uff67\056" +
    "\uff67\057\uff67\064\uff67\074\uff67\075\uff67\076\uff67\105\uff67" +
    "\127\uff67\001\002\000\044\003\uff88\021\uff88\023\uff88\044" +
    "\uff88\046\uff88\053\uff88\054\uff88\056\uff88\057\uff88\064\uff88" +
    "\074\uff88\075\uff88\076\uff88\103\uff88\104\uff88\105\uff88\127" +
    "\uff88\001\002\000\044\003\uff89\021\uff89\023\uff89\044\uff89" +
    "\046\uff89\053\uff89\054\uff89\056\uff89\057\uff89\064\uff89\074" +
    "\uff89\075\uff89\076\uff89\103\uff89\104\uff89\105\uff89\127\uff89" +
    "\001\002\000\004\103\207\001\002\000\004\100\210\001" +
    "\002\000\040\003\uff65\021\uff65\023\uff65\044\uff65\046\uff65" +
    "\053\uff65\054\uff65\056\uff65\057\uff65\064\uff65\074\uff65\075" +
    "\uff65\076\uff65\105\uff65\127\uff65\001\002\000\014\046\052" +
    "\074\037\075\051\076\032\103\216\001\002\000\012\046" +
    "\052\074\037\075\051\076\032\001\002\000\004\103\214" +
    "\001\002\000\004\100\215\001\002\000\040\003\uff64\021" +
    "\uff64\023\uff64\044\uff64\046\uff64\053\uff64\054\uff64\056\uff64" +
    "\057\uff64\064\uff64\074\uff64\075\uff64\076\uff64\105\uff64\127" +
    "\uff64\001\002\000\004\100\222\001\002\000\004\103\220" +
    "\001\002\000\004\100\221\001\002\000\040\003\uff68\021" +
    "\uff68\023\uff68\044\uff68\046\uff68\053\uff68\054\uff68\056\uff68" +
    "\057\uff68\064\uff68\074\uff68\075\uff68\076\uff68\105\uff68\127" +
    "\uff68\001\002\000\040\003\uff63\021\uff63\023\uff63\044\uff63" +
    "\046\uff63\053\uff63\054\uff63\056\uff63\057\uff63\064\uff63\074" +
    "\uff63\075\uff63\076\uff63\105\uff63\127\uff63\001\002\000\012" +
    "\046\052\074\037\075\051\076\032\001\002\000\004\103" +
    "\225\001\002\000\004\100\226\001\002\000\040\003\uff66" +
    "\021\uff66\023\uff66\044\uff66\046\uff66\053\uff66\054\uff66\056" +
    "\uff66\057\uff66\064\uff66\074\uff66\075\uff66\076\uff66\105\uff66" +
    "\127\uff66\001\002\000\010\003\307\076\310\103\311\001" +
    "\002\000\004\103\231\001\002\000\004\104\232\001\002" +
    "\000\014\003\235\004\233\006\236\025\240\063\234\001" +
    "\002\000\004\101\303\001\002\000\004\101\277\001\002" +
    "\000\004\100\276\001\002\000\004\101\272\001\002\000" +
    "\014\004\245\006\247\025\250\063\246\105\251\001\002" +
    "\000\004\101\241\001\002\000\030\021\047\023\041\044" +
    "\026\046\052\053\023\056\044\057\050\074\037\075\051" +
    "\076\032\127\022\001\002\000\034\003\123\021\047\023" +
    "\041\044\026\046\052\053\023\054\243\056\044\057\050" +
    "\074\037\075\051\076\032\127\022\001\002\000\004\100" +
    "\244\001\002\000\014\004\uff3b\006\uff3b\025\uff3b\063\uff3b" +
    "\105\uff3b\001\002\000\004\101\266\001\002\000\004\101" +
    "\262\001\002\000\004\101\256\001\002\000\004\101\252" +
    "\001\002\000\040\003\uff48\021\uff48\023\uff48\044\uff48\046" +
    "\uff48\053\uff48\054\uff48\056\uff48\057\uff48\064\uff48\074\uff48" +
    "\075\uff48\076\uff48\105\uff48\127\uff48\001\002\000\030\021" +
    "\047\023\041\044\026\046\052\053\023\056\044\057\050" +
    "\074\037\075\051\076\032\127\022\001\002\000\034\003" +
    "\123\021\047\023\041\044\026\046\052\053\023\054\254" +
    "\056\044\057\050\074\037\075\051\076\032\127\022\001" +
    "\002\000\004\100\255\001\002\000\014\004\uff3c\006\uff3c" +
    "\025\uff3c\063\uff3c\105\uff3c\001\002\000\030\021\047\023" +
    "\041\044\026\046\052\053\023\056\044\057\050\074\037" +
    "\075\051\076\032\127\022\001\002\000\034\003\123\021" +
    "\047\023\041\044\026\046\052\053\023\054\260\056\044" +
    "\057\050\074\037\075\051\076\032\127\022\001\002\000" +
    "\004\100\261\001\002\000\014\004\uff40\006\uff40\025\uff40" +
    "\063\uff40\105\uff40\001\002\000\030\021\047\023\041\044" +
    "\026\046\052\053\023\056\044\057\050\074\037\075\051" +
    "\076\032\127\022\001\002\000\034\003\123\021\047\023" +
    "\041\044\026\046\052\053\023\054\264\056\044\057\050" +
    "\074\037\075\051\076\032\127\022\001\002\000\004\100" +
    "\265\001\002\000\014\004\uff3e\006\uff3e\025\uff3e\063\uff3e" +
    "\105\uff3e\001\002\000\030\021\047\023\041\044\026\046" +
    "\052\053\023\056\044\057\050\074\037\075\051\076\032" +
    "\127\022\001\002\000\034\003\123\021\047\023\041\044" +
    "\026\046\052\053\023\054\270\056\044\057\050\074\037" +
    "\075\051\076\032\127\022\001\002\000\004\100\271\001" +
    "\002\000\014\004\uff42\006\uff42\025\uff42\063\uff42\105\uff42" +
    "\001\002\000\030\021\047\023\041\044\026\046\052\053" +
    "\023\056\044\057\050\074\037\075\051\076\032\127\022" +
    "\001\002\000\034\003\123\021\047\023\041\044\026\046" +
    "\052\053\023\054\274\056\044\057\050\074\037\075\051" +
    "\076\032\127\022\001\002\000\004\100\275\001\002\000" +
    "\014\004\uff3f\006\uff3f\025\uff3f\063\uff3f\105\uff3f\001\002" +
    "\000\014\004\uff3a\006\uff3a\025\uff3a\063\uff3a\105\uff3a\001" +
    "\002\000\030\021\047\023\041\044\026\046\052\053\023" +
    "\056\044\057\050\074\037\075\051\076\032\127\022\001" +
    "\002\000\034\003\123\021\047\023\041\044\026\046\052" +
    "\053\023\054\301\056\044\057\050\074\037\075\051\076" +
    "\032\127\022\001\002\000\004\100\302\001\002\000\014" +
    "\004\uff3d\006\uff3d\025\uff3d\063\uff3d\105\uff3d\001\002\000" +
    "\030\021\047\023\041\044\026\046\052\053\023\056\044" +
    "\057\050\074\037\075\051\076\032\127\022\001\002\000" +
    "\034\003\123\021\047\023\041\044\026\046\052\053\023" +
    "\054\305\056\044\057\050\074\037\075\051\076\032\127" +
    "\022\001\002\000\004\100\306\001\002\000\014\004\uff41" +
    "\006\uff41\025\uff41\063\uff41\105\uff41\001\002\000\004\103" +
    "\327\001\002\000\006\103\316\104\315\001\002\000\004" +
    "\104\312\001\002\000\014\003\235\004\233\006\236\025" +
    "\240\063\234\001\002\000\014\004\245\006\247\025\250" +
    "\063\246\105\314\001\002\000\040\003\uff47\021\uff47\023" +
    "\uff47\044\uff47\046\uff47\053\uff47\054\uff47\056\uff47\057\uff47" +
    "\064\uff47\074\uff47\075\uff47\076\uff47\105\uff47\127\uff47\001" +
    "\002\000\014\003\235\004\233\006\236\025\240\063\234" +
    "\001\002\000\016\003\235\004\233\006\236\025\240\063" +
    "\234\104\317\001\002\000\016\003\235\004\233\006\236" +
    "\025\240\063\234\105\323\001\002\000\014\004\245\006" +
    "\247\025\250\063\246\105\321\001\002\000\040\003\uff44" +
    "\021\uff44\023\uff44\044\uff44\046\uff44\053\uff44\054\uff44\056" +
    "\uff44\057\uff44\064\uff44\074\uff44\075\uff44\076\uff44\105\uff44" +
    "\127\uff44\001\002\000\014\004\245\006\247\025\250\063" +
    "\246\105\324\001\002\000\040\003\uff43\021\uff43\023\uff43" +
    "\044\uff43\046\uff43\053\uff43\054\uff43\056\uff43\057\uff43\064" +
    "\uff43\074\uff43\075\uff43\076\uff43\105\uff43\127\uff43\001\002" +
    "\000\040\003\uff49\021\uff49\023\uff49\044\uff49\046\uff49\053" +
    "\uff49\054\uff49\056\uff49\057\uff49\064\uff49\074\uff49\075\uff49" +
    "\076\uff49\105\uff49\127\uff49\001\002\000\014\004\245\006" +
    "\247\025\250\063\246\105\326\001\002\000\040\003\uff46" +
    "\021\uff46\023\uff46\044\uff46\046\uff46\053\uff46\054\uff46\056" +
    "\uff46\057\uff46\064\uff46\074\uff46\075\uff46\076\uff46\105\uff46" +
    "\127\uff46\001\002\000\004\104\330\001\002\000\014\003" +
    "\235\004\233\006\236\025\240\063\234\001\002\000\014" +
    "\004\245\006\247\025\250\063\246\105\332\001\002\000" +
    "\040\003\uff45\021\uff45\023\uff45\044\uff45\046\uff45\053\uff45" +
    "\054\uff45\056\uff45\057\uff45\064\uff45\074\uff45\075\uff45\076" +
    "\uff45\105\uff45\127\uff45\001\002\000\016\004\066\025\072" +
    "\063\067\076\073\103\352\125\350\001\002\000\006\103" +
    "\336\125\335\001\002\000\012\046\052\074\037\075\051" +
    "\076\032\001\002\000\012\046\052\074\037\075\051\076" +
    "\032\001\002\000\040\003\uff7d\021\uff7d\023\uff7d\044\uff7d" +
    "\046\uff7d\053\uff7d\054\uff7d\056\uff7d\057\uff7d\064\uff7d\074" +
    "\uff7d\075\uff7d\076\uff7d\105\uff7d\127\uff7d\001\002\000\004" +
    "\103\341\001\002\000\004\104\342\001\002\000\004\024" +
    "\343\001\002\000\004\102\344\001\002\000\012\046\052" +
    "\074\037\075\051\076\032\001\002\000\004\103\346\001" +
    "\002\000\004\105\347\001\002\000\040\003\uff79\021\uff79" +
    "\023\uff79\044\uff79\046\uff79\053\uff79\054\uff79\056\uff79\057" +
    "\uff79\064\uff79\074\uff79\075\uff79\076\uff79\105\uff79\127\uff79" +
    "\001\002\000\012\046\052\074\037\075\051\076\032\001" +
    "\002\000\016\046\052\074\037\075\051\076\032\103\355" +
    "\125\354\001\002\000\012\046\052\074\037\075\051\076" +
    "\032\001\002\000\040\003\uff7c\021\uff7c\023\uff7c\044\uff7c" +
    "\046\uff7c\053\uff7c\054\uff7c\056\uff7c\057\uff7c\064\uff7c\074" +
    "\uff7c\075\uff7c\076\uff7c\105\uff7c\127\uff7c\001\002\000\014" +
    "\046\052\074\037\075\051\076\032\103\367\001\002\000" +
    "\012\046\052\074\037\075\051\076\032\001\002\000\042" +
    "\003\uff7b\021\uff7b\023\uff7b\044\uff7b\046\uff7b\053\uff7b\054" +
    "\uff7b\056\uff7b\057\uff7b\064\uff7b\074\uff7b\075\uff7b\076\uff7b" +
    "\103\357\105\uff7b\127\uff7b\001\002\000\004\104\360\001" +
    "\002\000\004\024\361\001\002\000\004\102\362\001\002" +
    "\000\012\046\052\074\037\075\051\076\032\001\002\000" +
    "\004\103\364\001\002\000\004\105\365\001\002\000\040" +
    "\003\uff77\021\uff77\023\uff77\044\uff77\046\uff77\053\uff77\054" +
    "\uff77\056\uff77\057\uff77\064\uff77\074\uff77\075\uff77\076\uff77" +
    "\105\uff77\127\uff77\001\002\000\040\003\uff7e\021\uff7e\023" +
    "\uff7e\044\uff7e\046\uff7e\053\uff7e\054\uff7e\056\uff7e\057\uff7e" +
    "\064\uff7e\074\uff7e\075\uff7e\076\uff7e\105\uff7e\127\uff7e\001" +
    "\002\000\004\104\u0115\001\002\000\006\103\372\104\371" +
    "\001\002\000\004\024\u0110\001\002\000\006\024\374\104" +
    "\373\001\002\000\006\024\u0102\102\u0101\001\002\000\004" +
    "\102\375\001\002\000\012\046\052\074\037\075\051\076" +
    "\032\001\002\000\004\103\377\001\002\000\004\105\u0100" +
    "\001\002\000\040\003\uff74\021\uff74\023\uff74\044\uff74\046" +
    "\uff74\053\uff74\054\uff74\056\uff74\057\uff74\064\uff74\074\uff74" +
    "\075\uff74\076\uff74\105\uff74\127\uff74\001\002\000\012\046" +
    "\052\074\037\075\051\076\032\001\002\000\014\046\052" +
    "\074\037\075\051\076\032\102\u0103\001\002\000\014\046" +
    "\052\074\037\075\051\076\032\103\u0107\001\002\000\004" +
    "\103\u0105\001\002\000\004\105\u0106\001\002\000\040\003" +
    "\uff72\021\uff72\023\uff72\044\uff72\046\uff72\053\uff72\054\uff72" +
    "\056\uff72\057\uff72\064\uff72\074\uff72\075\uff72\076\uff72\105" +
    "\uff72\127\uff72\001\002\000\004\105\u010c\001\002\000\006" +
    "\103\u0109\105\u010a\001\002\000\004\105\u010b\001\002\000" +
    "\040\003\uff70\021\uff70\023\uff70\044\uff70\046\uff70\053\uff70" +
    "\054\uff70\056\uff70\057\uff70\064\uff70\074\uff70\075\uff70\076" +
    "\uff70\105\uff70\127\uff70\001\002\000\040\003\uff7a\021\uff7a" +
    "\023\uff7a\044\uff7a\046\uff7a\053\uff7a\054\uff7a\056\uff7a\057" +
    "\uff7a\064\uff7a\074\uff7a\075\uff7a\076\uff7a\105\uff7a\127\uff7a" +
    "\001\002\000\040\003\uff71\021\uff71\023\uff71\044\uff71\046" +
    "\uff71\053\uff71\054\uff71\056\uff71\057\uff71\064\uff71\074\uff71" +
    "\075\uff71\076\uff71\105\uff71\127\uff71\001\002\000\004\103" +
    "\u010e\001\002\000\004\105\u010f\001\002\000\040\003\uff73" +
    "\021\uff73\023\uff73\044\uff73\046\uff73\053\uff73\054\uff73\056" +
    "\uff73\057\uff73\064\uff73\074\uff73\075\uff73\076\uff73\105\uff73" +
    "\127\uff73\001\002\000\004\102\u0111\001\002\000\012\046" +
    "\052\074\037\075\051\076\032\001\002\000\004\103\u0113" +
    "\001\002\000\004\105\u0114\001\002\000\040\003\uff75\021" +
    "\uff75\023\uff75\044\uff75\046\uff75\053\uff75\054\uff75\056\uff75" +
    "\057\uff75\064\uff75\074\uff75\075\uff75\076\uff75\105\uff75\127" +
    "\uff75\001\002\000\004\024\u0116\001\002\000\004\102\u0117" +
    "\001\002\000\012\046\052\074\037\075\051\076\032\001" +
    "\002\000\004\103\u0119\001\002\000\004\105\u011a\001\002" +
    "\000\040\003\uff76\021\uff76\023\uff76\044\uff76\046\uff76\053" +
    "\uff76\054\uff76\056\uff76\057\uff76\064\uff76\074\uff76\075\uff76" +
    "\076\uff76\105\uff76\127\uff76\001\002\000\004\103\u011c\001" +
    "\002\000\004\104\u011d\001\002\000\004\024\u011e\001\002" +
    "\000\004\102\u011f\001\002\000\012\046\052\074\037\075" +
    "\051\076\032\001\002\000\004\103\u0121\001\002\000\004" +
    "\105\u0122\001\002\000\040\003\uff78\021\uff78\023\uff78\044" +
    "\uff78\046\uff78\053\uff78\054\uff78\056\uff78\057\uff78\064\uff78" +
    "\074\uff78\075\uff78\076\uff78\105\uff78\127\uff78\001\002\000" +
    "\044\003\uffb6\021\uffb6\023\uffb6\044\uffb6\046\uffb6\053\uffb6" +
    "\054\uffb6\056\uffb6\057\uffb6\064\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\103\uffb6\104\uffb6\105\uffb6\127\uffb6\001\002\000\006" +
    "\003\u0125\100\u0126\001\002\000\044\003\uffb7\021\uffb7\023" +
    "\uffb7\044\uffb7\046\uffb7\053\uffb7\054\uffb7\056\uffb7\057\uffb7" +
    "\064\uffb7\074\uffb7\075\uffb7\076\uffb7\103\uffb7\104\uffb7\105" +
    "\uffb7\127\uffb7\001\002\000\044\003\uffb8\021\uffb8\023\uffb8" +
    "\044\uffb8\046\uffb8\053\uffb8\054\uffb8\056\uffb8\057\uffb8\064" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\103\uffb8\104\uffb8\105\uffb8" +
    "\127\uffb8\001\002\000\016\100\uffd0\103\uffd0\112\uffd0\113" +
    "\uffd0\114\uffd0\115\uffd0\001\002\000\014\003\u014d\007\u0150" +
    "\030\u014e\052\u014c\126\u014f\001\002\000\012\004\u0131\005" +
    "\u0127\076\u012f\102\u0129\001\002\000\024\003\u0143\004\u0131" +
    "\005\u0127\006\u013f\025\u0142\063\u0141\076\u012f\100\u0140\102" +
    "\u0129\001\002\000\004\100\u013e\001\002\000\016\100\uffd3" +
    "\103\uffd3\112\uffd3\113\uffd3\114\uffd3\115\uffd3\001\002\000" +
    "\004\100\u013d\001\002\000\004\100\u013c\001\002\000\016" +
    "\100\uffcf\103\uffcf\112\uffcf\113\uffcf\114\uffcf\115\uffcf\001" +
    "\002\000\016\100\uffd6\103\uffd6\112\uffd6\113\uffd6\114\u0137" +
    "\115\u0138\001\002\000\016\100\uffd1\103\uffd1\112\uffd1\113" +
    "\uffd1\114\uffd1\115\uffd1\001\002\000\010\100\u0133\112\u0135" +
    "\113\u0134\001\002\000\044\003\uffda\021\uffda\023\uffda\044" +
    "\uffda\046\uffda\053\uffda\054\uffda\056\uffda\057\uffda\064\uffda" +
    "\074\uffda\075\uffda\076\uffda\103\uffda\104\uffda\105\uffda\127" +
    "\uffda\001\002\000\012\004\u0131\005\u0127\076\u012f\102\u0129" +
    "\001\002\000\012\004\u0131\005\u0127\076\u012f\102\u0129\001" +
    "\002\000\016\100\uffd8\103\uffd8\112\uffd8\113\uffd8\114\u0137" +
    "\115\u0138\001\002\000\012\004\u0131\005\u0127\076\u012f\102" +
    "\u0129\001\002\000\012\004\u0131\005\u0127\076\u012f\102\u0129" +
    "\001\002\000\016\100\uffd4\103\uffd4\112\uffd4\113\uffd4\114" +
    "\uffd4\115\uffd4\001\002\000\016\100\uffd5\103\uffd5\112\uffd5" +
    "\113\uffd5\114\uffd5\115\uffd5\001\002\000\016\100\uffd7\103" +
    "\uffd7\112\uffd7\113\uffd7\114\u0137\115\u0138\001\002\000\044" +
    "\003\uffdb\021\uffdb\023\uffdb\044\uffdb\046\uffdb\053\uffdb\054" +
    "\uffdb\056\uffdb\057\uffdb\064\uffdb\074\uffdb\075\uffdb\076\uffdb" +
    "\103\uffdb\104\uffdb\105\uffdb\127\uffdb\001\002\000\044\003" +
    "\uffdc\021\uffdc\023\uffdc\044\uffdc\046\uffdc\053\uffdc\054\uffdc" +
    "\056\uffdc\057\uffdc\064\uffdc\074\uffdc\075\uffdc\076\uffdc\103" +
    "\uffdc\104\uffdc\105\uffdc\127\uffdc\001\002\000\044\003\uffdd" +
    "\021\uffdd\023\uffdd\044\uffdd\046\uffdd\053\uffdd\054\uffdd\056" +
    "\uffdd\057\uffdd\064\uffdd\074\uffdd\075\uffdd\076\uffdd\103\uffdd" +
    "\104\uffdd\105\uffdd\127\uffdd\001\002\000\004\100\u0149\001" +
    "\002\000\044\003\uffde\021\uffde\023\uffde\044\uffde\046\uffde" +
    "\053\uffde\054\uffde\056\uffde\057\uffde\064\uffde\074\uffde\075" +
    "\uffde\076\uffde\103\uffde\104\uffde\105\uffde\127\uffde\001\002" +
    "\000\004\100\u0148\001\002\000\004\100\u0147\001\002\000" +
    "\004\100\u0146\001\002\000\010\100\u0145\112\u0135\113\u0134" +
    "\001\002\000\044\003\uffdf\021\uffdf\023\uffdf\044\uffdf\046" +
    "\uffdf\053\uffdf\054\uffdf\056\uffdf\057\uffdf\064\uffdf\074\uffdf" +
    "\075\uffdf\076\uffdf\103\uffdf\104\uffdf\105\uffdf\127\uffdf\001" +
    "\002\000\044\003\uffd9\021\uffd9\023\uffd9\044\uffd9\046\uffd9" +
    "\053\uffd9\054\uffd9\056\uffd9\057\uffd9\064\uffd9\074\uffd9\075" +
    "\uffd9\076\uffd9\103\uffd9\104\uffd9\105\uffd9\127\uffd9\001\002" +
    "\000\044\003\uffe0\021\uffe0\023\uffe0\044\uffe0\046\uffe0\053" +
    "\uffe0\054\uffe0\056\uffe0\057\uffe0\064\uffe0\074\uffe0\075\uffe0" +
    "\076\uffe0\103\uffe0\104\uffe0\105\uffe0\127\uffe0\001\002\000" +
    "\044\003\uffe1\021\uffe1\023\uffe1\044\uffe1\046\uffe1\053\uffe1" +
    "\054\uffe1\056\uffe1\057\uffe1\064\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\103\uffe1\104\uffe1\105\uffe1\127\uffe1\001\002\000\044" +
    "\003\uffe2\021\uffe2\023\uffe2\044\uffe2\046\uffe2\053\uffe2\054" +
    "\uffe2\056\uffe2\057\uffe2\064\uffe2\074\uffe2\075\uffe2\076\uffe2" +
    "\103\uffe2\104\uffe2\105\uffe2\127\uffe2\001\002\000\010\103" +
    "\u014b\112\u0135\113\u0134\001\002\000\016\100\uffd2\103\uffd2" +
    "\112\uffd2\113\uffd2\114\uffd2\115\uffd2\001\002\000\006\100" +
    "\u0168\124\u0167\001\002\000\004\100\u0166\001\002\000\004" +
    "\124\u0158\001\002\000\004\102\u0152\001\002\000\004\100" +
    "\u0151\001\002\000\044\003\uffaa\021\uffaa\023\uffaa\044\uffaa" +
    "\046\uffaa\053\uffaa\054\uffaa\056\uffaa\057\uffaa\064\uffaa\074" +
    "\uffaa\075\uffaa\076\uffaa\103\uffaa\104\uffaa\105\uffaa\127\uffaa" +
    "\001\002\000\006\006\u0154\076\u0155\001\002\000\004\103" +
    "\u0156\001\002\000\004\103\uff9f\001\002\000\004\103\uff9e" +
    "\001\002\000\004\100\u0157\001\002\000\044\003\uffa5\021" +
    "\uffa5\023\uffa5\044\uffa5\046\uffa5\053\uffa5\054\uffa5\056\uffa5" +
    "\057\uffa5\064\uffa5\074\uffa5\075\uffa5\076\uffa5\103\uffa5\104" +
    "\uffa5\105\uffa5\127\uffa5\001\002\000\006\014\u015a\040\u015b" +
    "\001\002\000\006\100\u015d\102\u015c\001\002\000\006\100" +
    "\uffbc\102\uffbc\001\002\000\006\100\uffbd\102\uffbd\001\002" +
    "\000\010\003\u015e\076\u015f\077\u0161\001\002\000\044\003" +
    "\uffa8\021\uffa8\023\uffa8\044\uffa8\046\uffa8\053\uffa8\054\uffa8" +
    "\056\uffa8\057\uffa8\064\uffa8\074\uffa8\075\uffa8\076\uffa8\103" +
    "\uffa8\104\uffa8\105\uffa8\127\uffa8\001\002\000\004\103\u0164" +
    "\001\002\000\004\103\uffa0\001\002\000\004\103\u0162\001" +
    "\002\000\004\103\uffa1\001\002\000\004\100\u0163\001\002" +
    "\000\044\003\uffa7\021\uffa7\023\uffa7\044\uffa7\046\uffa7\053" +
    "\uffa7\054\uffa7\056\uffa7\057\uffa7\064\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\103\uffa7\104\uffa7\105\uffa7\127\uffa7\001\002\000" +
    "\004\100\u0165\001\002\000\044\003\uffa6\021\uffa6\023\uffa6" +
    "\044\uffa6\046\uffa6\053\uffa6\054\uffa6\056\uffa6\057\uffa6\064" +
    "\uffa6\074\uffa6\075\uffa6\076\uffa6\103\uffa6\104\uffa6\105\uffa6" +
    "\127\uffa6\001\002\000\044\003\uffac\021\uffac\023\uffac\044" +
    "\uffac\046\uffac\053\uffac\054\uffac\056\uffac\057\uffac\064\uffac" +
    "\074\uffac\075\uffac\076\uffac\103\uffac\104\uffac\105\uffac\127" +
    "\uffac\001\002\000\010\130\u016c\131\u016a\132\u016b\001\002" +
    "\000\044\003\uffab\021\uffab\023\uffab\044\uffab\046\uffab\053" +
    "\uffab\054\uffab\056\uffab\057\uffab\064\uffab\074\uffab\075\uffab" +
    "\076\uffab\103\uffab\104\uffab\105\uffab\127\uffab\001\002\000" +
    "\004\100\u016d\001\002\000\004\100\uffa3\001\002\000\004" +
    "\100\uffa2\001\002\000\004\100\uffa4\001\002\000\044\003" +
    "\uffa9\021\uffa9\023\uffa9\044\uffa9\046\uffa9\053\uffa9\054\uffa9" +
    "\056\uffa9\057\uffa9\064\uffa9\074\uffa9\075\uffa9\076\uffa9\103" +
    "\uffa9\104\uffa9\105\uffa9\127\uffa9\001\002\000\014\004\066" +
    "\025\072\063\067\076\073\103\u0177\001\002\000\004\103" +
    "\u0172\001\002\000\004\105\u0171\001\002\000\040\003\uff5a" +
    "\021\uff5a\023\uff5a\044\uff5a\046\uff5a\053\uff5a\054\uff5a\056" +
    "\uff5a\057\uff5a\064\uff5a\074\uff5a\075\uff5a\076\uff5a\105\uff5a" +
    "\127\uff5a\001\002\000\004\104\u0173\001\002\000\030\021" +
    "\047\023\041\044\026\046\052\053\023\056\044\057\050" +
    "\074\037\075\051\076\032\127\022\001\002\000\034\003" +
    "\123\021\047\023\041\044\026\046\052\053\023\056\044" +
    "\057\050\074\037\075\051\076\032\105\u0175\127\022\001" +
    "\002\000\040\003\uff5f\021\uff5f\023\uff5f\044\uff5f\046\uff5f" +
    "\053\uff5f\054\uff5f\056\uff5f\057\uff5f\064\uff5f\074\uff5f\075" +
    "\uff5f\076\uff5f\105\uff5f\127\uff5f\001\002\000\006\103\u017c" +
    "\104\u017b\001\002\000\004\104\u0178\001\002\000\030\021" +
    "\047\023\041\044\026\046\052\053\023\056\044\057\050" +
    "\074\037\075\051\076\032\127\022\001\002\000\034\003" +
    "\123\021\047\023\041\044\026\046\052\053\023\056\044" +
    "\057\050\074\037\075\051\076\032\105\u017a\127\022\001" +
    "\002\000\040\003\uff5e\021\uff5e\023\uff5e\044\uff5e\046\uff5e" +
    "\053\uff5e\054\uff5e\056\uff5e\057\uff5e\064\uff5e\074\uff5e\075" +
    "\uff5e\076\uff5e\105\uff5e\127\uff5e\001\002\000\030\021\047" +
    "\023\041\044\026\046\052\053\023\056\044\057\050\074" +
    "\037\075\051\076\032\127\022\001\002\000\032\021\047" +
    "\023\041\044\026\046\052\053\023\056\044\057\050\074" +
    "\037\075\051\076\032\104\u017e\127\022\001\002\000\034" +
    "\003\123\021\047\023\041\044\026\046\052\053\023\056" +
    "\044\057\050\074\037\075\051\076\032\105\u0182\127\022" +
    "\001\002\000\032\021\047\023\041\044\026\046\052\053" +
    "\023\056\044\057\050\074\037\075\051\076\032\105\u0180" +
    "\127\022\001\002\000\034\003\123\021\047\023\041\044" +
    "\026\046\052\053\023\056\044\057\050\074\037\075\051" +
    "\076\032\105\u0181\127\022\001\002\000\040\003\uff5b\021" +
    "\uff5b\023\uff5b\044\uff5b\046\uff5b\053\uff5b\054\uff5b\056\uff5b" +
    "\057\uff5b\064\uff5b\074\uff5b\075\uff5b\076\uff5b\105\uff5b\127" +
    "\uff5b\001\002\000\040\003\uff60\021\uff60\023\uff60\044\uff60" +
    "\046\uff60\053\uff60\054\uff60\056\uff60\057\uff60\064\uff60\074" +
    "\uff60\075\uff60\076\uff60\105\uff60\127\uff60\001\002\000\040" +
    "\003\uff5c\021\uff5c\023\uff5c\044\uff5c\046\uff5c\053\uff5c\054" +
    "\uff5c\056\uff5c\057\uff5c\064\uff5c\074\uff5c\075\uff5c\076\uff5c" +
    "\105\uff5c\127\uff5c\001\002\000\034\003\123\021\047\023" +
    "\041\044\026\046\052\053\023\056\044\057\050\074\037" +
    "\075\051\076\032\105\u0184\127\022\001\002\000\040\003" +
    "\uff5d\021\uff5d\023\uff5d\044\uff5d\046\uff5d\053\uff5d\054\uff5d" +
    "\056\uff5d\057\uff5d\064\uff5d\074\uff5d\075\uff5d\076\uff5d\105" +
    "\uff5d\127\uff5d\001\002\000\004\026\uffbb\001\002\000\006" +
    "\062\uff36\104\uff36\001\002\000\004\104\u019a\001\002\000" +
    "\004\104\u0197\001\002\000\006\062\uff37\104\uff37\001\002" +
    "\000\006\062\u018c\104\u018b\001\002\000\030\021\047\023" +
    "\041\044\026\046\052\053\023\056\044\057\050\074\037" +
    "\075\051\076\032\127\022\001\002\000\032\021\047\023" +
    "\041\044\026\046\052\053\023\056\044\057\050\074\037" +
    "\075\051\076\032\104\u018e\127\022\001\002\000\034\003" +
    "\123\021\047\023\041\044\026\046\052\053\023\056\044" +
    "\057\050\074\037\075\051\076\032\105\u0194\127\022\001" +
    "\002\000\034\003\u0190\021\047\023\041\044\026\046\052" +
    "\053\023\056\044\057\050\074\037\075\051\076\032\105" +
    "\u0191\127\022\001\002\000\034\003\123\021\047\023\041" +
    "\044\026\046\052\053\023\056\044\057\050\074\037\075" +
    "\051\076\032\105\u0193\127\022\001\002\000\004\105\u0192" +
    "\001\002\000\040\003\uff6b\021\uff6b\023\uff6b\044\uff6b\046" +
    "\uff6b\053\uff6b\054\uff6b\056\uff6b\057\uff6b\064\uff6b\074\uff6b" +
    "\075\uff6b\076\uff6b\105\uff6b\127\uff6b\001\002\000\040\003" +
    "\uff6a\021\uff6a\023\uff6a\044\uff6a\046\uff6a\053\uff6a\054\uff6a" +
    "\056\uff6a\057\uff6a\064\uff6a\074\uff6a\075\uff6a\076\uff6a\105" +
    "\uff6a\127\uff6a\001\002\000\040\003\uff6f\021\uff6f\023\uff6f" +
    "\044\uff6f\046\uff6f\053\uff6f\054\uff6f\056\uff6f\057\uff6f\064" +
    "\uff6f\074\uff6f\075\uff6f\076\uff6f\105\uff6f\127\uff6f\001\002" +
    "\000\040\003\uff6c\021\uff6c\023\uff6c\044\uff6c\046\uff6c\053" +
    "\uff6c\054\uff6c\056\uff6c\057\uff6c\064\uff6c\074\uff6c\075\uff6c" +
    "\076\uff6c\105\uff6c\127\uff6c\001\002\000\034\003\123\021" +
    "\047\023\041\044\026\046\052\053\023\056\044\057\050" +
    "\074\037\075\051\076\032\105\u0196\127\022\001\002\000" +
    "\040\003\uff6d\021\uff6d\023\uff6d\044\uff6d\046\uff6d\053\uff6d" +
    "\054\uff6d\056\uff6d\057\uff6d\064\uff6d\074\uff6d\075\uff6d\076" +
    "\uff6d\105\uff6d\127\uff6d\001\002\000\030\021\047\023\041" +
    "\044\026\046\052\053\023\056\044\057\050\074\037\075" +
    "\051\076\032\127\022\001\002\000\034\003\123\021\047" +
    "\023\041\044\026\046\052\053\023\056\044\057\050\074" +
    "\037\075\051\076\032\105\u0199\127\022\001\002\000\040" +
    "\003\uff6e\021\uff6e\023\uff6e\044\uff6e\046\uff6e\053\uff6e\054" +
    "\uff6e\056\uff6e\057\uff6e\064\uff6e\074\uff6e\075\uff6e\076\uff6e" +
    "\105\uff6e\127\uff6e\001\002\000\030\021\047\023\041\044" +
    "\026\046\052\053\023\056\044\057\050\074\037\075\051" +
    "\076\032\127\022\001\002\000\034\003\123\021\047\023" +
    "\041\044\026\046\052\053\023\056\044\057\050\074\037" +
    "\075\051\076\032\105\u019c\127\022\001\002\000\040\003" +
    "\uff69\021\uff69\023\uff69\044\uff69\046\uff69\053\uff69\054\uff69" +
    "\056\uff69\057\uff69\064\uff69\074\uff69\075\uff69\076\uff69\105" +
    "\uff69\127\uff69\001\002\000\014\003\u01ad\076\u01af\103\u01b0" +
    "\111\u01ae\125\u01ac\001\002\000\004\111\u019f\001\002\000" +
    "\004\004\u01a0\001\002\000\004\125\u01a1\001\002\000\006" +
    "\074\u01a4\075\u01a2\001\002\000\004\076\uff34\001\002\000" +
    "\004\076\u01a5\001\002\000\004\076\uff35\001\002\000\004" +
    "\125\u01a6\001\002\000\012\004\066\025\072\063\067\076" +
    "\073\001\002\000\004\103\u01a8\001\002\000\004\104\u01a9" +
    "\001\002\000\030\021\047\023\041\044\026\046\052\053" +
    "\023\056\044\057\050\074\037\075\051\076\032\127\022" +
    "\001\002\000\034\003\123\021\047\023\041\044\026\046" +
    "\052\053\023\056\044\057\050\074\037\075\051\076\032" +
    "\105\u01ab\127\022\001\002\000\040\003\uff58\021\uff58\023" +
    "\uff58\044\uff58\046\uff58\053\uff58\054\uff58\056\uff58\057\uff58" +
    "\064\uff58\074\uff58\075\uff58\076\uff58\105\uff58\127\uff58\001" +
    "\002\000\004\074\u0204\001\002\000\004\125\u01fb\001\002" +
    "\000\004\004\u01f1\001\002\000\006\004\u01b8\111\u01b9\001" +
    "\002\000\006\003\u01b2\104\u01b1\001\002\000\030\021\047" +
    "\023\041\044\026\046\052\053\023\056\044\057\050\074" +
    "\037\075\051\076\032\127\022\001\002\000\004\104\u01b3" +
    "\001\002\000\030\021\047\023\041\044\026\046\052\053" +
    "\023\056\044\057\050\074\037\075\051\076\032\127\022" +
    "\001\002\000\034\003\123\021\047\023\041\044\026\046" +
    "\052\053\023\056\044\057\050\074\037\075\051\076\032" +
    "\105\u01b5\127\022\001\002\000\040\003\uff4c\021\uff4c\023" +
    "\uff4c\044\uff4c\046\uff4c\053\uff4c\054\uff4c\056\uff4c\057\uff4c" +
    "\064\uff4c\074\uff4c\075\uff4c\076\uff4c\105\uff4c\127\uff4c\001" +
    "\002\000\034\003\123\021\047\023\041\044\026\046\052" +
    "\053\023\056\044\057\050\074\037\075\051\076\032\105" +
    "\u01b7\127\022\001\002\000\040\003\uff4d\021\uff4d\023\uff4d" +
    "\044\uff4d\046\uff4d\053\uff4d\054\uff4d\056\uff4d\057\uff4d\064" +
    "\uff4d\074\uff4d\075\uff4d\076\uff4d\105\uff4d\127\uff4d\001\002" +
    "\000\004\125\u01e8\001\002\000\006\004\u01bb\125\u01ba\001" +
    "\002\000\006\074\u01a4\075\u01a2\001\002\000\004\125\u01bc" +
    "\001\002\000\010\003\u01be\074\u01a4\075\u01a2\001\002\000" +
    "\004\076\u01c5\001\002\000\004\125\u01bf\001\002\000\012" +
    "\004\066\025\072\063\067\076\073\001\002\000\004\103" +
    "\u01c1\001\002\000\004\104\u01c2\001\002\000\030\021\047" +
    "\023\041\044\026\046\052\053\023\056\044\057\050\074" +
    "\037\075\051\076\032\127\022\001\002\000\034\003\123" +
    "\021\047\023\041\044\026\046\052\053\023\056\044\057" +
    "\050\074\037\075\051\076\032\105\u01c4\127\022\001\002" +
    "\000\040\003\uff4f\021\uff4f\023\uff4f\044\uff4f\046\uff4f\053" +
    "\uff4f\054\uff4f\056\uff4f\057\uff4f\064\uff4f\074\uff4f\075\uff4f" +
    "\076\uff4f\105\uff4f\127\uff4f\001\002\000\014\004\066\025" +
    "\072\063\067\076\073\125\u01c6\001\002\000\016\003\u01cd" +
    "\004\066\025\072\063\067\076\073\103\u01ce\001\002\000" +
    "\004\103\u01c8\001\002\000\004\104\u01c9\001\002\000\030" +
    "\021\047\023\041\044\026\046\052\053\023\056\044\057" +
    "\050\074\037\075\051\076\032\127\022\001\002\000\034" +
    "\003\123\021\047\023\041\044\026\046\052\053\023\056" +
    "\044\057\050\074\037\075\051\076\032\105\u01cb\127\022" +
    "\001\002\000\040\003\uff53\021\uff53\023\uff53\044\uff53\046" +
    "\uff53\053\uff53\054\uff53\056\uff53\057\uff53\064\uff53\074\uff53" +
    "\075\uff53\076\uff53\105\uff53\127\uff53\001\002\000\006\103" +
    "\u01d7\104\u01d6\001\002\000\004\103\u01d2\001\002\000\004" +
    "\104\u01cf\001\002\000\030\021\047\023\041\044\026\046" +
    "\052\053\023\056\044\057\050\074\037\075\051\076\032" +
    "\127\022\001\002\000\034\003\123\021\047\023\041\044" +
    "\026\046\052\053\023\056\044\057\050\074\037\075\051" +
    "\076\032\105\u01d1\127\022\001\002\000\040\003\uff52\021" +
    "\uff52\023\uff52\044\uff52\046\uff52\053\uff52\054\uff52\056\uff52" +
    "\057\uff52\064\uff52\074\uff52\075\uff52\076\uff52\105\uff52\127" +
    "\uff52\001\002\000\004\104\u01d3\001\002\000\030\021\047" +
    "\023\041\044\026\046\052\053\023\056\044\057\050\074" +
    "\037\075\051\076\032\127\022\001\002\000\034\003\123" +
    "\021\047\023\041\044\026\046\052\053\023\056\044\057" +
    "\050\074\037\075\051\076\032\105\u01d5\127\022\001\002" +
    "\000\040\003\uff4e\021\uff4e\023\uff4e\044\uff4e\046\uff4e\053" +
    "\uff4e\054\uff4e\056\uff4e\057\uff4e\064\uff4e\074\uff4e\075\uff4e" +
    "\076\uff4e\105\uff4e\127\uff4e\001\002\000\030\021\047\023" +
    "\041\044\026\046\052\053\023\056\044\057\050\074\037" +
    "\075\051\076\032\127\022\001\002\000\032\021\047\023" +
    "\041\044\026\046\052\053\023\056\044\057\050\074\037" +
    "\075\051\076\032\104\u01d9\127\022\001\002\000\034\003" +
    "\123\021\047\023\041\044\026\046\052\053\023\056\044" +
    "\057\050\074\037\075\051\076\032\105\u01dd\127\022\001" +
    "\002\000\032\021\047\023\041\044\026\046\052\053\023" +
    "\056\044\057\050\074\037\075\051\076\032\105\u01db\127" +
    "\022\001\002\000\034\003\123\021\047\023\041\044\026" +
    "\046\052\053\023\056\044\057\050\074\037\075\051\076" +
    "\032\105\u01dc\127\022\001\002\000\040\003\uff4a\021\uff4a" +
    "\023\uff4a\044\uff4a\046\uff4a\053\uff4a\054\uff4a\056\uff4a\057" +
    "\uff4a\064\uff4a\074\uff4a\075\uff4a\076\uff4a\105\uff4a\127\uff4a" +
    "\001\002\000\040\003\uff59\021\uff59\023\uff59\044\uff59\046" +
    "\uff59\053\uff59\054\uff59\056\uff59\057\uff59\064\uff59\074\uff59" +
    "\075\uff59\076\uff59\105\uff59\127\uff59\001\002\000\040\003" +
    "\uff4b\021\uff4b\023\uff4b\044\uff4b\046\uff4b\053\uff4b\054\uff4b" +
    "\056\uff4b\057\uff4b\064\uff4b\074\uff4b\075\uff4b\076\uff4b\105" +
    "\uff4b\127\uff4b\001\002\000\034\003\123\021\047\023\041" +
    "\044\026\046\052\053\023\056\044\057\050\074\037\075" +
    "\051\076\032\105\u01df\127\022\001\002\000\040\003\uff51" +
    "\021\uff51\023\uff51\044\uff51\046\uff51\053\uff51\054\uff51\056" +
    "\uff51\057\uff51\064\uff51\074\uff51\075\uff51\076\uff51\105\uff51" +
    "\127\uff51\001\002\000\004\076\u01e1\001\002\000\004\125" +
    "\u01e2\001\002\000\012\004\066\025\072\063\067\076\073" +
    "\001\002\000\004\103\u01e4\001\002\000\004\104\u01e5\001" +
    "\002\000\030\021\047\023\041\044\026\046\052\053\023" +
    "\056\044\057\050\074\037\075\051\076\032\127\022\001" +
    "\002\000\034\003\123\021\047\023\041\044\026\046\052" +
    "\053\023\056\044\057\050\074\037\075\051\076\032\105" +
    "\u01e7\127\022\001\002\000\040\003\uff55\021\uff55\023\uff55" +
    "\044\uff55\046\uff55\053\uff55\054\uff55\056\uff55\057\uff55\064" +
    "\uff55\074\uff55\075\uff55\076\uff55\105\uff55\127\uff55\001\002" +
    "\000\006\074\u01a4\075\u01a2\001\002\000\004\076\u01ea\001" +
    "\002\000\004\125\u01eb\001\002\000\012\004\066\025\072" +
    "\063\067\076\073\001\002\000\004\103\u01ed\001\002\000" +
    "\004\104\u01ee\001\002\000\030\021\047\023\041\044\026" +
    "\046\052\053\023\056\044\057\050\074\037\075\051\076" +
    "\032\127\022\001\002\000\034\003\123\021\047\023\041" +
    "\044\026\046\052\053\023\056\044\057\050\074\037\075" +
    "\051\076\032\105\u01f0\127\022\001\002\000\040\003\uff56" +
    "\021\uff56\023\uff56\044\uff56\046\uff56\053\uff56\054\uff56\056" +
    "\uff56\057\uff56\064\uff56\074\uff56\075\uff56\076\uff56\105\uff56" +
    "\127\uff56\001\002\000\004\125\u01f2\001\002\000\006\074" +
    "\u01a4\075\u01a2\001\002\000\004\076\u01f4\001\002\000\004" +
    "\125\u01f5\001\002\000\012\004\066\025\072\063\067\076" +
    "\073\001\002\000\004\103\u01f7\001\002\000\004\104\u01f8" +
    "\001\002\000\030\021\047\023\041\044\026\046\052\053" +
    "\023\056\044\057\050\074\037\075\051\076\032\127\022" +
    "\001\002\000\034\003\123\021\047\023\041\044\026\046" +
    "\052\053\023\056\044\057\050\074\037\075\051\076\032" +
    "\105\u01fa\127\022\001\002\000\040\003\uff57\021\uff57\023" +
    "\uff57\044\uff57\046\uff57\053\uff57\054\uff57\056\uff57\057\uff57" +
    "\064\uff57\074\uff57\075\uff57\076\uff57\105\uff57\127\uff57\001" +
    "\002\000\006\074\u01a4\075\u01a2\001\002\000\004\076\u01fd" +
    "\001\002\000\004\125\u01fe\001\002\000\012\004\066\025" +
    "\072\063\067\076\073\001\002\000\004\103\u0200\001\002" +
    "\000\004\104\u0201\001\002\000\030\021\047\023\041\044" +
    "\026\046\052\053\023\056\044\057\050\074\037\075\051" +
    "\076\032\127\022\001\002\000\034\003\123\021\047\023" +
    "\041\044\026\046\052\053\023\056\044\057\050\074\037" +
    "\075\051\076\032\105\u0203\127\022\001\002\000\040\003" +
    "\uff50\021\uff50\023\uff50\044\uff50\046\uff50\053\uff50\054\uff50" +
    "\056\uff50\057\uff50\064\uff50\074\uff50\075\uff50\076\uff50\105" +
    "\uff50\127\uff50\001\002\000\004\076\u0205\001\002\000\004" +
    "\125\u0206\001\002\000\012\004\066\025\072\063\067\076" +
    "\073\001\002\000\004\103\u0208\001\002\000\004\104\u0209" +
    "\001\002\000\030\021\047\023\041\044\026\046\052\053" +
    "\023\056\044\057\050\074\037\075\051\076\032\127\022" +
    "\001\002\000\034\003\123\021\047\023\041\044\026\046" +
    "\052\053\023\056\044\057\050\074\037\075\051\076\032" +
    "\105\u020b\127\022\001\002\000\040\003\uff54\021\uff54\023" +
    "\uff54\044\uff54\046\uff54\053\uff54\054\uff54\056\uff54\057\uff54" +
    "\064\uff54\074\uff54\075\uff54\076\uff54\105\uff54\127\uff54\001" +
    "\002\000\034\003\123\021\047\023\041\044\026\046\052" +
    "\053\023\056\044\057\050\064\u020d\074\037\075\051\076" +
    "\032\127\022\001\002\000\004\026\uffb9\001\002\000\004" +
    "\002\000\001\002\000\006\013\u0212\027\u0238\001\002\000" +
    "\004\100\u0237\001\002\000\006\027\u0235\100\u0236\001\002" +
    "\000\004\076\u0215\001\002\000\004\100\u0214\001\002\000" +
    "\006\013\ufff4\027\ufff4\001\002\000\004\012\u0216\001\002" +
    "\000\026\015\u021c\041\u0220\047\u0218\061\u021f\065\u021a\066" +
    "\u021d\067\u021b\070\u0217\133\u0219\134\u021e\001\002\000\006" +
    "\100\ufff0\111\u0232\001\002\000\004\100\uffed\001\002\000" +
    "\004\106\u022f\001\002\000\006\100\ufff1\111\u022d\001\002" +
    "\000\006\100\uffef\111\u022b\001\002\000\004\100\uffee\001" +
    "\002\000\006\100\ufff2\111\u0229\001\002\000\004\106\u0223" +
    "\001\002\000\006\100\uffeb\111\u0221\001\002\000\004\100" +
    "\uffec\001\002\000\004\077\u0222\001\002\000\004\100\uffe3" +
    "\001\002\000\004\004\u0224\001\002\000\004\107\u0225\001" +
    "\002\000\004\106\u0226\001\002\000\004\004\u0227\001\002" +
    "\000\004\107\u0228\001\002\000\004\100\uffe9\001\002\000" +
    "\004\004\u022a\001\002\000\004\100\uffe8\001\002\000\004" +
    "\006\u022c\001\002\000\004\100\uffe4\001\002\000\004\005" +
    "\u022e\001\002\000\004\100\uffe7\001\002\000\004\004\u0230" +
    "\001\002\000\004\107\u0231\001\002\000\004\100\uffea\001" +
    "\002\000\006\025\u0234\063\u0233\001\002\000\004\100\uffe6" +
    "\001\002\000\004\100\uffe5\001\002\000\006\003\ufff8\010" +
    "\ufff8\001\002\000\006\013\ufff3\027\ufff3\001\002\000\006" +
    "\013\ufff6\027\ufff6\001\002\000\006\003\ufffb\010\ufffb\001" +
    "\002\000\004\100\u023c\001\002\000\004\100\u023b\001\002" +
    "\000\006\013\ufff5\027\ufff5\001\002\000\006\013\ufff7\027" +
    "\ufff7\001\002\000\006\013\u0212\027\u023f\001\002\000\004" +
    "\100\u0236\001\002\000\004\036\ufffa\001\002\000\004\036" +
    "\u0241\001\002\000\004\027\u0242\001\002\000\006\003\ufff9" +
    "\010\ufff9\001\002\000\006\003\ufffc\036\ufffc\001\002\000" +
    "\006\003\ufffd\036\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0242\000\006\002\006\047\004\001\001\000\002\001" +
    "\001\000\004\003\014\001\001\000\004\054\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u023c\007\u020f\010\u0212\001\001" +
    "\000\010\005\u020e\007\u020f\010\u0212\001\001\000\004\004" +
    "\015\001\001\000\002\001\001\000\036\012\034\025\035" +
    "\026\044\032\u020b\033\020\035\033\036\026\037\027\040" +
    "\037\041\045\043\041\044\030\050\023\051\042\001\001" +
    "\000\036\012\034\025\035\026\044\032\024\033\020\035" +
    "\033\036\026\037\027\040\037\041\045\043\041\044\030" +
    "\050\023\051\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0189\001\001\000\002\001\001\000\034" +
    "\012\117\025\120\026\044\033\113\035\116\036\114\037" +
    "\115\040\121\041\123\043\041\044\030\050\023\051\042" +
    "\001\001\000\004\016\u016e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\u0131\014\u012f" +
    "\015\u012b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\165\001\001\000\004\016\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\161\001\001\000\002\001\001\000\004" +
    "\016\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\034" +
    "\025\035\026\044\032\112\033\020\035\033\036\026\037" +
    "\027\040\037\041\045\043\041\044\030\050\023\051\042" +
    "\001\001\000\034\012\117\025\120\026\044\033\113\035" +
    "\116\036\114\037\115\040\121\041\123\043\041\044\030" +
    "\050\023\051\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\034\025\035\026" +
    "\044\032\131\033\020\035\033\036\026\037\027\040\037" +
    "\041\045\043\041\044\030\050\023\051\042\001\001\000" +
    "\034\012\117\025\120\026\044\033\113\035\116\036\114" +
    "\037\115\040\121\041\123\043\041\044\030\050\023\051" +
    "\042\001\001\000\002\001\001\000\036\012\034\025\035" +
    "\026\044\032\155\033\020\035\033\036\026\037\027\040" +
    "\037\041\045\043\041\044\030\050\023\051\042\001\001" +
    "\000\036\012\034\025\035\026\044\032\135\033\020\035" +
    "\033\036\026\037\027\040\037\041\045\043\041\044\030" +
    "\050\023\051\042\001\001\000\034\012\117\025\120\026" +
    "\044\033\113\035\116\036\114\037\115\040\121\041\123" +
    "\043\041\044\030\050\023\051\042\001\001\000\002\001" +
    "\001\000\036\012\034\025\035\026\044\032\140\033\020" +
    "\035\033\036\026\037\027\040\037\041\045\043\041\044" +
    "\030\050\023\051\042\001\001\000\034\012\117\025\120" +
    "\026\044\033\113\035\116\036\114\037\115\040\121\041" +
    "\123\043\041\044\030\050\023\051\042\001\001\000\002" +
    "\001\001\000\036\012\034\025\035\026\044\032\151\033" +
    "\020\035\033\036\026\037\027\040\037\041\045\043\041" +
    "\044\030\050\023\051\042\001\001\000\036\012\034\025" +
    "\035\026\044\032\144\033\020\035\033\036\026\037\027" +
    "\040\037\041\045\043\041\044\030\050\023\051\042\001" +
    "\001\000\034\012\117\025\120\026\044\033\113\035\116" +
    "\036\114\037\115\040\121\041\123\043\041\044\030\050" +
    "\023\051\042\001\001\000\036\012\034\025\035\026\044" +
    "\032\146\033\020\035\033\036\026\037\027\040\037\041" +
    "\045\043\041\044\030\050\023\051\042\001\001\000\034" +
    "\012\117\025\120\026\044\033\113\035\116\036\114\037" +
    "\115\040\121\041\123\043\041\044\030\050\023\051\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\012" +
    "\117\025\120\026\044\033\113\035\116\036\114\037\115" +
    "\040\121\041\123\043\041\044\030\050\023\051\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\012\117\025\120\026\044\033\113\035\116\036" +
    "\114\037\115\040\121\041\123\043\041\044\030\050\023" +
    "\051\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\203\024\205\025\204\026\044\051\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\203\024\216\025\204\026\044" +
    "\051\042\001\001\000\014\012\203\024\212\025\204\026" +
    "\044\051\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\203\024\223\025\204\026\044\051\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\012\034\025\035\026\044\032\241\033\020" +
    "\035\033\036\026\037\027\040\037\041\045\043\041\044" +
    "\030\050\023\051\042\001\001\000\034\012\117\025\120" +
    "\026\044\033\113\035\116\036\114\037\115\040\121\041" +
    "\123\043\041\044\030\050\023\051\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\034\025\035\026\044\032\252\033\020\035" +
    "\033\036\026\037\027\040\037\041\045\043\041\044\030" +
    "\050\023\051\042\001\001\000\034\012\117\025\120\026" +
    "\044\033\113\035\116\036\114\037\115\040\121\041\123" +
    "\043\041\044\030\050\023\051\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\034\025\035\026\044" +
    "\032\256\033\020\035\033\036\026\037\027\040\037\041" +
    "\045\043\041\044\030\050\023\051\042\001\001\000\034" +
    "\012\117\025\120\026\044\033\113\035\116\036\114\037" +
    "\115\040\121\041\123\043\041\044\030\050\023\051\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\034\025\035\026\044\032\262\033\020\035\033\036\026" +
    "\037\027\040\037\041\045\043\041\044\030\050\023\051" +
    "\042\001\001\000\034\012\117\025\120\026\044\033\113" +
    "\035\116\036\114\037\115\040\121\041\123\043\041\044" +
    "\030\050\023\051\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\034\025\035\026\044\032\266\033" +
    "\020\035\033\036\026\037\027\040\037\041\045\043\041" +
    "\044\030\050\023\051\042\001\001\000\034\012\117\025" +
    "\120\026\044\033\113\035\116\036\114\037\115\040\121" +
    "\041\123\043\041\044\030\050\023\051\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\034\025\035" +
    "\026\044\032\272\033\020\035\033\036\026\037\027\040" +
    "\037\041\045\043\041\044\030\050\023\051\042\001\001" +
    "\000\034\012\117\025\120\026\044\033\113\035\116\036" +
    "\114\037\115\040\121\041\123\043\041\044\030\050\023" +
    "\051\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\012\034\025\035\026\044\032\277" +
    "\033\020\035\033\036\026\037\027\040\037\041\045\043" +
    "\041\044\030\050\023\051\042\001\001\000\034\012\117" +
    "\025\120\026\044\033\113\035\116\036\114\037\115\040" +
    "\121\041\123\043\041\044\030\050\023\051\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\034\025" +
    "\035\026\044\032\303\033\020\035\033\036\026\037\027" +
    "\040\037\041\045\043\041\044\030\050\023\051\042\001" +
    "\001\000\034\012\117\025\120\026\044\033\113\035\116" +
    "\036\114\037\115\040\121\041\123\043\041\044\030\050" +
    "\023\051\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\324\001\001\000\004\046\317\001\001\000" +
    "\004\046\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\350\001\001\000\002\001\001\000\014\012\203" +
    "\024\337\025\204\026\044\051\042\001\001\000\014\012" +
    "\203\024\336\025\204\026\044\051\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\203\024\344\025\204" +
    "\026\044\051\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\203\024\u011a\025\204" +
    "\026\044\051\042\001\001\000\014\012\203\024\355\025" +
    "\204\026\044\051\042\001\001\000\014\012\203\024\352" +
    "\025\204\026\044\051\042\001\001\000\002\001\001\000" +
    "\014\012\203\024\367\025\204\026\044\051\042\001\001" +
    "\000\014\012\203\024\365\025\204\026\044\051\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\203\024\362\025\204\026" +
    "\044\051\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\203\024\375\025" +
    "\204\026\044\051\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\203\024\u010c\025" +
    "\204\026\044\051\042\001\001\000\014\012\203\024\u0103" +
    "\025\204\026\044\051\042\001\001\000\014\012\203\024" +
    "\u0107\025\204\026\044\051\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\203" +
    "\024\u0111\025\204\026\044\051\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\203\024\u0117\025\204\026" +
    "\044\051\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\203\024\u011f" +
    "\025\204\026\044\051\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\u0149\014\u012f\015\u012b" +
    "\001\001\000\010\013\u0143\014\u012f\015\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\u013a" +
    "\015\u012b\001\001\000\006\014\u0135\015\u012b\001\001\000" +
    "\002\001\001\000\004\015\u0139\001\001\000\004\015\u0138" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0158\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u015f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0168\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u0175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\034\025\035\026\044\032\u0173\033\020\035\033\036\026" +
    "\037\027\040\037\041\045\043\041\044\030\050\023\051" +
    "\042\001\001\000\034\012\117\025\120\026\044\033\113" +
    "\035\116\036\114\037\115\040\121\041\123\043\041\044" +
    "\030\050\023\051\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\034\025\035\026" +
    "\044\032\u0178\033\020\035\033\036\026\037\027\040\037" +
    "\041\045\043\041\044\030\050\023\051\042\001\001\000" +
    "\034\012\117\025\120\026\044\033\113\035\116\036\114" +
    "\037\115\040\121\041\123\043\041\044\030\050\023\051" +
    "\042\001\001\000\002\001\001\000\036\012\034\025\035" +
    "\026\044\032\u0182\033\020\035\033\036\026\037\027\040" +
    "\037\041\045\043\041\044\030\050\023\051\042\001\001" +
    "\000\036\012\034\025\035\026\044\032\u017c\033\020\035" +
    "\033\036\026\037\027\040\037\041\045\043\041\044\030" +
    "\050\023\051\042\001\001\000\034\012\117\025\120\026" +
    "\044\033\113\035\116\036\114\037\115\040\121\041\123" +
    "\043\041\044\030\050\023\051\042\001\001\000\036\012" +
    "\034\025\035\026\044\032\u017e\033\020\035\033\036\026" +
    "\037\027\040\037\041\045\043\041\044\030\050\023\051" +
    "\042\001\001\000\034\012\117\025\120\026\044\033\113" +
    "\035\116\036\114\037\115\040\121\041\123\043\041\044" +
    "\030\050\023\051\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\117\025\120\026" +
    "\044\033\113\035\116\036\114\037\115\040\121\041\123" +
    "\043\041\044\030\050\023\051\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\034\025\035\026\044\032\u0194\033\020\035\033" +
    "\036\026\037\027\040\037\041\045\043\041\044\030\050" +
    "\023\051\042\001\001\000\036\012\034\025\035\026\044" +
    "\032\u018c\033\020\035\033\036\026\037\027\040\037\041" +
    "\045\043\041\044\030\050\023\051\042\001\001\000\034" +
    "\012\117\025\120\026\044\033\113\035\116\036\114\037" +
    "\115\040\121\041\123\043\041\044\030\050\023\051\042" +
    "\001\001\000\036\012\034\025\035\026\044\032\u018e\033" +
    "\020\035\033\036\026\037\027\040\037\041\045\043\041" +
    "\044\030\050\023\051\042\001\001\000\034\012\117\025" +
    "\120\026\044\033\113\035\116\036\114\037\115\040\121" +
    "\041\123\043\041\044\030\050\023\051\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\117\025\120\026" +
    "\044\033\113\035\116\036\114\037\115\040\121\041\123" +
    "\043\041\044\030\050\023\051\042\001\001\000\002\001" +
    "\001\000\036\012\034\025\035\026\044\032\u0197\033\020" +
    "\035\033\036\026\037\027\040\037\041\045\043\041\044" +
    "\030\050\023\051\042\001\001\000\034\012\117\025\120" +
    "\026\044\033\113\035\116\036\114\037\115\040\121\041" +
    "\123\043\041\044\030\050\023\051\042\001\001\000\002" +
    "\001\001\000\036\012\034\025\035\026\044\032\u019a\033" +
    "\020\035\033\036\026\037\027\040\037\041\045\043\041" +
    "\044\030\050\023\051\042\001\001\000\034\012\117\025" +
    "\120\026\044\033\113\035\116\036\114\037\115\040\121" +
    "\041\123\043\041\044\030\050\023\051\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\u01a2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u01a6\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\012\034\025\035\026\044\032\u01a9" +
    "\033\020\035\033\036\026\037\027\040\037\041\045\043" +
    "\041\044\030\050\023\051\042\001\001\000\034\012\117" +
    "\025\120\026\044\033\113\035\116\036\114\037\115\040" +
    "\121\041\123\043\041\044\030\050\023\051\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\034\025\035\026\044\032\u01b5\033\020\035\033\036" +
    "\026\037\027\040\037\041\045\043\041\044\030\050\023" +
    "\051\042\001\001\000\002\001\001\000\036\012\034\025" +
    "\035\026\044\032\u01b3\033\020\035\033\036\026\037\027" +
    "\040\037\041\045\043\041\044\030\050\023\051\042\001" +
    "\001\000\034\012\117\025\120\026\044\033\113\035\116" +
    "\036\114\037\115\040\121\041\123\043\041\044\030\050" +
    "\023\051\042\001\001\000\002\001\001\000\034\012\117" +
    "\025\120\026\044\033\113\035\116\036\114\037\115\040" +
    "\121\041\123\043\041\044\030\050\023\051\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u01df\001\001\000\002\001\001\000\004\045\u01bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\u01bf\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\034\025\035\026\044\032\u01c2\033\020\035\033\036" +
    "\026\037\027\040\037\041\045\043\041\044\030\050\023" +
    "\051\042\001\001\000\034\012\117\025\120\026\044\033" +
    "\113\035\116\036\114\037\115\040\121\041\123\043\041" +
    "\044\030\050\023\051\042\001\001\000\002\001\001\000" +
    "\004\016\u01c6\001\001\000\004\016\u01cb\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\034\025\035\026" +
    "\044\032\u01c9\033\020\035\033\036\026\037\027\040\037" +
    "\041\045\043\041\044\030\050\023\051\042\001\001\000" +
    "\034\012\117\025\120\026\044\033\113\035\116\036\114" +
    "\037\115\040\121\041\123\043\041\044\030\050\023\051" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\034\025\035\026" +
    "\044\032\u01cf\033\020\035\033\036\026\037\027\040\037" +
    "\041\045\043\041\044\030\050\023\051\042\001\001\000" +
    "\034\012\117\025\120\026\044\033\113\035\116\036\114" +
    "\037\115\040\121\041\123\043\041\044\030\050\023\051" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\034\025\035\026\044\032\u01d3\033\020\035\033\036" +
    "\026\037\027\040\037\041\045\043\041\044\030\050\023" +
    "\051\042\001\001\000\034\012\117\025\120\026\044\033" +
    "\113\035\116\036\114\037\115\040\121\041\123\043\041" +
    "\044\030\050\023\051\042\001\001\000\002\001\001\000" +
    "\036\012\034\025\035\026\044\032\u01dd\033\020\035\033" +
    "\036\026\037\027\040\037\041\045\043\041\044\030\050" +
    "\023\051\042\001\001\000\036\012\034\025\035\026\044" +
    "\032\u01d7\033\020\035\033\036\026\037\027\040\037\041" +
    "\045\043\041\044\030\050\023\051\042\001\001\000\034" +
    "\012\117\025\120\026\044\033\113\035\116\036\114\037" +
    "\115\040\121\041\123\043\041\044\030\050\023\051\042" +
    "\001\001\000\036\012\034\025\035\026\044\032\u01d9\033" +
    "\020\035\033\036\026\037\027\040\037\041\045\043\041" +
    "\044\030\050\023\051\042\001\001\000\034\012\117\025" +
    "\120\026\044\033\113\035\116\036\114\037\115\040\121" +
    "\041\123\043\041\044\030\050\023\051\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\117\025\120\026\044\033\113\035\116\036\114\037" +
    "\115\040\121\041\123\043\041\044\030\050\023\051\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u01e2\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\034\025\035\026\044\032\u01e5\033" +
    "\020\035\033\036\026\037\027\040\037\041\045\043\041" +
    "\044\030\050\023\051\042\001\001\000\034\012\117\025" +
    "\120\026\044\033\113\035\116\036\114\037\115\040\121" +
    "\041\123\043\041\044\030\050\023\051\042\001\001\000" +
    "\002\001\001\000\004\045\u01e8\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u01eb\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\034\025\035\026\044" +
    "\032\u01ee\033\020\035\033\036\026\037\027\040\037\041" +
    "\045\043\041\044\030\050\023\051\042\001\001\000\034" +
    "\012\117\025\120\026\044\033\113\035\116\036\114\037" +
    "\115\040\121\041\123\043\041\044\030\050\023\051\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u01f2\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u01f5\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\034\025\035\026\044\032\u01f8\033\020\035\033" +
    "\036\026\037\027\040\037\041\045\043\041\044\030\050" +
    "\023\051\042\001\001\000\034\012\117\025\120\026\044" +
    "\033\113\035\116\036\114\037\115\040\121\041\123\043" +
    "\041\044\030\050\023\051\042\001\001\000\002\001\001" +
    "\000\004\045\u01fb\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u01fe\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\034\025\035\026\044\032\u0201\033" +
    "\020\035\033\036\026\037\027\040\037\041\045\043\041" +
    "\044\030\050\023\051\042\001\001\000\034\012\117\025" +
    "\120\026\044\033\113\035\116\036\114\037\115\040\121" +
    "\041\123\043\041\044\030\050\023\051\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u0206\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\034\025\035\026\044\032\u0209\033\020\035\033" +
    "\036\026\037\027\040\037\041\045\043\041\044\030\050" +
    "\023\051\042\001\001\000\034\012\117\025\120\026\044" +
    "\033\113\035\116\036\114\037\115\040\121\041\123\043" +
    "\041\044\030\050\023\051\042\001\001\000\002\001\001" +
    "\000\034\012\117\025\120\026\044\033\113\035\116\036" +
    "\114\037\115\040\121\041\123\043\041\044\030\050\023" +
    "\051\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\u0238\010\u0239\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\u0238\010\u0239\001\001" +
    "\000\002\001\001\000\004\055\u023f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 //Codigo del usuario
    private Editor editor;
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABEZA BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;
		System.out.println("Programa Correcto!!!!!");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_programa. Tienes " + s);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABEZA ::= Identificador NT$0 Identificador 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABEZA ::= inicio_programa Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),"Nombre del programa");
            System.out.println("Inicio y nombre correcto");
        }
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABEZA ::= inicio_programa error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta añadirle un nombre al programa");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES fin_var 
            {
              Object RESULT =null;
		System.out.println("Bloque declaracion correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_var. Tienes " + s);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQUE_DECLARACION ::= error DECLARACIONES fin_var NT$1 inicio_var fin_var 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		System.out.println("Bloque declaracion correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE_DECLARACION ::= inicio_var error fin_var 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en las declaraciones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= DECLARACIONES DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= DECLARACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES ::= DECLARACIONES DECLARACION_A PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACIONES ::= DECLARACION_A PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal estructurada la declaración\n----> ¿Revisaste si le pusiste el ;?\n----> ¿Revisaste si estan bien escritas las palabras reservadas?");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= definir Identificador como entero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un entero");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= definir Identificador como decimal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un decimal");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= definir Identificador como logico 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un logico");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= definir Identificador como texto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= definir Identificador como display 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un display");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= definir Identificador como motor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un motor");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= definir Identificador como led 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un led");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= definir Identificador como tiempo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= definir Identificador como arreglo Cor_a Numero Cor_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arreglo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= definir Identificador como arregloBi Cor_a Numero Cor_c Cor_a Numero Cor_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arregloBi");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_A ::= definir Identificador como entero Asignacion_s Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un entero");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_A ::= definir Identificador como decimal Asignacion_s Decimal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un decimal");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_A ::= definir Identificador como logico Asignacion_s verdadero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un logico");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_A ::= definir Identificador como logico Asignacion_s falso 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un logico");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_A ::= definir Identificador como texto Asignacion_s Texto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_A ::= definir Identificador como tiempo Asignacion_s Tiempo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val.toString());
        }System.out.println("Se encontro una declaracion con asignacion de un tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= Identificador Asignacion_s Texto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= Identificador Asignacion_s verdadero PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= Identificador Asignacion_s falso PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= Identificador Asignacion_s EXPRESION PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado ASIGNACION");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= Identificador Asignacion_s PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el valor a asignar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= Identificador Texto PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= Identificador verdadero PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= Identificador falso PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= Identificador EXPRESION PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el signo =");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= Identificador Asignacion_s error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> No se pudo determinar el valor a asignar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TERMINO ::= TERMINO Mul FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TERMINO ::= TERMINO Div FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= Par_a EXPRESION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= Identificador Igual falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= Identificador Igual verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= verdadero Igual Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= falso Igual Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICION ::= Identificador OP_REL Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICION ::= Numero OP_REL Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= Identificador OP_REL Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= Numero OP_REL Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICION ::= falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_REL ::= Mayor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_REL ::= Menor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_REL ::= Diferente 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_REL ::= Mayor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_REL ::= Menor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_REL ::= Igual 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DIRECCION ::= izquierda 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DIRECCION ::= derecha 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE_CODIGO ::= inicio_bloque SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUE_CODIGO ::= inicio_bloque fin_bloque 
            {
              Object RESULT =null;
		System.out.println("Se encontro un BLOQUE_CODIGO correcto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE_CODIGO ::= error SENTENCIA fin_bloque 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_programa.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // METODO ::= incrementar Identificador PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un incremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // METODO ::= incrementar Identificador error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta el ;");
        System.out.println("\nEncontrado un decremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // METODO ::= incrementar PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner el identificador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // METODO ::= decrementar Identificador PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado un decremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // METODO ::= decrementar Identificador error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta el ;");
        System.out.println("\nEncontrado un decremento de id");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // METODO ::= decrementar PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner el identificador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // METODO ::= MOSTRAR_TEXTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // METODO ::= MANIPULAR_COMPONENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MOSTRAR_TEXTO ::= mostrar Texto PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado mostrar texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MOSTRAR_TEXTO ::= mostrar Identificador PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado mostrar texto");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MOSTRAR_TEXTO ::= mostrar PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner el identificador o al menos una cadena");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MOSTRAR_TEXTO ::= mostrar error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal estructurada la instrucción. ¿Pusiste el ;? ¿No te saltaste el identificador?");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MANIPULAR_COMPONENTE ::= Identificador PUNTO error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal escrita la función del componente.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado prender");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MANIPULAR_COMPONENTE ::= Identificador PUNTO apagar PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado apagar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MANIPULAR_COMPONENTE ::= Identificador PUNTO prender PUNTO COLOR PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado prender color");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar direccion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a TIEMPO Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado girar con tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
        editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal escrito el valor de tiempo. Recuerda que es un numero entero y ya sea seg, hr o min.");
    System.out.println("\nEncontrado girar con tiempo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a TEXTO Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("\nEncontrado visualizar display");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIEMPO ::= Tiempo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIEMPO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TEXTO ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA ::= SENTENCIA DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA ::= DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA ::= SENTENCIA SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA ::= SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA ::= SENTENCIA SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA ::= SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA ::= SENTENCIA SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA ::= SENTENCIA SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA ::= SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA ::= SENTENCIA SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA ::= SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA ::= SENTENCIA error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECISION ::= SENTENCIA_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECISION ::= SENTENCIA_FACIL_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECISION ::= SENTENCIA_FACIL_SINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FACIL_SENTENCIA ::= METODO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FACIL_SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_SI ::= si CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_SI ::= si Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA_SI ::= si Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA_SI ::= si Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque si");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA_SI ::= si Par_a CONDICION Par_c error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en las instrucciones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SENTENCIA SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la palabra \"sino\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque sino");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION Par_c FACIL_SENTENCIA 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado FACIL SI");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA_FACIL_SI ::= facil_si CONDICION Par_c FACIL_SENTENCIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis del bloque facil_si");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA_FACIL_SI ::= facil_si Par_a Par_c FACIL_SENTENCIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION FACIL_SENTENCIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó cerrar el paréntesis de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA_FACIL_SINO ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)).value;
		System.out.println("Se ha encontrado FACIL SI SINO");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_FACIL_SINO ::= facil_si CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_FACIL_SINO ::= facil_si Par_a COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_FACIL_SINO ::= facil_si Par_a CONDICION FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te saltaste la coma que separa la condición de la instrucción");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_FACIL_SINO ::= facil_si Par_a CONDICION COMA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la instrucción a realizar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_FACIL_SINO ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_FACIL_SINO ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave para la sentencia facil_sino");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_FACIL_SINO ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la palabra facil_sino");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_FACIL_SINO ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la sentencia facil_sino");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA_FACIL_SINO ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a Par_c Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la instrucción a realizar");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA_FACIL_SINO ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis de la sentencia facil_sino");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SINO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA_REPETIR ::= repetir veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el número entero de repeticiones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la palabra \"veces\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque repetir");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner las sentencias");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIA_REPETIR ::= repetir PARAMETRO_ENTERO veces Lla_a error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en las sentencias del bloque");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SENTENCIA_REPETIR ::= repetir error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> La sentencia repetir esta incompleta");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_DECIMAL COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		System.out.println("Se ha encontrado FACIL REPETIR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> No se pudo determinar el contenido del paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_FACIL_REPETIR ::= facil_repetir PARAMETRO_DECIMAL COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque facil_repetir");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a COMA FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el número de repeticiones");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_DECIMAL error FACIL_SENTENCIA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te saltaste una coma");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a PARAMETRO_DECIMAL COMA Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la instrucción a repetir");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> La instrución esta vacía");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_FACIL_REPETIR ::= facil_repetir error Par_c PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la sintáxis de la sentencia facil_repetir, popr favor revisalo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado MIENTRAS");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA_MIENTRAS ::= mientras CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTENCIA_MIENTRAS ::= mientras Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la condicion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque mientras");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner sentencias dentro del bloque");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_MIENTRAS ::= mientras error Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la sintaxis del ciclo mientras, por favor revisalo");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado PARA");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_PARA ::= para Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_PARA ::= para Par_a Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner un nuevo identificador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_PARA ::= para Par_a Identificador Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el signo = ");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el valor de la variable");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA_PARA ::= para Par_a COMA incrementar Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner ya sea \"incrementar\" o \"decrementar\"");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner una coma entre el incremento y la condicion");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIA_PARA ::= para Par_a error COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la declaración del contador");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA error COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la escritura del incremento/decremento");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA error Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la escritura de la condición");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SENTENCIA_PARA ::= para Par_a Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> La función para esta sin atributos");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SENTENCIA_PARA ::= para Par_a Par_c error Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la sintáxis del contenido de la función para.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c SENTENCIA Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque para");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner las sentencias del bloque para");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-12)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		System.out.println("Se ha encontrado SELECTOR");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA_SELECTOR ::= selector Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la sentencia selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIA_SELECTOR ::= selector Par_a Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el identificador en el selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis en el selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA_SELECTOR ::= selector Par_a error Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Debe ir un identificador en el atributo de selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a Lla_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta agregar los casos");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // BLOQUE_SELECTOR ::= Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // BLOQUE_SELECTOR ::= Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // BLOQUE_SELECTOR ::= verdadero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // BLOQUE_SELECTOR ::= falso DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // BLOQUE_SELECTOR ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // PARAMETRO_DECIMAL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DECIMAL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // PARAMETRO_DECIMAL ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_DECIMAL",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // PARAMETRO_ENTERO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_ENTERO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // PARAMETRO_ENTERO ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_ENTERO",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // INC_DEC ::= incrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // INC_DEC ::= decrementar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INC_DEC",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
