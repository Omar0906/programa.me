
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package aux_tools.sintactico;

import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\002\006\000\002\052" +
    "\002\000\002\046\005\000\002\046\004\000\002\046\004" +
    "\000\002\046\002\000\002\003\005\000\002\053\002\000" +
    "\002\003\006\000\002\003\005\000\002\004\005\000\002" +
    "\054\002\000\002\004\006\000\002\004\005\000\002\004" +
    "\002\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\007\007\000\002\007\012\000" +
    "\002\007\015\000\002\010\011\000\002\010\011\000\002" +
    "\011\003\000\002\011\003\000\002\012\006\000\002\013" +
    "\005\000\002\013\005\000\002\013\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\021\003\000\002\021\003\000\002\024\004" +
    "\000\002\024\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\003\000\002\025\003\000\002\026\004\000\002" +
    "\047\005\000\002\047\005\000\002\047\007\000\002\047" +
    "\007\000\002\047\012\000\002\047\010\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\004\000\002\032\003\000\002\032\004\000\002\032" +
    "\003\000\002\032\004\000\002\032\003\000\002\032\004" +
    "\000\002\032\003\000\002\032\004\000\002\032\003\000" +
    "\002\032\004\000\002\032\003\000\002\032\004\000\002" +
    "\032\003\000\002\032\004\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\043\011\000\002\043\015" +
    "\000\002\044\007\000\002\044\016\000\002\035\010\000" +
    "\002\036\010\000\002\037\011\000\002\040\020\000\002" +
    "\041\011\000\002\045\010\000\002\045\007\000\002\045" +
    "\010\000\002\045\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\010\032\004\033\ufffb\073\006\001\002\000" +
    "\006\003\375\073\376\001\002\000\006\033\013\073\015" +
    "\001\002\000\004\073\uffff\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\004\073\012\001\002" +
    "\000\006\033\ufffe\073\ufffe\001\002\000\004\010\021\001" +
    "\002\000\010\005\073\023\ufff2\073\074\001\002\000\004" +
    "\010\ufff9\001\002\000\004\010\021\001\002\000\006\010" +
    "\021\024\067\001\002\000\010\010\ufff0\024\ufff0\073\ufff0" +
    "\001\002\000\004\073\023\001\002\000\010\010\uffee\024" +
    "\uffee\073\uffee\001\002\000\004\007\024\001\002\000\026" +
    "\012\033\036\036\044\026\056\037\062\031\063\034\064" +
    "\032\065\025\134\030\135\035\001\002\000\006\100\uffeb" +
    "\111\uffeb\001\002\000\006\100\uffe8\111\uffe8\001\002\000" +
    "\006\100\053\111\054\001\002\000\004\106\047\001\002" +
    "\000\006\100\uffec\111\uffec\001\002\000\006\100\uffea\111" +
    "\uffea\001\002\000\006\100\uffe9\111\uffe9\001\002\000\006" +
    "\100\uffed\111\uffed\001\002\000\004\106\040\001\002\000" +
    "\006\100\uffe7\111\uffe7\001\002\000\006\100\uffe6\111\uffe6" +
    "\001\002\000\004\076\041\001\002\000\004\107\042\001" +
    "\002\000\004\106\043\001\002\000\004\076\044\001\002" +
    "\000\004\107\045\001\002\000\004\100\046\001\002\000" +
    "\010\010\uffde\024\uffde\073\uffde\001\002\000\004\076\050" +
    "\001\002\000\004\107\051\001\002\000\004\100\052\001" +
    "\002\000\010\010\uffdf\024\uffdf\073\uffdf\001\002\000\010" +
    "\010\uffe0\024\uffe0\073\uffe0\001\002\000\016\022\062\060" +
    "\056\074\064\075\063\076\055\077\061\001\002\000\006" +
    "\003\uffe5\100\uffe5\001\002\000\006\003\uffdb\100\uffdb\001" +
    "\002\000\006\003\065\100\066\001\002\000\006\003\uffe3" +
    "\100\uffe3\001\002\000\006\003\uffe2\100\uffe2\001\002\000" +
    "\006\003\uffda\100\uffda\001\002\000\006\003\uffe1\100\uffe1" +
    "\001\002\000\006\003\uffe4\100\uffe4\001\002\000\010\010" +
    "\uffdc\024\uffdc\073\uffdc\001\002\000\010\010\uffdd\024\uffdd" +
    "\073\uffdd\001\002\000\010\005\ufff8\023\ufff8\073\ufff8\001" +
    "\002\000\010\010\ufff1\024\ufff1\073\ufff1\001\002\000\010" +
    "\010\uffef\024\uffef\073\uffef\001\002\000\004\023\371\001" +
    "\002\000\030\016\123\020\115\041\102\043\126\050\100" +
    "\053\120\054\124\071\113\072\125\073\107\130\077\001" +
    "\002\000\030\016\ufff5\020\ufff5\041\ufff5\043\ufff5\050\ufff5" +
    "\053\ufff5\054\ufff5\071\ufff5\072\ufff5\073\ufff5\130\ufff5\001" +
    "\002\000\030\016\123\020\115\041\102\043\126\050\100" +
    "\053\120\054\124\071\113\072\125\073\107\130\077\001" +
    "\002\000\036\016\uffa4\020\uffa4\041\uffa4\043\uffa4\050\uffa4" +
    "\051\uffa4\053\uffa4\054\uffa4\061\uffa4\071\uffa4\072\uffa4\073" +
    "\uffa4\105\uffa4\130\uffa4\001\002\000\004\102\351\001\002" +
    "\000\004\076\344\001\002\000\032\016\123\020\115\041" +
    "\102\043\126\050\100\053\120\054\124\061\343\071\113" +
    "\072\125\073\107\130\077\001\002\000\004\102\335\001" +
    "\002\000\036\016\uff9e\020\uff9e\041\uff9e\043\uff9e\050\uff9e" +
    "\051\uff9e\053\uff9e\054\uff9e\061\uff9e\071\uff9e\072\uff9e\073" +
    "\uff9e\105\uff9e\130\uff9e\001\002\000\036\016\uffa6\020\uffa6" +
    "\041\uffa6\043\uffa6\050\uffa6\051\uffa6\053\uffa6\054\uffa6\061" +
    "\uffa6\071\uffa6\072\uffa6\073\uffa6\105\uffa6\130\uffa6\001\002" +
    "\000\036\016\uff9c\020\uff9c\041\uff9c\043\uff9c\050\uff9c\051" +
    "\uff9c\053\uff9c\054\uff9c\061\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\105\uff9c\130\uff9c\001\002\000\036\016\uff96\020\uff96\041" +
    "\uff96\043\uff96\050\uff96\051\uff96\053\uff96\054\uff96\061\uff96" +
    "\071\uff96\072\uff96\073\uff96\105\uff96\130\uff96\001\002\000" +
    "\006\111\262\124\261\001\002\000\036\016\uffa0\020\uffa0" +
    "\041\uffa0\043\uffa0\050\uffa0\051\uffa0\053\uffa0\054\uffa0\061" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\105\uffa0\130\uffa0\001\002" +
    "\000\004\100\260\001\002\000\040\016\uffa2\020\uffa2\041" +
    "\uffa2\043\uffa2\050\uffa2\051\uffa2\053\uffa2\054\uffa2\061\uffa2" +
    "\071\uffa2\072\uffa2\073\uffa2\100\174\105\uffa2\130\uffa2\001" +
    "\002\000\004\073\257\001\002\000\036\016\uff9a\020\uff9a" +
    "\041\uff9a\043\uff9a\050\uff9a\051\uff9a\053\uff9a\054\uff9a\061" +
    "\uff9a\071\uff9a\072\uff9a\073\uff9a\105\uff9a\130\uff9a\001\002" +
    "\000\004\102\242\001\002\000\036\016\uff97\020\uff97\041" +
    "\uff97\043\uff97\050\uff97\051\uff97\053\uff97\054\uff97\061\uff97" +
    "\071\uff97\072\uff97\073\uff97\105\uff97\130\uff97\001\002\000" +
    "\004\100\uffb6\001\002\000\004\102\210\001\002\000\004" +
    "\100\uffb7\001\002\000\036\016\uff98\020\uff98\041\uff98\043" +
    "\uff98\050\uff98\051\uff98\053\uff98\054\uff98\061\uff98\071\uff98" +
    "\072\uff98\073\uff98\105\uff98\130\uff98\001\002\000\004\102" +
    "\202\001\002\000\004\102\131\001\002\000\004\073\130" +
    "\001\002\000\004\077\127\001\002\000\004\100\uffb5\001" +
    "\002\000\004\100\uffb8\001\002\000\012\022\135\060\133" +
    "\073\136\076\132\001\002\000\014\116\140\117\141\120" +
    "\144\121\137\122\143\001\002\000\010\103\uffc5\110\175" +
    "\125\uffc5\001\002\000\004\103\154\001\002\000\010\103" +
    "\uffc4\110\152\125\uffc4\001\002\000\022\103\uffc3\110\145" +
    "\116\140\117\141\120\144\121\137\122\143\125\uffc3\001" +
    "\002\000\006\073\uffc2\076\uffc2\001\002\000\006\073\uffbe" +
    "\076\uffbe\001\002\000\006\073\uffbf\076\uffbf\001\002\000" +
    "\006\073\151\076\150\001\002\000\006\073\uffc1\076\uffc1" +
    "\001\002\000\006\073\uffc0\076\uffc0\001\002\000\006\022" +
    "\147\060\146\001\002\000\006\103\uffcc\125\uffcc\001\002" +
    "\000\006\103\uffcd\125\uffcd\001\002\000\006\103\uffc9\125" +
    "\uffc9\001\002\000\006\103\uffc7\125\uffc7\001\002\000\004" +
    "\073\153\001\002\000\006\103\uffca\125\uffca\001\002\000" +
    "\004\104\155\001\002\000\030\016\123\020\115\041\102" +
    "\043\126\050\100\053\120\054\124\071\113\072\125\073" +
    "\107\130\077\001\002\000\032\016\123\020\115\041\102" +
    "\043\126\050\100\053\120\054\124\071\113\072\125\073" +
    "\107\105\167\130\077\001\002\000\036\016\uffa5\020\uffa5" +
    "\041\uffa5\043\uffa5\050\uffa5\051\uffa5\053\uffa5\054\uffa5\061" +
    "\uffa5\071\uffa5\072\uffa5\073\uffa5\105\uffa5\130\uffa5\001\002" +
    "\000\036\016\uff9f\020\uff9f\041\uff9f\043\uff9f\050\uff9f\051" +
    "\uff9f\053\uff9f\054\uff9f\061\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\105\uff9f\130\uff9f\001\002\000\036\016\uffa7\020\uffa7\041" +
    "\uffa7\043\uffa7\050\uffa7\051\uffa7\053\uffa7\054\uffa7\061\uffa7" +
    "\071\uffa7\072\uffa7\073\uffa7\105\uffa7\130\uffa7\001\002\000" +
    "\036\016\uff9d\020\uff9d\041\uff9d\043\uff9d\050\uff9d\051\uff9d" +
    "\053\uff9d\054\uff9d\061\uff9d\071\uff9d\072\uff9d\073\uff9d\105" +
    "\uff9d\130\uff9d\001\002\000\036\016\uffa1\020\uffa1\041\uffa1" +
    "\043\uffa1\050\uffa1\051\uffa1\053\uffa1\054\uffa1\061\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\105\uffa1\130\uffa1\001\002\000\040" +
    "\016\uffa3\020\uffa3\041\uffa3\043\uffa3\050\uffa3\051\uffa3\053" +
    "\uffa3\054\uffa3\061\uffa3\071\uffa3\072\uffa3\073\uffa3\100\174" +
    "\105\uffa3\130\uffa3\001\002\000\036\016\uff9b\020\uff9b\041" +
    "\uff9b\043\uff9b\050\uff9b\051\uff9b\053\uff9b\054\uff9b\061\uff9b" +
    "\071\uff9b\072\uff9b\073\uff9b\105\uff9b\130\uff9b\001\002\000" +
    "\036\016\uff99\020\uff99\041\uff99\043\uff99\050\uff99\051\uff99" +
    "\053\uff99\054\uff99\061\uff99\071\uff99\072\uff99\073\uff99\105" +
    "\uff99\130\uff99\001\002\000\040\016\uff95\020\uff95\041\uff95" +
    "\043\uff95\050\uff95\051\uff95\053\uff95\054\uff95\055\170\061" +
    "\uff95\071\uff95\072\uff95\073\uff95\105\uff95\130\uff95\001\002" +
    "\000\004\104\171\001\002\000\030\016\123\020\115\041" +
    "\102\043\126\050\100\053\120\054\124\071\113\072\125" +
    "\073\107\130\077\001\002\000\032\016\123\020\115\041" +
    "\102\043\126\050\100\053\120\054\124\071\113\072\125" +
    "\073\107\105\173\130\077\001\002\000\036\016\uff94\020" +
    "\uff94\041\uff94\043\uff94\050\uff94\051\uff94\053\uff94\054\uff94" +
    "\061\uff94\071\uff94\072\uff94\073\uff94\105\uff94\130\uff94\001" +
    "\002\000\040\016\uffbb\020\uffbb\041\uffbb\043\uffbb\050\uffbb" +
    "\051\uffbb\053\uffbb\054\uffbb\061\uffbb\071\uffbb\072\uffbb\073" +
    "\uffbb\103\uffbb\105\uffbb\130\uffbb\001\002\000\004\073\176" +
    "\001\002\000\006\103\uffcb\125\uffcb\001\002\000\006\073" +
    "\201\076\200\001\002\000\006\103\uffc6\125\uffc6\001\002" +
    "\000\006\103\uffc8\125\uffc8\001\002\000\004\076\203\001" +
    "\002\000\004\125\204\001\002\000\012\043\126\071\113" +
    "\072\125\073\107\001\002\000\004\100\174\001\002\000" +
    "\004\103\207\001\002\000\036\016\uff90\020\uff90\041\uff90" +
    "\043\uff90\050\uff90\051\uff90\053\uff90\054\uff90\061\uff90\071" +
    "\uff90\072\uff90\073\uff90\105\uff90\130\uff90\001\002\000\004" +
    "\073\211\001\002\000\004\103\212\001\002\000\004\104" +
    "\213\001\002\000\006\076\214\077\216\001\002\000\004" +
    "\101\236\001\002\000\010\076\223\077\224\105\225\001" +
    "\002\000\004\101\217\001\002\000\030\016\123\020\115" +
    "\041\102\043\126\050\100\053\120\054\124\071\113\072" +
    "\125\073\107\130\077\001\002\000\032\016\123\020\115" +
    "\041\102\043\126\050\100\051\221\053\120\054\124\071" +
    "\113\072\125\073\107\130\077\001\002\000\004\100\222" +
    "\001\002\000\010\076\uff89\077\uff89\105\uff89\001\002\000" +
    "\004\101\232\001\002\000\004\101\226\001\002\000\036" +
    "\016\uff8d\020\uff8d\041\uff8d\043\uff8d\050\uff8d\051\uff8d\053" +
    "\uff8d\054\uff8d\061\uff8d\071\uff8d\072\uff8d\073\uff8d\105\uff8d" +
    "\130\uff8d\001\002\000\030\016\123\020\115\041\102\043" +
    "\126\050\100\053\120\054\124\071\113\072\125\073\107" +
    "\130\077\001\002\000\032\016\123\020\115\041\102\043" +
    "\126\050\100\051\230\053\120\054\124\071\113\072\125" +
    "\073\107\130\077\001\002\000\004\100\231\001\002\000" +
    "\010\076\uff8a\077\uff8a\105\uff8a\001\002\000\030\016\123" +
    "\020\115\041\102\043\126\050\100\053\120\054\124\071" +
    "\113\072\125\073\107\130\077\001\002\000\032\016\123" +
    "\020\115\041\102\043\126\050\100\051\234\053\120\054" +
    "\124\071\113\072\125\073\107\130\077\001\002\000\004" +
    "\100\235\001\002\000\010\076\uff8c\077\uff8c\105\uff8c\001" +
    "\002\000\030\016\123\020\115\041\102\043\126\050\100" +
    "\053\120\054\124\071\113\072\125\073\107\130\077\001" +
    "\002\000\032\016\123\020\115\041\102\043\126\050\100" +
    "\051\240\053\120\054\124\071\113\072\125\073\107\130" +
    "\077\001\002\000\004\100\241\001\002\000\010\076\uff8b" +
    "\077\uff8b\105\uff8b\001\002\000\012\022\135\060\133\073" +
    "\136\076\132\001\002\000\006\103\245\125\244\001\002" +
    "\000\012\043\126\071\113\072\125\073\107\001\002\000" +
    "\012\043\126\071\113\072\125\073\107\001\002\000\036" +
    "\016\uff93\020\uff93\041\uff93\043\uff93\050\uff93\051\uff93\053" +
    "\uff93\054\uff93\061\uff93\071\uff93\072\uff93\073\uff93\105\uff93" +
    "\130\uff93\001\002\000\004\103\250\001\002\000\004\104" +
    "\251\001\002\000\004\021\252\001\002\000\004\102\253" +
    "\001\002\000\012\043\126\071\113\072\125\073\107\001" +
    "\002\000\004\103\255\001\002\000\004\105\256\001\002" +
    "\000\036\016\uff92\020\uff92\041\uff92\043\uff92\050\uff92\051" +
    "\uff92\053\uff92\054\uff92\061\uff92\071\uff92\072\uff92\073\uff92" +
    "\105\uff92\130\uff92\001\002\000\004\100\uffb9\001\002\000" +
    "\040\016\uffba\020\uffba\041\uffba\043\uffba\050\uffba\051\uffba" +
    "\053\uffba\054\uffba\061\uffba\071\uffba\072\uffba\073\uffba\103" +
    "\uffba\105\uffba\130\uffba\001\002\000\012\004\311\025\306" +
    "\126\307\127\310\001\002\000\014\073\271\074\272\076" +
    "\263\077\270\102\265\001\002\000\016\100\uffd1\103\uffd1" +
    "\112\uffd1\113\uffd1\114\uffd1\115\uffd1\001\002\000\016\100" +
    "\uffd3\103\uffd3\112\uffd3\113\uffd3\114\uffd3\115\uffd3\001\002" +
    "\000\014\073\271\074\272\076\263\077\270\102\265\001" +
    "\002\000\016\100\uffd6\103\uffd6\112\uffd6\113\uffd6\114\277" +
    "\115\300\001\002\000\010\100\273\112\275\113\274\001" +
    "\002\000\016\100\uffce\103\uffce\112\uffce\113\uffce\114\uffce" +
    "\115\uffce\001\002\000\016\100\uffcf\103\uffcf\112\uffcf\113" +
    "\uffcf\114\uffcf\115\uffcf\001\002\000\016\100\uffd0\103\uffd0" +
    "\112\uffd0\113\uffd0\114\uffd0\115\uffd0\001\002\000\040\016" +
    "\uffd9\020\uffd9\041\uffd9\043\uffd9\050\uffd9\051\uffd9\053\uffd9" +
    "\054\uffd9\061\uffd9\071\uffd9\072\uffd9\073\uffd9\100\uffd9\105" +
    "\uffd9\130\uffd9\001\002\000\014\073\271\074\272\076\263" +
    "\077\270\102\265\001\002\000\014\073\271\074\272\076" +
    "\263\077\270\102\265\001\002\000\016\100\uffd8\103\uffd8" +
    "\112\uffd8\113\uffd8\114\277\115\300\001\002\000\014\073" +
    "\271\074\272\076\263\077\270\102\265\001\002\000\014" +
    "\073\271\074\272\076\263\077\270\102\265\001\002\000" +
    "\016\100\uffd4\103\uffd4\112\uffd4\113\uffd4\114\uffd4\115\uffd4" +
    "\001\002\000\016\100\uffd5\103\uffd5\112\uffd5\113\uffd5\114" +
    "\uffd5\115\uffd5\001\002\000\016\100\uffd7\103\uffd7\112\uffd7" +
    "\113\uffd7\114\277\115\300\001\002\000\010\103\305\112" +
    "\275\113\274\001\002\000\016\100\uffd2\103\uffd2\112\uffd2" +
    "\113\uffd2\114\uffd2\115\uffd2\001\002\000\004\124\324\001" +
    "\002\000\006\100\uffb4\124\317\001\002\000\004\102\312" +
    "\001\002\000\004\100\uffb3\001\002\000\006\073\315\077" +
    "\314\001\002\000\004\103\316\001\002\000\004\103\uffa9" +
    "\001\002\000\004\103\uffa8\001\002\000\004\100\uffaf\001" +
    "\002\000\010\131\323\132\321\133\322\001\002\000\004" +
    "\100\uffb2\001\002\000\004\100\uffad\001\002\000\004\100" +
    "\uffac\001\002\000\004\100\uffae\001\002\000\006\011\326" +
    "\035\327\001\002\000\006\100\uffb1\102\330\001\002\000" +
    "\006\100\uffbc\102\uffbc\001\002\000\006\100\uffbd\102\uffbd" +
    "\001\002\000\006\073\331\075\333\001\002\000\004\103" +
    "\uffaa\001\002\000\004\103\334\001\002\000\004\103\uffab" +
    "\001\002\000\004\100\uffb0\001\002\000\012\022\135\060" +
    "\133\073\136\076\132\001\002\000\004\103\337\001\002" +
    "\000\004\104\340\001\002\000\030\016\123\020\115\041" +
    "\102\043\126\050\100\053\120\054\124\071\113\072\125" +
    "\073\107\130\077\001\002\000\032\016\123\020\115\041" +
    "\102\043\126\050\100\053\120\054\124\071\113\072\125" +
    "\073\107\105\342\130\077\001\002\000\036\016\uff8f\020" +
    "\uff8f\041\uff8f\043\uff8f\050\uff8f\051\uff8f\053\uff8f\054\uff8f" +
    "\061\uff8f\071\uff8f\072\uff8f\073\uff8f\105\uff8f\130\uff8f\001" +
    "\002\000\004\023\ufff4\001\002\000\004\057\345\001\002" +
    "\000\004\104\346\001\002\000\030\016\123\020\115\041" +
    "\102\043\126\050\100\053\120\054\124\071\113\072\125" +
    "\073\107\130\077\001\002\000\032\016\123\020\115\041" +
    "\102\043\126\050\100\053\120\054\124\071\113\072\125" +
    "\073\107\105\350\130\077\001\002\000\036\016\uff91\020" +
    "\uff91\041\uff91\043\uff91\050\uff91\051\uff91\053\uff91\054\uff91" +
    "\061\uff91\071\uff91\072\uff91\073\uff91\105\uff91\130\uff91\001" +
    "\002\000\004\073\352\001\002\000\004\111\353\001\002" +
    "\000\004\076\354\001\002\000\004\125\355\001\002\000" +
    "\004\071\356\001\002\000\004\073\357\001\002\000\004" +
    "\125\360\001\002\000\012\022\135\060\133\073\136\076" +
    "\132\001\002\000\004\103\362\001\002\000\004\104\363" +
    "\001\002\000\030\016\123\020\115\041\102\043\126\050" +
    "\100\053\120\054\124\071\113\072\125\073\107\130\077" +
    "\001\002\000\032\016\123\020\115\041\102\043\126\050" +
    "\100\053\120\054\124\071\113\072\125\073\107\105\365" +
    "\130\077\001\002\000\036\016\uff8e\020\uff8e\041\uff8e\043" +
    "\uff8e\050\uff8e\051\uff8e\053\uff8e\054\uff8e\061\uff8e\071\uff8e" +
    "\072\uff8e\073\uff8e\105\uff8e\130\uff8e\001\002\000\032\016" +
    "\123\020\115\041\102\043\126\050\100\053\120\054\124" +
    "\061\370\071\113\072\125\073\367\130\077\001\002\000" +
    "\010\023\ufff3\111\262\124\261\001\002\000\004\023\ufff6" +
    "\001\002\000\004\002\000\001\002\000\010\010\021\024" +
    "\373\073\374\001\002\000\010\005\ufffa\023\ufffa\073\ufffa" +
    "\001\002\000\010\005\ufff7\023\ufff7\073\ufff7\001\002\000" +
    "\006\033\ufffc\073\ufffc\001\002\000\006\033\ufffd\073\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\006\002\006\046\004\001\001\000\002\001" +
    "\001\000\004\003\013\001\001\000\004\052\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\371\007\017\010\021\001\001" +
    "\000\004\004\071\001\001\000\004\053\015\001\001\000" +
    "\010\005\016\007\017\010\021\001\001\000\006\007\067" +
    "\010\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\057\051\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\111\024\103\025\110\026\120\032\365\033" +
    "\075\035\107\036\102\037\104\040\113\041\121\043\115" +
    "\044\105\047\116\001\001\000\004\054\074\001\001\000" +
    "\036\012\111\024\103\025\110\026\120\032\100\033\075" +
    "\035\107\036\102\037\104\040\113\041\121\043\115\044" +
    "\105\047\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\012\163\024\160\025\110\026" +
    "\120\033\156\035\162\036\157\037\161\040\164\041\165" +
    "\043\115\044\105\047\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\133" +
    "\001\001\000\004\017\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\111\024\103\025\110\026" +
    "\120\032\155\033\075\035\107\036\102\037\104\040\113" +
    "\041\121\043\115\044\105\047\116\001\001\000\034\012" +
    "\163\024\160\025\110\026\120\033\156\035\162\036\157" +
    "\037\161\040\164\041\165\043\115\044\105\047\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\111\024\103\025\110\026\120\032" +
    "\171\033\075\035\107\036\102\037\104\040\113\041\121" +
    "\043\115\044\105\047\116\001\001\000\034\012\163\024" +
    "\160\025\110\026\120\033\156\035\162\036\157\037\161" +
    "\040\164\041\165\043\115\044\105\047\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\204" +
    "\024\205\025\110\026\120\047\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\111\024\103\025\110\026\120\032\217\033" +
    "\075\035\107\036\102\037\104\040\113\041\121\043\115" +
    "\044\105\047\116\001\001\000\034\012\163\024\160\025" +
    "\110\026\120\033\156\035\162\036\157\037\161\040\164" +
    "\041\165\043\115\044\105\047\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\111\024\103\025\110\026" +
    "\120\032\226\033\075\035\107\036\102\037\104\040\113" +
    "\041\121\043\115\044\105\047\116\001\001\000\034\012" +
    "\163\024\160\025\110\026\120\033\156\035\162\036\157" +
    "\037\161\040\164\041\165\043\115\044\105\047\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\111" +
    "\024\103\025\110\026\120\032\232\033\075\035\107\036" +
    "\102\037\104\040\113\041\121\043\115\044\105\047\116" +
    "\001\001\000\034\012\163\024\160\025\110\026\120\033" +
    "\156\035\162\036\157\037\161\040\164\041\165\043\115" +
    "\044\105\047\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\012\111\024\103\025\110\026\120\032\236" +
    "\033\075\035\107\036\102\037\104\040\113\041\121\043" +
    "\115\044\105\047\116\001\001\000\034\012\163\024\160" +
    "\025\110\026\120\033\156\035\162\036\157\037\161\040" +
    "\164\041\165\043\115\044\105\047\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\242\001\001\000" +
    "\002\001\001\000\014\012\204\024\246\025\110\026\120" +
    "\047\116\001\001\000\014\012\204\024\245\025\110\026" +
    "\120\047\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\204\024\253\025\110\026\120\047\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\266\014\265\015\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\303\014\265\015\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\302\015\263\001\001\000\006\014\275\015\263\001" +
    "\001\000\002\001\001\000\004\015\301\001\001\000\004" +
    "\015\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\111\024" +
    "\103\025\110\026\120\032\340\033\075\035\107\036\102" +
    "\037\104\040\113\041\121\043\115\044\105\047\116\001" +
    "\001\000\034\012\163\024\160\025\110\026\120\033\156" +
    "\035\162\036\157\037\161\040\164\041\165\043\115\044" +
    "\105\047\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\111\024" +
    "\103\025\110\026\120\032\346\033\075\035\107\036\102" +
    "\037\104\040\113\041\121\043\115\044\105\047\116\001" +
    "\001\000\034\012\163\024\160\025\110\026\120\033\156" +
    "\035\162\036\157\037\161\040\164\041\165\043\115\044" +
    "\105\047\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\360\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\111\024\103\025\110\026\120\032\363\033\075" +
    "\035\107\036\102\037\104\040\113\041\121\043\115\044" +
    "\105\047\116\001\001\000\034\012\163\024\160\025\110" +
    "\026\120\033\156\035\162\036\157\037\161\040\164\041" +
    "\165\043\115\044\105\047\116\001\001\000\002\001\001" +
    "\000\034\012\163\024\160\025\110\026\120\033\156\035" +
    "\162\036\157\037\161\040\164\041\165\043\115\044\105" +
    "\047\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\067\010\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 //Codigo del usuario
    private Editor editor;
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABEZA BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_programa. Tienes " + s);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABEZA ::= Identificador NT$0 Identificador 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABEZA ::= inicio_programa Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABEZA ::= inicio_programa error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta añadirle un nombre al programa");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABEZA ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CABEZA",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES fin_var 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al iniciar el bloque de las variables. Esta mal escrito inicio_var");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE_DECLARACION ::= Identificador NT$1 DECLARACIONES fin_var 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOQUE_DECLARACION ::= inicio_var DECLARACIONES Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> El bloque de variables debe termina con fin_var.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE_CODIGO ::= inicio_bloque SENTENCIA fin_bloque 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al iniciar el bloque de código. Debe iniciar con la palabra inicio_bloque, revisa si esta bien escrito.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_CODIGO ::= Identificador NT$2 SENTENCIA fin_bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE_CODIGO ::= inicio_bloque SENTENCIA Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al terminar el bloque de código. Debe finalizar con la palabra fin_bloque, revisa si esta bien escrito.");
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE_CODIGO ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES ::= DECLARACIONES DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES ::= DECLARACION_A 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_DATO ::= entero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_DATO ::= decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_DATO ::= logico 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_DATO ::= texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_DATO ::= display 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_DATO ::= motor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_DATO ::= led 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_DATO ::= tiempo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_VALOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_VALOR ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_VALOR ::= VALOR_LOGICO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_VALOR ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_VALOR ::= Tiempo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= definir Identificador como TIPO_DATO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= definir Identificador como arreglo Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= definir Identificador como arregloBi Cor_a Numero Cor_c Cor_a Numero Cor_c PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_A ::= definir Identificador como TIPO_DATO Asignacion_s TIPO_VALOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_A ::= definir Identificador como TIPO_DATO Asignacion_s TIPO_VALOR error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		editor.ERRORES.add("Falta un punto y coma " + sright);
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARACION_A",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR_LOGICO ::= verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR_LOGICO ::= falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALOR_LOGICO",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= Identificador Asignacion_s EXPRESION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TERMINO ::= TERMINO Mul FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TERMINO ::= TERMINO Div FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TERMINO",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= Par_a EXPRESION Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= Decimal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTOR ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= Identificador Igual falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= Identificador Igual verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= verdadero Igual Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICION ::= falso Igual Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICION ::= Identificador OP_REL Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= Numero OP_REL Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= Identificador OP_REL Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= Numero OP_REL Numero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICION ::= verdadero 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= falso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_REL ::= Mayor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_REL ::= Menor_i 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_REL ::= Diferente 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_REL ::= Mayor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_REL ::= Menor 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DIRECCION ::= izquierda 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DIRECCION ::= derecha 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIRECCION",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FACIL_SENTENCIA ::= ASIGNACION PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FACIL_SENTENCIA ::= METODO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FACIL_SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // METODO ::= incrementar Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // METODO ::= decrementar Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // METODO ::= MOSTRAR_TEXTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // METODO ::= MANIPULAR_COMPONENTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MOSTRAR_TEXTO ::= mostrar Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MOSTRAR_TEXTO",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MANIPULAR_COMPONENTE ::= Identificador PUNTO encender 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MANIPULAR_COMPONENTE ::= Identificador PUNTO apagar 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MANIPULAR_COMPONENTE ::= Identificador PUNTO encender PUNTO COLOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MANIPULAR_COMPONENTE ::= Identificador PUNTO girar PUNTO DIRECCION Par_a TIEMPO Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MANIPULAR_COMPONENTE ::= Identificador PUNTO visualizar Par_a TEXTO Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MANIPULAR_COMPONENTE",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("COLOR",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIEMPO ::= Tiempo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIEMPO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TIEMPO",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TEXTO ::= Texto 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA ::= SENTENCIA FACIL_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA ::= FACIL_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA ::= SENTENCIA DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA ::= DECISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA ::= SENTENCIA SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA ::= SENTENCIA_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA ::= SENTENCIA SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA ::= SENTENCIA_FACIL_REPETIR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA ::= SENTENCIA SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA ::= SENTENCIA SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA ::= SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA ::= SENTENCIA SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA ::= SENTENCIA_SELECTOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECISION ::= SENTENCIA_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECISION ::= SENTENCIA_FACIL_SI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECISION",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_SI ::= si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION Par_c FACIL_SENTENCIA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_FACIL_SI ::= facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_SI",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_REPETIR ::= repetir Numero veces Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_REPETIR",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_FACIL_REPETIR ::= facil_repetir Par_a Numero COMA FACIL_SENTENCIA Par_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FACIL_REPETIR",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_MIENTRAS ::= mientras Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_PARA ::= para Par_a Identificador Asignacion_s Numero COMA incrementar Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-13)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_SELECTOR ::= selector Par_a Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECTOR",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BLOQUE_SELECTOR ::= Numero DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BLOQUE_SELECTOR ::= BLOQUE_SELECTOR Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BLOQUE_SELECTOR ::= Texto DosPuntos SENTENCIA salir PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOQUE_SELECTOR",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
