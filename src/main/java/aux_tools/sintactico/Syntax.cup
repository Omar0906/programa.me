package aux_tools.sintactico;
import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;
import aux_tools.sintactico.ErroresSintacticos;
import aux_tools.Simbolo;
import java.util.HashMap;
import java.util.Map;
parser code
{: //Codigo del usuario
    private String[] componentes = {"motor","led","display"};
    private Editor editor;
    private int conTemp = 0;
    private int conEti = 0;
    private int contEtiSw = 0;
    private String idActual = "";
    private HashMap<Integer, String> codigoTemporal = new HashMap<>();
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }
    private void addErrores(int linea, String mensaje){
        editor.ERRORES.add(new ErroresSintacticos(linea,mensaje));
    }
    private void addIntermedio(String linea){
        editor.codIntermedio.add(linea);
    }
    private void addCodIntermedio(int linea, String instr){
        editor.codigoIntermedio.put(linea,instr);
    }
    private void addEtiqueta(int linea, String etiqueta){
        editor.etiquetas.put(linea, etiqueta);
    }
    private void mensaje(String msg){
        System.out.println(msg);
    }
    private boolean esComponente(String tipo){
        return (tipo == "motor" || tipo == "led" || tipo == "display" || tipo == "ledRGB")? true : false;
    }

:};
//Terminales
terminal Integer Numero;
terminal Double Decimal;
terminal String Texto;
terminal apagar, inicio_bloque, caso, como, definir, derecha, display, facil_bloque, facil_hacer_mientras,asignar,
    facil_repetir, facil_selector, facil_si, facil_sino, falso, fin_programa, fin_var, girar, grados, hacer, hr, incluir, 
    inicio_programa, inicio_var, intensidad, izquierda, led, ledRGB, mientras, min, mostrar, 
    motor,motor_paso, prender, repetir, salir, seg, selector, si, sino, tiempo, veces, verdadero, fin_bloque,
    decimal,entero,texto,logico, y, no, o,incrementar, decrementar,
    Identificador, Tiempo, PUNTO_COMA, DosPuntos, Par_a, Par_c,Lla_a,Lla_c,Cor_a,Cor_c,Igual,Asignacion_s,
    Suma,Resta,Mul,Div,Menor,Mayor,Diferente,Mayor_i,Menor_i,detener,usar,
    ERROR,PUNTO,COMA,visualizar,para,avanzar,retroceder,estado,
    rojo,verde,azul,arreglo,arregloBi;
//No terminales
non terminal INICIO,BLOQUE_DECLARACION,BLOQUE_CODIGO, DECLARACIONES, CODIGO,
    DECLARACION,DECLARACION_A,VALOR_LOGICO_DEC,ASIGNACION,EXPRESION,TERMINO,VALOR_BOOL,
    FACTOR,CONDICION,OP_REL,COMPONENTE,DIRECCION,PARAMETRO_ENTERO,
    FACIL_SENTENCIA,METODO,MOSTRAR_TEXTO,COLOR,TIEMPO,TEXTO,
    SENTENCIA, DECISION,DECISION_FACIL,SENTENCIA_REPETIR,OP_LOGICO,
    SENTENCIA_FACIL_REPETIR,SENTENCIA_MIENTRAS,SENTENCIA_PARA,
    SENTENCIA_SELECTOR,SENTENCIA_FACIL_SELECTOR,OP_BOOL,PINES,
    SENTENCIA_SI,SENTENCIA_FACIL_SI,INC_DEC,PARAMETRO_TEXTO,
    BLOQUE_SELECTOR,CABEZA,SENTENCIA_FACIL_SINO,DECLARACION_ARREGLO,
    MANIPULAR_COMPONENTE,TIPO_DATO_DEC,TIPO_VALOR_DEC;  
precedence left Suma, Resta, o;
precedence left y, Mul, Div;
precedence left Numero;
//Producción con la que iniciar
start with INICIO;

INICIO ::=
     CABEZA  BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa
        {:System.out.println("Programa Correcto!!!!!");:} |
     error:s BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa
        {:addErrores(sright+1,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del programa");:} |
     CABEZA:s error BLOQUE_CODIGO fin_programa
        {:addErrores(sright+1,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de declaración");:} |
     CABEZA:s BLOQUE_CODIGO fin_programa
        {:addErrores(sright+1,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de declaración");:} |
     CABEZA BLOQUE_DECLARACION error:s fin_programa
        {:addErrores(sright+1,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el bloque de código");:} |
     error:s INICIO
      {:addErrores(sright,"Contenido no esperado antes de iniciar el programa");:}
|     error:s
      {:addErrores(sright,"Programa no reconocido");:}

;
CABEZA ::= 
    inicio_programa Identificador:id usar Texto PUNTO_COMA
        {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),"Nombre del programa");
            System.out.println("Inicio y nombre correcto, junto con la condiguracion usar");
        }:} |
    Identificador:s Identificador usar Texto PUNTO_COMA
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_programa. Tienes: " + s.toString());:}|
    inicio_programa:s usar Texto PUNTO_COMA
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó ponerle nombre al programa.");:}|
    inicio_programa Identificador:s  Texto PUNTO_COMA
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la palabra \"usar\".");:}|
    inicio_programa Identificador usar:s PUNTO_COMA
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la configuración de USAR.");:}|
    inicio_programa Identificador usar Texto:s
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner el ;");:}|
    inicio_programa Identificador:s
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó poner la configuración usar");:}
;
BLOQUE_DECLARACION ::=  
    inicio_var DECLARACIONES fin_var 
        {:System.out.println("Bloque declaracion correcto");:} |
    inicio_var fin_var 
        {:System.out.println("Bloque declaracion correcto vacío");:} |
    inicio_var:s error
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Bloque de declaraciones no completo");:} |
    inicio_var DECLARACIONES Identificador:s
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir fin_var. Tienes "+ s.toString());:} |
    DECLARACIONES Identificador:s
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del bloque de declaraciones.");:} |
    error:s DECLARACIONES fin_var
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al escribir inicio_var.");:}
;
BLOQUE_CODIGO ::=   
         inicio_bloque fin_bloque
         {:System.out.println("Se encontro un BLOQUE_CODIGO vacío correcto");:}|
         inicio_bloque SENTENCIA fin_bloque 
         {:System.out.println("Se encontro un BLOQUE_CODIGO correcto\n");:}|
         error:s SENTENCIA fin_bloque 
         {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No encontrado el inicio del bloque de código");:}|
         Identificador:s SENTENCIA fin_bloque 
         {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribiste mal inicio_bloque. Tienes: " + s.toString());:}|
         error:s fin_bloque 
         {:addErrores(sright,"Error al identificar el bloque de código " + sright);:}|
         error:s fin_programa 
         {:addErrores(sright,"Error al identificar el bloque de código " + sright);:}
;
DECLARACIONES ::=
    DECLARACIONES DECLARACION| 
    DECLARACION |
    DECLARACIONES DECLARACION_A|
    DECLARACION_A |
    DECLARACIONES DECLARACION_ARREGLO |
    DECLARACION_ARREGLO |
    error:s fin_var 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Declaración no válida.");:}|
    DECLARACIONES error:s PUNTO_COMA 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Declaración no válida.");:}
;
DECLARACION ::= 
    definir Identificador:id como TIPO_DATO_DEC:td PUNTO_COMA:s
        {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " ya ha sido declarada.");
        }else{
            Simbolo temp = new Simbolo(id.toString(), sright);
            editor.tablaSimbolos_id.addToken(temp);
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
            if(td.toString() == "entero" || td.toString()=="decimal"){
                addCodIntermedio(sright,id.toString() + " = 0;");
            }else if(td.toString() == "texto"){
                addCodIntermedio(sright,id.toString() + " = ' ';");
            }else if(td.toString() == "logico"){
                addCodIntermedio(sright,id.toString() + " = false;");
            }else{
                addCodIntermedio(sright,id.toString() + " = null;");
            }
        }
        :}|
    definir Identificador como TIPO_DATO_DEC error:s 
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;");:} |
    definir Identificador Identificador:s TIPO_DATO_DEC PUNTO_COMA
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\" ");:} |
    definir Identificador TIPO_DATO_DEC:s PUNTO_COMA
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar la palabra \"como\".");:} |
    definir Identificador como:s PUNTO_COMA
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el tipo de dato.");:}
    ;
DECLARACION_A ::= 
    definir Identificador:id como TIPO_DATO_DEC:td Asignacion_s TIPO_VALOR_DEC:val PUNTO_COMA:s
        {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " ya ha sido declarada.");
        }else{
            editor.tablaSimbolos_id.addToken(new Simbolo(id.toString(), sright));
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(), val);
        } :}|
    definir Identificador:id como TIPO_DATO_DEC:td Asignacion_s Identificador:val PUNTO_COMA
        {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " ya ha sido declarada.");
        }else if(!editor.tablaSimbolos_id.existeToken(val.toString())){
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + val.toString() + " no existe.");
        }else{
            Simbolo temp = new Simbolo(id.toString(), idright);
            editor.tablaSimbolos_id.addToken(temp);
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
            Simbolo temp2 = editor.tablaSimbolos_id.getToken(val.toString());
            if(editor.tablaSimbolos_id.nivelTipos(temp,temp2)){
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + val.toString() + " no es del tipo " + temp.getTipo() + ".");
            }else{
                editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
            }
        }
        :} |
    definir Identificador como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC:s
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Falta agregar el ;");:} |
    definir Identificador Identificador:s TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Escribió " + s + " , en lugar de \"como\".");:} |
    definir como TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC:s PUNTO_COMA
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el nombre del identificador.");:} |
    definir Identificador:s TIPO_DATO_DEC Asignacion_s TIPO_VALOR_DEC PUNTO_COMA
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar la palabra \"como\".");:} |
    definir Identificador como:s Asignacion_s TIPO_VALOR_DEC PUNTO_COMA
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el tipo de dato.");:} |
    definir Identificador como TIPO_DATO_DEC:s TIPO_VALOR_DEC PUNTO_COMA
        {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó agregar el signo =.");:}

;
ASIGNACION ::= 
    Identificador:id Asignacion_s:s Texto:val {:
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "texto"){
                Simbolo temp = new Simbolo(id.toString(),"texto",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val);
                editor.tablaSimbolos_id.updateToken(temp);
                addCodIntermedio(sright,id.toString() + " = '" + val.toString() + "';");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo texto.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :} |
        Identificador:id Asignacion_s:s Decimal:val {:
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "decimal"){
                Simbolo temp = new Simbolo(id.toString(),"decimal",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val);
                editor.tablaSimbolos_id.updateToken(temp);
                addCodIntermedio(sright,id.toString() + " = " + val.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :} |
    Identificador:id Asignacion_s:s verdadero:val{:
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "logico"){
                Simbolo temp = new Simbolo(id.toString(),"logico",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val);
                editor.tablaSimbolos_id.updateToken(temp);
                addCodIntermedio(sright,id.toString() + " = true;");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo logico.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :} |
    Identificador:id Asignacion_s:s Identificador:val{:
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            Simbolo temp2 = (editor.tablaSimbolos_id.getToken(val.toString()));
            if(temp.getTipo().equals(temp2.getTipo())){
                editor.tablaSimbolos_id.updateToken(new Simbolo(id.toString(),"entero",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),editor.tablaSimbolos_id.getToken(val.toString()).getValor()));
                addCodIntermedio(sright,id.toString() + " = " + val.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo " + temp.getTipo() + ".");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        System.out.println("Se ha encontrado ASIGNACION" + val);:} |
    Identificador:id Asignacion_s:s Numero:val{:
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "entero"){
                Simbolo temp = new Simbolo(id.toString(),"entero",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val);
                editor.tablaSimbolos_id.updateToken(temp);
                addCodIntermedio(sright,id.toString() + " = " + val.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo entero.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        System.out.println("Se ha encontrado ASIGNACION" + val);:} |
    Identificador:id Asignacion_s:s falso:val{:
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.getToken(id.toString()).getTipo() == "logico"){
                Simbolo temp = new Simbolo(id.toString(),"logico",editor.tablaSimbolos_id.getToken(id.toString()).getLinea_declaracion(),val);
                editor.tablaSimbolos_id.updateToken(temp);
                addCodIntermedio(sright,id.toString() + " = false;");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo logico.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :} |
    Identificador:id Asignacion_s EXPRESION:s
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),temp.getTipo(),s.toString());
            addCodIntermedio(sright,editor.codigoIntermedio.get(sright) + "\n   " + id.toString() + " = T" + conTemp  + ";");
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :} |
    Identificador:s Texto
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");:} |
    Identificador:s verdadero
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");:} |
    Identificador:s falso
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");:} |
    Identificador:s EXPRESION
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falto poner el signo =");:} |
    Identificador Asignacion_s error:s
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo determinar el valor a asignar");:}
;
EXPRESION ::=
    Identificador:id Suma Numero:s
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) + Double.parseDouble(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) + Integer.parseInt(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Suma Decimal:s
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) + Double.parseDouble(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> No se puede sumar el valor " + s.toString() + " a una variable de tipo entero.");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Suma Identificador:s
   {:   if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.existeToken(s.toString())){
                Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
                Simbolo temp2 = (editor.tablaSimbolos_id.getToken(s.toString()));
                if(!(temp.getTipo().equals("decimal") || temp.getTipo().equals("entero"))){
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> No se puede realizar la operación por el tipo de dato de " + id.toString() + ".");
                }else if(temp2.getTipo().equals("decimal") || temp2.getTipo().equals("entero")){
                    if(temp.getTipo().equals("decimal") || temp2.getTipo().equals("decimal")){
                        RESULT = Double.parseDouble(temp.getValor().toString()) + Double.parseDouble(temp2.getValor().toString());
                        addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
                    }else{
                        RESULT = Integer.parseInt(temp.getValor().toString()) + Integer.parseInt(temp2.getValor().toString());
                        addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " + " + s.toString() + ";");
                    }
                }else{
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> No se puede realizar la operación por el tipo de dato de " + s.toString() + ".");
                }
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + s.toString() + " no ha sido declarada");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Resta Numero:s
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) - Double.parseDouble(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) - Integer.parseInt(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Resta Decimal:s
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) - Double.parseDouble(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " es de tipo entero y no se puede restarle un valor decimal.");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Resta Identificador:s
   {:   if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.existeToken(s.toString())){
                Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
                Simbolo temp2 = (editor.tablaSimbolos_id.getToken(s.toString()));
                if(!(temp.getTipo().equals("decimal") || temp.getTipo().equals("entero"))){
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> No se puede realizar la operación por el tipo de dato de " + id.toString() + ".");
                }else if(temp2.getTipo().equals("decimal") || temp2.getTipo().equals("entero")){
                    if(temp.getTipo().equals("decimal") || temp2.getTipo().equals("decimal")){
                        RESULT = Double.parseDouble(temp.getValor().toString()) - Double.parseDouble(temp2.getValor().toString());
                        addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
                    }else{
                        RESULT = Integer.parseInt(temp.getValor().toString()) - Integer.parseInt(temp2.getValor().toString());
                        addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " - " + s.toString() + ";");
                    }
                }else{
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> No se puede realizar la operación por el tipo de dato de " + s.toString() + ".");
                }
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + s.toString() + " no ha sido declarada");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Mul Numero:s
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) * Double.parseDouble(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) * Integer.parseInt(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Mul Decimal:s
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) * Double.parseDouble(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " es de tipo entero y no se puede multiplicar por un valor decimal.");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Mul Identificador:s
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.existeToken(s.toString())){
                Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
                Simbolo temp2 = (editor.tablaSimbolos_id.getToken(s.toString()));
                if(!(temp.getTipo().equals("decimal") || temp.getTipo().equals("entero"))){
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> No se puede realizar la operación por el tipo de dato de " + id.toString() + ".");
                }else if(temp2.getTipo().equals("decimal") || temp2.getTipo().equals("entero")){
                    if(temp.getTipo().equals("decimal") || temp2.getTipo().equals("decimal")){
                        RESULT = Double.parseDouble(temp.getValor().toString()) * Double.parseDouble(temp2.getValor().toString());
                        addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
                    }else{
                        RESULT = Integer.parseInt(temp.getValor().toString()) * Integer.parseInt(temp2.getValor().toString());
                        addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " * " + s.toString() + ";");
                    }
                }else{
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> No se puede realizar la operación por el tipo de dato de " + s.toString() + ".");
                }
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + s.toString() + " no ha sido declarada");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Div Numero:s
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) / Double.parseDouble(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(temp.getValor().toString()) / Integer.parseInt(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Div Decimal:s
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(temp.getValor().toString()) / Double.parseDouble(s.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " es de tipo entero y no se puede dividir por un valor decimal.");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id Div Identificador:s
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.existeToken(s.toString())){
                Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
                Simbolo temp2 = (editor.tablaSimbolos_id.getToken(s.toString()));
                if(!(temp.getTipo().equals("decimal") || temp.getTipo().equals("entero"))){
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> No se puede realizar la operación por el tipo de dato de " + id.toString() + ".");
                }else if(temp2.getTipo().equals("decimal") || temp2.getTipo().equals("entero")){
                    if(temp.getTipo().equals("decimal") || temp2.getTipo().equals("decimal")){
                        RESULT = Double.parseDouble(temp.getValor().toString()) / Double.parseDouble(temp2.getValor().toString());
                        addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
                    }else{
                        RESULT = Integer.parseInt(temp.getValor().toString()) / Integer.parseInt(temp2.getValor().toString());
                        addCodIntermedio(sright,"T" + (++conTemp) + " = " + id.toString() + " / " + s.toString() + ";");
                    }
                }else{
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> No se puede realizar la operación por el tipo de dato de " + s.toString() + ".");
                }
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + s.toString() + " no ha sido declarada");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Numero:s Suma Numero:id
    {:RESULT = Integer.parseInt(s.toString()) + Integer.parseInt(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");:}|
    Numero:s Suma Decimal:id
    {:RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");:}|
    Numero:s Suma Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) + Integer.parseInt(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Numero:s Resta Numero:id
    {:RESULT = Integer.parseInt(s.toString()) - Integer.parseInt(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");:}|
    Numero:s Resta Decimal:id
    {:RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");:}|
    Numero:s Resta Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) - Integer.parseInt(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Numero:s Mul Numero:id
    {:RESULT = Integer.parseInt(s.toString()) * Integer.parseInt(id.toString());
                addCodIntermedio(idright,"T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");:}|
    Numero:s Mul Decimal:id
    {:RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(id.toString());
                addCodIntermedio(idright,"T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");:}|
    Numero:s Mul Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) * Integer.parseInt(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Numero:s Div Numero:id
    {:RESULT = Integer.parseInt(s.toString()) / Integer.parseInt(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");:}|
    Numero:s Div Decimal:id
    {:RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");:}|
    Numero:s Div Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) / Integer.parseInt(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Decimal:s Suma Numero:id
    {:RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");:}|
    Decimal:s Suma Decimal:id
    {:RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");:}|
    Decimal:s Suma Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) + Double.parseDouble(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) + Integer.parseInt(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " + " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Decimal:s Resta Numero:id
    {:RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");:}|
    Decimal:s Resta Decimal:id
    {:RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");:}|
    Decimal:s Resta Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) - Double.parseDouble(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) - Integer.parseInt(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " - " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Decimal:s Mul Numero:id
    {:RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");:}|
    Decimal:s Mul Decimal:id
    {:RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");:}|
    Decimal:s Mul Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) * Double.parseDouble(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) * Integer.parseInt(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " * " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Decimal:s Div Numero:id
    {:RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");:}|
    Decimal:s Div Decimal:id
    {:RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(id.toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");:}|
    Decimal:s Div Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("decimal")){
                RESULT = Double.parseDouble(s.toString()) / Double.parseDouble(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
            }else if(temp.getTipo().equals("entero")){
                RESULT = Integer.parseInt(s.toString()) / Integer.parseInt(temp.getValor().toString());
                addCodIntermedio(sright,"T" + (++conTemp) + " = " + s.toString() + " / " + id.toString() + ";");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha es de tipo entero o decimal.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}
;
CONDICION ::=
    Identificador:id OP_REL:op Numero:val
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));            
            if(!(temp.getTipo().equals("entero") || temp.getTipo().equals("decimal"))){
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> No de puede realizar la comparación");
                RESULT = "";
            }
            RESULT = id.toString() + " " + op.toString() + " " +val.toString() + "";
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Identificador:id OP_REL:op Decimal:val
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(!(temp.getTipo().equals("entero") || temp.getTipo().equals("decimal"))){
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> No de puede realizar la comparación");
                RESULT = "";
            }       
            RESULT = id.toString() + " " + op.toString() + " " +val.toString() + "";
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Numero:val OP_REL:op Identificador:id
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));            
            if(!(temp.getTipo().equals("entero") || temp.getTipo().equals("decimal"))){
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> No de puede realizar la comparación");
                RESULT = "";
            }
            RESULT = val.toString() + " " + op.toString() + " " +id.toString() + "";
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :}|
    Decimal:val OP_REL:op Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(!(temp.getTipo().equals("entero") || temp.getTipo().equals("decimal"))){
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> No de puede realizar la comparación");
                RESULT = "";
            }       
            RESULT = val.toString() + " " + op.toString() + " " +id.toString() + "";
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
        :}|
    Decimal:val OP_REL:op Numero:val2
    {:
       RESULT = val.toString() + " " + op.toString() + " " +val2.toString() + "";
    :}|
    Decimal:val OP_REL:op Decimal:val2
    {:
       RESULT = val.toString() + " " + op.toString() + " " +val2.toString() + "";
    :}|
    Numero:val OP_REL:op Numero:val2
    {:
       RESULT = val.toString() + " " + op.toString() + " " +val2.toString() + "";
    :}|
    Numero:val OP_REL:op Decimal:val2
    {:
       RESULT = val.toString() + " " + op.toString() + " " +val2.toString() + "";
    :}|
    TIPO_VALOR_DEC:s TIPO_VALOR_DEC
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se necesita un operador relacional.");:}|
    Identificador:s TIPO_VALOR_DEC
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se necesita un operador relacional.");:}|
    VALOR_LOGICO_DEC:val OP_LOGICO:op VALOR_LOGICO_DEC:val2 
    {:
        RESULT = val.toString() + " " + op.toString() + " " +val2.toString() + "";
    :}|
    VALOR_LOGICO_DEC:val
    {:
        RESULT = val.toString();
    :}|
    Identificador:id 
    {: if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(!temp.getTipo().equals("logico")){
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> El identificador " + id.toString() + " no es del tipo lógico.");
                RESULT = "";
            }       
            switch(temp.getValor().toString()){
                case "verdadero":
                    RESULT = true;
                default:
                    RESULT = false;
            }
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :}|
    Identificador:id PUNTO:s estado
    {:
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(!temp.getTipo().equals("led")){
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> El identificador " + id.toString() + " no es del tipo led.");
                RESULT = "";
            }
            if(temp.getValor() != null){
                RESULT = "true";
            }else{
                RESULT = "false";
            }
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :}
;
OP_REL ::= Mayor_i {:RESULT = ">=";:} | Menor_i{:RESULT = "<=";:} | Diferente {:RESULT = "!=";:}| Mayor {:RESULT = ">";:}| Menor {:RESULT = "<";:}| Igual {:RESULT = "==";:}
;
DIRECCION ::= izquierda {:RESULT = "izquierda";:}| derecha{:RESULT = "derecha";:}
;
PINES ::= PINES COMA Numero:s {:RESULT += ","+s.toString();:}|Numero:s {:RESULT = "" + s.toString();:}
;
METODO ::=
    incrementar:s Identificador:id
    {:
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("entero")){
                editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),"entero",Integer.parseInt(temp.getValor().toString())+1);
                addCodIntermedio(sright,id.toString()+"++;");
                mensaje("Incrementar entero");
            }else if(temp.getTipo().equals("decimal")){
                editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),"decimal",Double.parseDouble(temp.getValor().toString())+1);
                addCodIntermedio(sright,id.toString()+"++;");
                mensaje("Incrementar decimal");
            }
            else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no se puede incrementar.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }:} |
    decrementar:s Identificador:id
    {:if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("entero")){
                editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),"entero",Integer.parseInt(temp.getValor().toString())-1);
                addCodIntermedio(sright,id.toString()+"--;");
                mensaje("Incrementar entero");
            }else if(temp.getTipo().equals("decimal")){
                editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),"decimal",Double.parseDouble(temp.getValor().toString())-1);
                addCodIntermedio(sright,id.toString()+"--;");
                mensaje("Incrementar decimal");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no se puede decrementar.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }:} |
    MOSTRAR_TEXTO |
    MANIPULAR_COMPONENTE
;
//mostrar "cadena"
MOSTRAR_TEXTO ::= 
    mostrar PARAMETRO_TEXTO:s
    {:addCodIntermedio(sright,"mostrar(" + s.toString() + ");");:}
    |
    mostrar error:s {:editor.ERRORES.add(new ErroresSintacticos(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error al identificar el texto dado"));:}
;
MANIPULAR_COMPONENTE ::=
    Identificador:id PUNTO:s prender
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("led")){
                addCodIntermedio(sright,"prender(" + id.toString() + ");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo led.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :}|Identificador:id PUNTO:s estado
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("led")){
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo led.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :}|
    Identificador:id PUNTO:s apagar
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("led")){
                addCodIntermedio(sright,"apagar(" + id.toString() + ");"); 
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo led.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :} |
    Identificador:id PUNTO:s asignar Par_a PINES:p Par_c
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(esComponente(temp.getTipo())){
                editor.tablaSimbolos_id.ubicarToken(temp.getLexema(),temp.getTipo(),"("+p.toString()+")");
                addCodIntermedio(sright,"asignar(" + id.toString() + ", " + "("+p.toString()+")"  +" );");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como algún componente.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :} |
    Identificador PUNTO asignar Par_a:s  Par_c
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó ingresar la lista de pines.");:} |
    Identificador PUNTO asignar:s  PINES Par_c
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Faltó abrir el paréntesis.");:} |
    Identificador PUNTO asignar Par_a error:s Par_c
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Lista de pines no válida.");:} |
    Identificador PUNTO prender PUNTO COLOR {:System.out.println("\nEncontrado prender color");:} |
    Identificador:id PUNTO:s detener
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("motor")){
                addCodIntermedio(sright,"detener(" + id.toString() + ");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como motor.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :} |
    Identificador:id PUNTO:s girar PUNTO DIRECCION:d
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("motor")){
                addCodIntermedio(sright,"girar_" + d.toString() + "(" + id.toString() + ");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como motor.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :} |
    Identificador:id PUNTO:s girar PUNTO DIRECCION:dir Par_a TIEMPO:t Par_c
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("motor")){
                addCodIntermedio(sright,"girar_" + dir.toString() + "(" + id.toString() + ", " + t.toString() + ");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como motor.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :} |
    Identificador PUNTO girar PUNTO DIRECCION Par_a error:s Par_c PUNTO_COMA
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito el valor de tiempo. Recuerda que es un numero entero y ya sea seg, hr o min.");:}|
    Identificador:id PUNTO:s visualizar Par_a Texto:t Par_c
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("display")){
                addCodIntermedio(sright,"visualizar(" + id.toString() + ", " + t.toString() +");");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como display.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :}|
    Identificador:id PUNTO:s visualizar Par_a Identificador:id2 Par_c
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("display")){
                if(editor.tablaSimbolos_id.existeToken(id2.toString())){
                    Simbolo temp2 = (editor.tablaSimbolos_id.getToken(id2.toString()));
                    if(temp2.getTipo().equals("texto")){
                addCodIntermedio(sright,"visualizar(" + id.toString() + ", " + temp2.getValor().toString() +");");
                    }else{
                        addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo texto.");
                    }
                }else{
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
                }
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como display.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :}|
    Identificador PUNTO visualizar Par_a error:s Par_c
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> No se pudo identificar el texto a visualizar");:} |
    Identificador PUNTO error:s
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrita la función del componente.");:}
;

COLOR ::= rojo | verde | azul;
TIEMPO ::= 
    Tiempo:t
    {:RESULT = t.toString() ;:}|
    Identificador:id
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("display")){
                RESULT = temp.getValor().toString();
            }else{
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo tiempo.");
            }
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :}
;
SENTENCIA ::=   
    SENTENCIA METODO PUNTO_COMA |
    METODO PUNTO_COMA|
    SENTENCIA METODO:s
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");:} |
    METODO:s
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");:}|
    SENTENCIA ASIGNACION PUNTO_COMA |
    ASIGNACION PUNTO_COMA |
    SENTENCIA ASIGNACION:s
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");:} |
    ASIGNACION:s 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te faltó un ;");:} |
    SENTENCIA DECISION |
    DECISION |
    SENTENCIA SENTENCIA_REPETIR |
    SENTENCIA_REPETIR |
    SENTENCIA SENTENCIA_MIENTRAS |
    SENTENCIA_MIENTRAS |
    SENTENCIA SENTENCIA_PARA|
    SENTENCIA_PARA |
    SENTENCIA SENTENCIA_SELECTOR |
    SENTENCIA_SELECTOR |
    error  PUNTO_COMA:s
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");:} |
    error:s  fin_bloque
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");:} |
    error:s  Lla_c
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");:}
;
DECISION ::= SENTENCIA_SI
;
SENTENCIA_SI ::= 
    si:s Par_a CONDICION:c Par_c Lla_a SENTENCIA Lla_c:s1 
    {:System.out.println("Se ha encontrado SENTENCIA SI");
        addCodIntermedio(sright,"ifFalse " + c.toString()  +" goto L" + ++conEti);
        addEtiqueta(s1right,"L" + conEti + ": \n");
    :} |
    si Par_a CONDICION Par_c Lla_a Lla_c {:System.out.println("Se ha encontrado SENTENCIA SI");:} |
    si Par_a error:s Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si.");:} |
    si:s CONDICION Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la condición");:} |
    si Par_a:s Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición");:} |
    si Par_a CONDICION:s Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis de la condición");:} |
    si Par_a CONDICION Par_c:s  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque si");:} |
    si:s Par_a CONDICION:c Par_c Lla_a SENTENCIA Lla_c sino Lla_a:s1 SENTENCIA Lla_c
    {:
        System.out.println("Se ha encontrado SENTENCIA SI");
        addCodIntermedio(sright,"ifFalse " + c.toString()  +" goto L" + ++conEti);
        addEtiqueta(s1right,"L" + conEti + ": \n");
    :} |
    si Par_a error:s Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Hubo un error en la declaración de la condicion de la sentencia si.");:} |
    si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c:s Lla_a SENTENCIA Lla_c
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"sino\"");:} |
    si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino:s SENTENCIA Lla_c
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque sino");:}
;
SENTENCIA_REPETIR ::= 
    repetir:s1 Identificador:id veces:s Lla_a SENTENCIA Lla_c:s2
    {:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("entero")){
                addEtiqueta(s1right,"   T" + conTemp + " = 0;\nL" + (++conEti) + ":\n");
                addCodIntermedio(s1right,"ifFalse T" + ++conTemp + " < " + temp.getValor().toString() + " goto L" + ++conEti);
                addEtiqueta(s2right, "   T"+ conTemp +"++;\n   goto L"+ (conTemp - 1) +"\nL" + (conEti) + ":\n");
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo entero.");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :}|
    repetir:s1 Numero:s veces Lla_a SENTENCIA Lla_c:s2
    {:
        addEtiqueta(s1right,"   T" + conTemp + " = 0;\nL" + (++conEti) + ":\n");
        addCodIntermedio(s1right,"ifFalse T" + ++conTemp + " < " + s.toString() + " goto L" + ++conEti);
        addEtiqueta(s2right,"   " +  "T"+ conTemp +"++;\n   goto L"+ (conEti - 1) +"\nL" + (conEti) + ":\n");
        System.out.println("Se ha encontrado REPETIR");
    :} |
    Identificador:s Identificador veces Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"repetir\". Tienes "+s.toString());:} |
    repetir:s veces Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el número entero de repeticiones");:} |
    repetir:s Identificador  Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"veces\"");:} |
    repetir Identificador Identificador:s Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"veces\". Tienes: " +s.toString());:} |
    repetir:s Identificador veces  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque repetir");:} |
    repetir:s Numero  Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la palabra \"veces\"");:} |
    repetir Numero Identificador:s Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Esta mal escrito \"veces\". Tienes: " +s.toString());:} |
    repetir:s Numero veces  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque repetir");:} |
    repetir error:s Lla_a SENTENCIA Lla_c
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La sentencia repetir esta incompleta");:}
;
SENTENCIA_MIENTRAS ::=
    mientras:s1 Par_a CONDICION:c Par_c Lla_a SENTENCIA Lla_c:s2
    {:
        addEtiqueta(s1right,"L" + (++conEti) + ":\n");
        addCodIntermedio(s1right,"ifFalse " + c.toString() + " goto L" + ++conEti);
        addEtiqueta(s2right,"   goto L"+ (conEti - 1) +"\nL" + (conEti) + ":\n");
        System.out.println("Se ha encontrado MIENTRAS");
    :}|
    mientras Par_a CONDICION Par_c Lla_a Lla_c {:System.out.println("Se ha encontrado MIENTRAS");:}|
    mientras:s CONDICION Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");:} |
    mientras Par_a:s Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condicion");:} |
    mientras Par_a:s CONDICION  Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");:} |
    mientras Par_a CONDICION Par_c:s  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque mientras");:} |
    mientras error:s Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintaxis del ciclo mientras, por favor revisalo");:}
;
SENTENCIA_PARA ::= 
    para:s Par_a:s1 Identificador:id Asignacion_s Numero COMA INC_DEC:val Identificador:id2 COMA CONDICION:c Par_c Lla_a SENTENCIA Lla_c:s2
    {:  
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            if(editor.tablaSimbolos_id.existeToken(id2.toString())){
                Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
                if(temp.getTipo().equals("entero")){
                    if(!temp.getLexema().equals(id2.toString())){
                        addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable \"" + id2.toString() + "\" no corresponde a la especificada.");
                    }
                    addEtiqueta(s1right,id.toString() + " = 0;\n" + "L" + (++conEti) +  ":\n");
                    addCodIntermedio(s1right,"ifFalse " + c.toString() + " goto L" + ++conEti);
                    addEtiqueta(s2right,  "   " + id.toString() + "" + val.toString() + "\n    goto L"+ (conEti - 1) +"\nL" + (conEti) + ":\n");
                    System.out.println("Se ha encontrado MIENTRAS");
                }else{
                    addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable "+ id.toString() + " no esta declarada como tipo entero.");
                }
            }else{
                addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id2.toString() + " no ha sido declarada");
            }
        }else{
            addErrores(sright,"Error semántico en la línea " + (sright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :} | 
    
    para:s  Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");:}|
    para:s Par_a Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner un nuevo identificador");:}|
    para Par_a Identificador:s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el signo = ");:}|
    para:s Par_a Identificador Asignacion_s COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el valor de la variable");:}|
    para:s Par_a  COMA incrementar Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner ya sea \"incrementar\" o \"decrementar\"");:}|
    para:s Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador CONDICION Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner una coma entre el incremento y la condicion");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA:s  Par_c Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner la condición");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION:s  Lla_a SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");:}|
    para Par_a error:s COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la declaración del contador");:}|
    para Par_a Identificador Asignacion_s Numero COMA error:s COMA CONDICION Par_c Lla_a  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura del incremento/decremento");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA error:s Par_c Lla_a  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la escritura de la condición");:}|
    para Par_a Par_c Lla_a:s  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> La función para esta sin atributos");:}|
    para Par_a Par_c error:s Lla_a  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis del contenido de la función para.");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c:s  SENTENCIA Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque para");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a:s  Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner las sentencias del bloque para");:}
;
SENTENCIA_SELECTOR ::= 
    selector Par_a Identificador:id Par_c Lla_a BLOQUE_SELECTOR Lla_c
    {:
        if(editor.tablaSimbolos_id.existeToken(id.toString())){
            idActual = id.toString();
            for(Map.Entry<Integer, String> entry : codigoTemporal.entrySet()) {
                Integer key = entry.getKey();
                String value = entry.getValue();
                addCodIntermedio(key,value.replace("_",idActual));
            }
            codigoTemporal.clear();
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :} |
    selector:s  Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la sentencia selector");:}|
    selector Par_a Par_c:s Lla_a BLOQUE_SELECTOR Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta poner el identificador en el selector");:}|
    selector error:s Identificador Lla_a BLOQUE_SELECTOR Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis en el selector");:}|
    selector Par_a error:s Par_c Lla_a BLOQUE_SELECTOR Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Debe ir un identificador en el atributo de selector");:} |
    selector Par_a Identificador Par_c:s  BLOQUE_SELECTOR Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque selector");:}| 
    selector Par_a Identificador Par_c Lla_a:s  Lla_c 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Te falta agregar los casos");:} 
;
BLOQUE_SELECTOR ::= 
    BLOQUE_SELECTOR caso:s Numero:val DosPuntos SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + val.toString() + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :}|
    caso:s Numero:val DosPuntos SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + val.toString() + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :} |
    BLOQUE_SELECTOR caso:s Decimal:val DosPuntos SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + val.toString() + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :}|
    caso:s Numero:val Decimal SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + val.toString() + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :} |
    BLOQUE_SELECTOR caso:s Texto:val DosPuntos SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + val.toString() + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :}|
    caso:s Texto:val DosPuntos SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + val.toString() + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :}| 
    BLOQUE_SELECTOR caso:s verdadero:val DosPuntos SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + true + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :} |
    caso:s verdadero DosPuntos SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + true + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :}| 
    BLOQUE_SELECTOR caso:s falso DosPuntos SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + false + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :} |
    caso:s falso DosPuntos SENTENCIA salir PUNTO_COMA:s1
    {:
        codigoTemporal.put(sright, "    ifElse _ == " + false + " goto LS" + ++contEtiSw);
        addEtiqueta(s1right,"LS" + contEtiSw +":\n");
    :}|
    error:s PUNTO_COMA:u 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector.");
        System.out.println("Error en casos del selector, punto coma en " + uright);:}|
    error:s caso:u 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector.");
        System.out.println("Error en casos del selector, ir al caso en línea " + uright);:}|
    error:s Lla_c:u 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector.");
        System.out.println("Error en casos del selector, ir a llave en la línea " + uright);:}
;
PARAMETRO_TEXTO::=
Identificador:id
{:  if(editor.tablaSimbolos_id.existeToken(id.toString())){
            Simbolo temp = (editor.tablaSimbolos_id.getToken(id.toString()));
            if(temp.getTipo().equals("motor")){
                RESULT = temp.getValor().toString();
            }else{
                addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable \"" + id.toString() + "\" no esta declarada como tipo texto.");
            }
        }else{
            addErrores(idright,"Error semántico en la línea " + (idright + 1)+ " --> La variable " + id.toString() + " no ha sido declarada");
        }
    :} | Texto:s {:RESULT = s;:} ;
INC_DEC ::= incrementar {:RESULT = "++";:} | decrementar {:RESULT = "--";:}
;
TIPO_DATO_DEC ::= entero{:RESULT = "entero";:}|decimal{:RESULT = "decimal";:}|logico{:RESULT = "logico";:}|texto{:RESULT = "texto";:}|display{:RESULT = "display";:}|motor{:RESULT = "motor";:}|led{:RESULT = "led";:}|ledRGB{:RESULT = "ledRGB";:} | 
    error:s 
    {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Tipo de dato no válido.");:}
;
TIPO_VALOR_DEC ::= Numero:s {:RESULT = s;:} | Decimal:s {:RESULT =s ;:}| Texto:s {:RESULT = s;:}| VALOR_LOGICO_DEC:s {:RESULT = s;:} |
   error:s 
   {:addErrores(sright,"Error de sintáxis en la línea " + (sright + 1)+ " --> Se esperaba un valor.");:}
;
VALOR_LOGICO_DEC ::= verdadero {:RESULT = true;:} | falso{:RESULT = false;:};
OP_LOGICO ::= y | o;