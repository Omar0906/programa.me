package aux_tools.sintactico;
import java_cup.runtime.Symbol;
import mx.tectepic.programa.me.Editor;
parser code
{: //Codigo del usuario
    private Editor editor;
    public void setEditor(Editor padre){
        this.editor = padre;
    }
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }
:};
//Terminales
terminal Integer Numero;
terminal Double Decimal;
terminal String Texto;
terminal apagar, inicio_bloque, caso, como, definir, derecha, display, facil_bloque, facil_hacer_mientras, facil_mientras,
    facil_repetir, facil_selector, facil_si, facil_sino, falso, fin_programa, fin_var, girar, grados, hacer, hr, incluir, 
    inicio_programa, inicio_var, intensidad, izquierda, led, led_rgb, led_semaforo, mientras, min, mostrar, 
    motor,motor_electrico,motor_paso, prender, repetir, salir, seg, selector, si, sino, tiempo, veces, verdadero, fin_bloque,
    decimal,entero,texto,logico, y, no, o,incrementar, decrementar,
    Identificador, Tiempo, PUNTO_COMA, DosPuntos, Par_a, Par_c,Lla_a,Lla_c,Cor_a,Cor_c,Igual,Asignacion_s,
    Suma,Resta,Mul,Div,Menor,Mayor,Diferente,Mayor_i,Menor_i,
    ERROR,PUNTO,COMA,visualizar,para,
    rojo,verde,azul,arreglo,arregloBi;
//No terminales
non terminal INICIO,BLOQUE_DECLARACION,BLOQUE_CODIGO, DECLARACIONES, CODIGO,
    DECLARACION,DECLARACION_A,VALOR_LOGICO,ASIGNACION,EXPRESION,TERMINO,
    FACTOR,CONDICION,OP_REL,COMPONENTE,DIRECCION,PARAMETRO_DECIMAL,PARAMETRO_ENTERO,
    FACIL_SENTENCIA,METODO,MOSTRAR_TEXTO,COLOR,TIEMPO,TEXTO,
    SENTENCIA, DECISION,DECISION_FACIL,SENTENCIA_REPETIR,
    SENTENCIA_FACIL_REPETIR,SENTENCIA_MIENTRAS,SENTENCIA_PARA,
    SENTENCIA_SELECTOR,SENTENCIA_FACIL_SELECTOR,
    SENTENCIA_SI,SENTENCIA_FACIL_SI,INC_DEC,
    BLOQUE_SELECTOR,CABEZA,SENTENCIA_FACIL_SINO,
    MANIPULAR_COMPONENTE,TIPO_DATO,TIPO_VALOR;
//Precedencia de operadores
/*precedence left o,fin_programa;
precedence left y;
precedence right no;
precedence left Igual,Menor,Mayor,Menor_i,Mayor_i,Diferente;
precedence left Suma, Resta;
precedence left Mul, Div,inicio_programa,Identificador; */
//Producción con la que iniciar
start with INICIO;

INICIO ::=
     CABEZA BLOQUE_DECLARACION BLOQUE_CODIGO fin_programa {:System.out.println("Programa Correcto!!!!!");:}
;
CABEZA ::= 
    Identificador:s {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_programa. Tienes " + s);:} Identificador |
    inicio_programa Identificador:id{:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),"Nombre del programa");
            System.out.println("Inicio y nombre correcto");
        }:} |
    inicio_programa error:s {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta añadirle un nombre al programa");:} 
    ;
BLOQUE_DECLARACION ::=  inicio_var DECLARACIONES fin_var {:System.out.println("Bloque declaracion correcto");:}|
    error:s DECLARACIONES fin_var {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_var. Tienes " + s);:}
    inicio_var fin_var {:System.out.println("Bloque declaracion correcto");:}|
    inicio_var error:s fin_var {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en las declaraciones. Esta mal estructurada o incompleta");:}
;
DECLARACIONES ::= DECLARACIONES DECLARACION PUNTO_COMA| 
                        DECLARACION PUNTO_COMA|
                        DECLARACIONES DECLARACION_A PUNTO_COMA|
                        DECLARACION_A PUNTO_COMA|
                        error:s PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal estructurada la declaración\n----> ¿Revisaste si le pusiste el ;?\n----> ¿Revisaste si estan bien escritas las palabras reservadas?");:}
;
DECLARACION ::= definir Identificador:id como entero:td
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un entero");:}|
    definir Identificador:id como decimal:td
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un decimal");:}|
    definir Identificador:id como logico:td
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un logico");:}|
    definir Identificador:id como texto:td
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un texto");:}|
    definir Identificador:id como display:td
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un display");:}|
    definir Identificador:id como motor:td
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un motor");:}|
    definir Identificador:id como led:td
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un led");:}|
    definir Identificador:id como tiempo:td
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un tiempo");:}|
    definir Identificador:id como arreglo:td Cor_a Numero Cor_c
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arreglo");:}|
    definir Identificador:id como arregloBi:td Cor_a Numero Cor_c  Cor_a Numero Cor_c
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString());
        }
        System.out.println("Se encontro una declaracion de un arregloBi");:}
;
DECLARACION_A ::= definir Identificador:id como entero:td Asignacion_s Numero:val
        {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un entero");:}
        |
    definir Identificador:id como decimal:td Asignacion_s Decimal:val
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un decimal");:}
        |
    definir Identificador:id como logico:td Asignacion_s verdadero:val
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un logico");:}
        |
    definir Identificador:id como logico:td Asignacion_s falso:val
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un logico");:}
        |
    definir Identificador:id como texto:td Asignacion_s Texto:val
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val);
        }System.out.println("Se encontro una declaracion con asignacion de un texto");:}
        |
    definir Identificador:id como tiempo:td Asignacion_s Tiempo:val
    {:if(editor.tablaSimbolos_id.buscarToken(id.toString())){
            editor.tablaSimbolos_id.ubicarToken(id.toString(),td.toString(),val.toString());
        }System.out.println("Se encontro una declaracion con asignacion de un tiempo");:}
;
ASIGNACION ::= 
    Identificador Asignacion_s Texto PUNTO_COMA {:System.out.println("Se ha encontrado ASIGNACION");:} |
    Identificador Asignacion_s verdadero PUNTO_COMA {:System.out.println("Se ha encontrado ASIGNACION");:} |
    Identificador Asignacion_s falso PUNTO_COMA {:System.out.println("Se ha encontrado ASIGNACION");:} |
    Identificador Asignacion_s EXPRESION PUNTO_COMA {:System.out.println("Se ha encontrado ASIGNACION");:} |
    Identificador Asignacion_s:s  PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el valor a asignar");:} |
    Identificador:s Texto PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el signo =");:} |
    Identificador:s verdadero PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el signo =");:} |
    Identificador:s falso PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el signo =");:} |
    Identificador:s EXPRESION PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falto poner el signo =");:} |
    Identificador Asignacion_s error:s PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> No se pudo determinar el valor a asignar");:}
;
EXPRESION ::= EXPRESION Suma TERMINO |
    EXPRESION Resta TERMINO |
    TERMINO
;
TERMINO ::= TERMINO Mul FACTOR |
    TERMINO Div FACTOR  |
    FACTOR
;
FACTOR ::= Par_a EXPRESION Par_c |
    Numero | Decimal | Identificador
;
CONDICION ::= Identificador Igual falso |
    Identificador Igual verdadero |
    verdadero Igual Identificador |
    falso Igual Identificador |
    Identificador OP_REL Numero |
    Numero OP_REL Identificador |
    Identificador OP_REL Identificador |
    Numero OP_REL Numero |
    verdadero |
    falso |
    Identificador
;
OP_REL ::= Mayor_i | Menor_i | Diferente | Mayor | Menor | Igual;
DIRECCION ::= izquierda | derecha
;
BLOQUE_CODIGO ::=   
         inicio_bloque SENTENCIA fin_bloque {:System.out.println("Se encontro un BLOQUE_CODIGO correcto");:}|
         inicio_bloque fin_bloque {:System.out.println("Se encontro un BLOQUE_CODIGO correcto");:}|
         error:s SENTENCIA fin_bloque {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error al escribir inicio_programa.");:}
;
METODO ::= incrementar Identificador PUNTO_COMA{:System.out.println("\nEncontrado un incremento de id");:} |
    incrementar Identificador error:s {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta el ;");
        System.out.println("\nEncontrado un decremento de id");:} |
    incrementar:s PUNTO_COMA{:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner el identificador");:} |
    decrementar Identificador PUNTO_COMA{:System.out.println("\nEncontrado un decremento de id");:} |
    decrementar Identificador error:s {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta el ;");
        System.out.println("\nEncontrado un decremento de id");:} |
    decrementar:s PUNTO_COMA{:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner el identificador");:} |
    MOSTRAR_TEXTO |
    MANIPULAR_COMPONENTE
   ;
//mostrar "cadena"
MOSTRAR_TEXTO ::= mostrar Texto PUNTO_COMA {:System.out.println("\nEncontrado mostrar texto");:} |
    mostrar Identificador  PUNTO_COMA{:System.out.println("\nEncontrado mostrar texto");:} |
    mostrar PUNTO_COMA:s{:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner el identificador o al menos una cadena");:} |
    mostrar error:s  PUNTO_COMA{:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal estructurada la instrucción. ¿Pusiste el ;? ¿No te saltaste el identificador?");:}
;
MANIPULAR_COMPONENTE ::=
    Identificador PUNTO error:s PUNTO_COMA{:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal escrita la función del componente.");:} |
    Identificador PUNTO prender PUNTO_COMA {:System.out.println("\nEncontrado prender");:}|
    Identificador PUNTO apagar PUNTO_COMA{:System.out.println("\nEncontrado apagar");:} |
    Identificador PUNTO prender PUNTO COLOR  PUNTO_COMA{:System.out.println("\nEncontrado prender color");:}|
    Identificador PUNTO girar PUNTO DIRECCION PUNTO_COMA{:System.out.println("\nEncontrado girar direccion");:}|
    Identificador PUNTO girar PUNTO DIRECCION Par_a TIEMPO Par_c PUNTO_COMA{:System.out.println("\nEncontrado girar con tiempo");:}|
    Identificador PUNTO girar PUNTO DIRECCION Par_a error:s Par_c PUNTO_COMA{:
        editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Esta mal escrito el valor de tiempo. Recuerda que es un numero entero y ya sea seg, hr o min.");
    System.out.println("\nEncontrado girar con tiempo");:}|
    Identificador PUNTO visualizar Par_a TEXTO Par_c PUNTO_COMA {:System.out.println("\nEncontrado visualizar display");:}
;

COLOR ::= rojo | verde | azul;
TIEMPO ::= Tiempo | Identificador;
TEXTO ::= Texto | Identificador;

SENTENCIA ::= SENTENCIA METODO |
    METODO |
    SENTENCIA ASIGNACION |
    ASIGNACION |
    SENTENCIA DECISION |
    DECISION |
    SENTENCIA SENTENCIA_REPETIR |
    SENTENCIA_REPETIR |
    SENTENCIA SENTENCIA_FACIL_REPETIR |
    SENTENCIA_FACIL_REPETIR |
    SENTENCIA SENTENCIA_MIENTRAS |
    SENTENCIA_MIENTRAS |
    SENTENCIA SENTENCIA_PARA|
    SENTENCIA_PARA |
    SENTENCIA SENTENCIA_SELECTOR |
    SENTENCIA_SELECTOR |
    SENTENCIA error:s  PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> La sentencia esta mal estructurada. Revisala.");:}
;
DECISION ::= SENTENCIA_SI | SENTENCIA_FACIL_SI | SENTENCIA_FACIL_SINO
;
FACIL_SENTENCIA ::= METODO | ASIGNACION
;
SENTENCIA_SI ::= 
    si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c {:System.out.println("Se ha encontrado SENTENCIA SI");:} |
    si:s CONDICION Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la condición");:} |
    si Par_a:s Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la condición");:} |
    si Par_a CONDICION:s Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis de la condición");:} |
    si Par_a CONDICION Par_c:s  SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque si");:} |
    si Par_a CONDICION Par_c error:s Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en las instrucciones");:} |
    si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino Lla_a SENTENCIA Lla_c {:System.out.println("Se ha encontrado SENTENCIA SI SINO");:} |
    si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c:s Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la palabra \"sino\"");:} |
    si Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c sino:s SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque sino");:}
;
SENTENCIA_FACIL_SI ::= 
        facil_si Par_a CONDICION Par_c FACIL_SENTENCIA {:System.out.println("Se ha encontrado FACIL SI");:} |
        facil_si:s CONDICION Par_c FACIL_SENTENCIA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis del bloque facil_si");:} |
        facil_si:s Par_a Par_c FACIL_SENTENCIA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó poner la condición");:} |
        facil_si:s Par_a CONDICION  FACIL_SENTENCIA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te faltó cerrar el paréntesis de la condición");:}
;
SENTENCIA_FACIL_SINO ::=
        facil_si:s Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c {:System.out.println("Se ha encontrado FACIL SI SINO");:}|
        facil_si:s  CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque");:}|
        facil_si:s Par_a  COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la condición");:}|
        facil_si Par_a CONDICION:s  FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te saltaste la coma que separa la condición de la instrucción");:}|
        facil_si Par_a CONDICION COMA:s Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la instrucción a realizar");:}|
        facil_si Par_a CONDICION COMA FACIL_SENTENCIA:s  Lla_a facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");:}|
        facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c:s facil_sino Par_a FACIL_SENTENCIA Par_c Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave para la sentencia facil_sino");:}|
        facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a Par_a:s FACIL_SENTENCIA Par_c Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la palabra facil_sino");:}|
        facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino:s  FACIL_SENTENCIA Par_c Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la sentencia facil_sino");:}|
        facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a:s  Par_c Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la instrucción a realizar");:}|
        facil_si Par_a CONDICION COMA FACIL_SENTENCIA Par_c Lla_a facil_sino Par_a FACIL_SENTENCIA:s Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis de la sentencia facil_sino");:}
;
SENTENCIA_REPETIR ::= 
    repetir PARAMETRO_ENTERO veces Lla_a SENTENCIA Lla_c {:System.out.println("Se ha encontrado REPETIR");:} |
    repetir:s veces Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el número entero de repeticiones");:} |
    repetir:s PARAMETRO_ENTERO  Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la palabra \"veces\"");:} |
    repetir:s PARAMETRO_ENTERO veces  SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque repetir");:} |
    repetir PARAMETRO_ENTERO veces Lla_a:s  Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner las sentencias");:} |
    repetir PARAMETRO_ENTERO veces Lla_a error:s Lla_c{:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en las sentencias del bloque");:} |
    repetir error:s Lla_a SENTENCIA Lla_c{:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> La sentencia repetir esta incompleta");:}
; 
SENTENCIA_FACIL_REPETIR ::=
    facil_repetir:s Par_a PARAMETRO_DECIMAL COMA FACIL_SENTENCIA Par_c PUNTO_COMA {:System.out.println("Se ha encontrado FACIL REPETIR");:} |
    facil_repetir Par_a error:s Par_c PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> No se pudo determinar el contenido del paréntesis");:} |
    facil_repetir:s  PARAMETRO_DECIMAL COMA FACIL_SENTENCIA Par_c PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque facil_repetir");:} |
    facil_repetir:s Par_a  COMA FACIL_SENTENCIA Par_c PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el número de repeticiones");:} |
    facil_repetir Par_a PARAMETRO_DECIMAL error:s FACIL_SENTENCIA Par_c PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te saltaste una coma");:} |
    facil_repetir Par_a PARAMETRO_DECIMAL COMA:s  Par_c PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la instrucción a repetir");:} |
    facil_repetir Par_a:s Par_c PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> La instrución esta vacía");:} |
    facil_repetir error:s Par_c PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la sintáxis de la sentencia facil_repetir, popr favor revisalo");:}
;
SENTENCIA_MIENTRAS ::=
    mientras Par_a CONDICION Par_c Lla_a SENTENCIA Lla_c {:System.out.println("Se ha encontrado MIENTRAS");:}|
    mientras:s CONDICION Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");:} |
    mientras Par_a:s Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la condicion");:} |
    mientras Par_a:s CONDICION  Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");:} |
    mientras Par_a CONDICION Par_c:s  SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque mientras");:} |
    mientras Par_a CONDICION Par_c Lla_a:s  Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner sentencias dentro del bloque");:} |
    mientras error:s Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la sintaxis del ciclo mientras, por favor revisalo");:}
;
SENTENCIA_PARA ::= 
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c {:System.out.println("Se ha encontrado PARA");:} | 
    para:s  Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis");:}|
    para:s Par_a Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner un nuevo identificador");:}|
    para Par_a Identificador:s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el signo = ");:}|
    para:s Par_a Identificador Asignacion_s COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el valor de la variable");:}|
    para:s Par_a  COMA incrementar Identificador COMA CONDICION Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner ya sea \"incrementar\" o \"decrementar\"");:}|
    para:s Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador CONDICION Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner una coma entre el incremento y la condicion");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA:s  Par_c Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner la condición");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION:s  Lla_a SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis");:}|
    para Par_a error:s COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a  SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la declaración del contador");:}|
    para Par_a Identificador Asignacion_s Numero COMA error:s COMA CONDICION Par_c Lla_a  SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la escritura del incremento/decremento");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA error:s Par_c Lla_a  SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la escritura de la condición");:}|
    para Par_a Par_c Lla_a:s  SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> La función para esta sin atributos");:}|
    para Par_a Par_c error:s Lla_a  SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la sintáxis del contenido de la función para.");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c:s  SENTENCIA Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque para");:}|
    para Par_a Identificador Asignacion_s Numero COMA INC_DEC Identificador COMA CONDICION Par_c Lla_a:s  Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner las sentencias del bloque para");:}
;
SENTENCIA_SELECTOR ::= 
    selector Par_a Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c {:System.out.println("Se ha encontrado SELECTOR");:} |
    selector:s  Identificador Par_c Lla_a BLOQUE_SELECTOR Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir el paréntesis de la sentencia selector");:}|
    selector Par_a Par_c:s Lla_a BLOQUE_SELECTOR Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta poner el identificador en el selector");:}|
    selector Par_a:s Identificador Lla_a BLOQUE_SELECTOR Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta cerrar el paréntesis en el selector");:}|
    selector Par_a error:s Par_c Lla_a BLOQUE_SELECTOR Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Debe ir un identificador en el atributo de selector");:} |
    selector Par_a Identificador Par_c:s  BLOQUE_SELECTOR Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta abrir la llave del bloque selector");:}| 
    selector Par_a Identificador Par_c Lla_a:s  Lla_c {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Te falta agregar los casos");:} 
;
BLOQUE_SELECTOR ::= BLOQUE_SELECTOR Numero DosPuntos SENTENCIA salir PUNTO_COMA |
    Numero DosPuntos SENTENCIA salir PUNTO_COMA |
    BLOQUE_SELECTOR Texto DosPuntos SENTENCIA salir PUNTO_COMA |
    Texto DosPuntos SENTENCIA salir PUNTO_COMA| 
    BLOQUE_SELECTOR verdadero DosPuntos SENTENCIA salir PUNTO_COMA |
    verdadero DosPuntos SENTENCIA salir PUNTO_COMA| 
    BLOQUE_SELECTOR falso DosPuntos SENTENCIA salir PUNTO_COMA |
    falso DosPuntos SENTENCIA salir PUNTO_COMA |
    error:s PUNTO_COMA {:editor.ERRORES.add("Error de sintáxis. Línea " + (sright + 1)+ " --> Error en la sintáxis de los casos del selector");:}
;
PARAMETRO_DECIMAL ::=   Identificador | Decimal  ;
PARAMETRO_ENTERO::= Identificador | Numero ;
INC_DEC ::= incrementar | decrementar;